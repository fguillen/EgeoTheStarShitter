{
  "paths": [
    {
      "type": "dir",
      "name": "Getting-Started",
      "children": [
        {
          "type": "file",
          "value": "Getting-Started/1-Getting-Started.md"
        },
        {
          "type": "file",
          "value": "Getting-Started/2-Installing-Layers.md"
        },
        {
          "type": "file",
          "value": "Getting-Started/3-Setting-Up-Audio.md"
        },
        {
          "type": "file",
          "value": "Getting-Started/4-Creating-Sound-Graphs.md"
        },
        {
          "type": "file",
          "value": "Getting-Started/5-Playing-Audio.md"
        },
        {
          "type": "file",
          "value": "Getting-Started/6-Adding-Logic.md"
        },
        {
          "type": "file",
          "value": "Getting-Started/7-Playing-in-the-Scene.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "Home.md"
    },
    {
      "type": "dir",
      "name": "Layers-Key-Concepts",
      "children": [
        {
          "type": "file",
          "value": "Layers-Key-Concepts/0-Layers-Key-Concepts.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/1-Sound-Graphs.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/10-MIDI-Editing.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/11-Mixing.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/12-Globals.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/2-Events.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/3-Variables.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/4-Play-Nodes.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/5-Audio-Outs.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/6-Sub-Graphs.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/7-Sound-Graph-Playback.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/8-Code-Generation.md"
        },
        {
          "type": "file",
          "value": "Layers-Key-Concepts/9-API.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Nodes",
      "children": [
        {
          "type": "dir",
          "name": "Automation",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Automation/Animate.md"
            },
            {
              "type": "file",
              "value": "Nodes/Automation/Find-Snapshot.md"
            },
            {
              "type": "file",
              "value": "Nodes/Automation/Get-Mixer-Parameter.md"
            },
            {
              "type": "file",
              "value": "Nodes/Automation/Move-Towards.md"
            },
            {
              "type": "file",
              "value": "Nodes/Automation/Set-Mixer-Parameter.md"
            },
            {
              "type": "file",
              "value": "Nodes/Automation/Transition-To-Snapshots.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Flow",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Flow/Do-If.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Do-While.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/If.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/MIDI-Channel-Filter.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/MIDI-Note-Range-Filter.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Pick-Branch.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Pick-Random-Branch.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Pin.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Wait-For-All.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Wait-For-Condition.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Wait-For-Event.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Wait-For-Scene-Load.md"
            },
            {
              "type": "file",
              "value": "Nodes/Flow/Wait.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Logic",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Logic/And.md"
            },
            {
              "type": "file",
              "value": "Nodes/Logic/Comparison.md"
            },
            {
              "type": "file",
              "value": "Nodes/Logic/Not.md"
            },
            {
              "type": "file",
              "value": "Nodes/Logic/Or.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "MIDI-Input",
          "children": [
            {
              "type": "file",
              "value": "Nodes/MIDI-Input/Get-Key.md"
            },
            {
              "type": "file",
              "value": "Nodes/MIDI-Input/Get-knob.md"
            },
            {
              "type": "file",
              "value": "Nodes/MIDI-Input/MIDI-Input.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Math-Operations",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Add.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Clamp.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Divide.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Inverse-Lerp.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Lerp.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Magnitude.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Multiply.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Random-Number.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Remap-to-Curve.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Remap.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Repeat.md"
            },
            {
              "type": "file",
              "value": "Nodes/Math-Operations/Subtract.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Playback",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Playback/Audio-Out.md"
            },
            {
              "type": "file",
              "value": "Nodes/Playback/Play.md"
            },
            {
              "type": "file",
              "value": "Nodes/Playback/Sampler-Track.md"
            },
            {
              "type": "file",
              "value": "Nodes/Playback/State-Machine.md"
            },
            {
              "type": "file",
              "value": "Nodes/Playback/Sub-Graph.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Signal-Sources",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/Click-Track.md"
            },
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/End-All-Playback.md"
            },
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/Event.md"
            },
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/Graph-Inputs.md"
            },
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/Raise-Event-On-Condition.md"
            },
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/Trigger-Event.md"
            },
            {
              "type": "file",
              "value": "Nodes/Signal-Sources/Update.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Utilities",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Utilities/Debug-Log.md"
            },
            {
              "type": "file",
              "value": "Nodes/Utilities/To-String.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "Variables",
          "children": [
            {
              "type": "file",
              "value": "Nodes/Variables/Boolean-Value-Selector.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Combine.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Digital-Signal-Processor-Time.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Split.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Switch-Value-Selector.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Value-Selector.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Variable.md"
            },
            {
              "type": "file",
              "value": "Nodes/Variables/Write.md"
            }
          ]
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "Getting-Started/1-Getting-Started.md",
      "url": "Getting-Started/1-Getting-Started.html",
      "content": "\r\n\r\n\r\n\r\n# Getting Started\r\n\r\nThis tutorial will walk you through using Layers, from installation to building a working adaptive music system. At the end of this tutorial, you will have created a music system that layers on music elements depending on an intensity value.\r\n\r\nNote, Layers is an extremely flexible tool, so there's many ways to build an adaptive music system. The recommended way is to use the [State Machine Node](Docs/Nodes/Playback/State-machine). In this tutorial, we will opt not to use the State Machine Node in favor of building the logic manually. This approach is less efficient but provides a much better tour of Layer's systems and the tools available to you.\r\n\r\n### Contents\r\n* [Installing Layers](../Getting-Started/2-Installing-Layers.md)\r\n* [ Setting up audio](../Getting-Started/3-Setting-Up-Audio.md)\r\n* [Creating sound graphs](../Getting-Started/4-Creating-Sound-Graphs.md)\r\n* [Playing audio](../Getting-Started/5-Playing-Audio.md)\r\n* [Adding logic](../Getting-Started/6-Adding-Logic.md)\r\n* [Playing in the scene](../Getting-Started/7-Playing-in-the-Scene.md)\r\n",
      "html": "<h1 id=\"getting-started\">Getting Started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h1>\n<p>This tutorial will walk you through using Layers, from installation to building a working adaptive music system. At the end of this tutorial, you will have created a music system that layers on music elements depending on an intensity value.</p>\n<p>Note, Layers is an extremely flexible tool, so there’s many ways to build an adaptive music system. The recommended way is to use the <a href=\"Docs/Nodes/Playback/State-machine\">State Machine Node</a>. In this tutorial, we will opt not to use the State Machine Node in favor of building the logic manually. This approach is less efficient but provides a much better tour of Layer’s systems and the tools available to you.</p>\n<h3 id=\"contents\">Contents <a class=\"heading-anchor-permalink\" href=\"#contents\">#</a></h3>\n<ul>\n<li><a href=\"../Getting-Started/2-Installing-Layers.html\">Installing Layers</a></li>\n<li><a href=\"../Getting-Started/3-Setting-Up-Audio.html\"> Setting up audio</a></li>\n<li><a href=\"../Getting-Started/4-Creating-Sound-Graphs.html\">Creating sound graphs</a></li>\n<li><a href=\"../Getting-Started/5-Playing-Audio.html\">Playing audio</a></li>\n<li><a href=\"../Getting-Started/6-Adding-Logic.html\">Adding logic</a></li>\n<li><a href=\"../Getting-Started/7-Playing-in-the-Scene.html\">Playing in the scene</a></li>\n</ul>\n",
      "id": 0
    },
    {
      "path": "Getting-Started/2-Installing-Layers.md",
      "url": "Getting-Started/2-Installing-Layers.html",
      "content": "\r\n\r\n# Installing Layers\r\n\r\nTo get started, lets first install and configure Layers!\r\n\r\n## Getting Layers\r\nIf you haven't already, purchase and download Layers from the Unity Asset Store.\r\n\r\n## Installing Layers\r\nOnce Layers is downloaded, import it into your project. The Install Layers wizard will show. Note - if you close this dialog, you can open it again from Tools -> Layers Installer -> Install Layers.\r\n\r\n![LayersInstallationWindowA.png](../IMG/LayersInstallationWindowA.png)\r\n\r\nClick on the Get Started button to move on to the next step and configure Layers for your project.\r\n\r\nLayers uses code generation to make the audio systems you create easier for programmers to work with. Pick an empty folder in your project (create it if needed!) using the wizard, then press the \"Continue\" button.\r\n\r\n![LayersInstallationWindowB.png](../IMG/LayersInstallationWindowB.png)\r\n\r\nFinally, click the Install button to begin installing Layers. Note, if you are upgrading Layers, the installer may prompt you to backup your project prior to continuing. If you see this, it means a major change in the Layers system has been made between the version in your project and the latest version, and an install script will need to edit your files to maintain compatibility. If you cancel the install to do a backup, you can always restart the install process later!\r\n",
      "html": "<h1 id=\"installing-layers\">Installing Layers <a class=\"heading-anchor-permalink\" href=\"#installing-layers\">#</a></h1>\n<p>To get started, lets first install and configure Layers!</p>\n<h2 id=\"getting-layers\">Getting Layers <a class=\"heading-anchor-permalink\" href=\"#getting-layers\">#</a></h2>\n<p>If you haven’t already, purchase and download Layers from the Unity Asset Store.</p>\n<h2 id=\"installing-layers-2\">Installing Layers <a class=\"heading-anchor-permalink\" href=\"#installing-layers-2\">#</a></h2>\n<p>Once Layers is downloaded, import it into your project. The Install Layers wizard will show. Note - if you close this dialog, you can open it again from Tools -&gt; Layers Installer -&gt; Install Layers.</p>\n<p><img src=\"../IMG/LayersInstallationWindowA.png\" alt=\"LayersInstallationWindowA.png\"></p>\n<p>Click on the Get Started button to move on to the next step and configure Layers for your project.</p>\n<p>Layers uses code generation to make the audio systems you create easier for programmers to work with. Pick an empty folder in your project (create it if needed!) using the wizard, then press the “Continue” button.</p>\n<p><img src=\"../IMG/LayersInstallationWindowB.png\" alt=\"LayersInstallationWindowB.png\"></p>\n<p>Finally, click the Install button to begin installing Layers. Note, if you are upgrading Layers, the installer may prompt you to backup your project prior to continuing. If you see this, it means a major change in the Layers system has been made between the version in your project and the latest version, and an install script will need to edit your files to maintain compatibility. If you cancel the install to do a backup, you can always restart the install process later!</p>\n",
      "id": 1
    },
    {
      "path": "Getting-Started/3-Setting-Up-Audio.md",
      "url": "Getting-Started/3-Setting-Up-Audio.html",
      "content": "\r\n\r\n# Setting Up Audio\r\n\r\nLayers works directly with Unity AudioClips. In this tutorial, we'll be building a music system that fades in musical elements depending on an intensity value. At low intensity values, the music system will just play a drum track. As the intensity increases, the system will layer on a beat, and eventually a lead. \r\n\r\nTo continue, we'll need some music stems to work with. We'll be using the free [House Vives pack](https://assetstore.unity.com/packages/audio/music/house-vibes-153650) from [DARRY2VANCE](https://darry2vance.com/), but feel free to bring your own! Either way, add the files to your project, and you're ready to begin!",
      "html": "<h1 id=\"setting-up-audio\">Setting Up Audio <a class=\"heading-anchor-permalink\" href=\"#setting-up-audio\">#</a></h1>\n<p>Layers works directly with Unity AudioClips. In this tutorial, we’ll be building a music system that fades in musical elements depending on an intensity value. At low intensity values, the music system will just play a drum track. As the intensity increases, the system will layer on a beat, and eventually a lead.</p>\n<p>To continue, we’ll need some music stems to work with. We’ll be using the free <a href=\"https://assetstore.unity.com/packages/audio/music/house-vibes-153650\">House Vives pack</a> from <a href=\"https://darry2vance.com/\">DARRY2VANCE</a>, but feel free to bring your own! Either way, add the files to your project, and you’re ready to begin!</p>\n",
      "id": 2
    },
    {
      "path": "Getting-Started/4-Creating-Sound-Graphs.md",
      "url": "Getting-Started/4-Creating-Sound-Graphs.html",
      "content": "\r\n\r\n# Creating Sound Graphs\r\n\r\nLet's make your first Sound Graph! Sound Graphs define the logic for how audio is played in your scenes. Sound graphs are assets that are located in your project, and can be reused as many times as you like, in any scene. You can make as many Sound Graphs as you like - for example, you may have one Sound Graph running your background music, and another for controlling sound effects for a player controller.\r\n\r\nTo create a Sound Graph, right click in your project window and click Create->Sound graph. Name it Tutorial Graph for this tutorial.\r\n\r\n## Editing a Sound Graph\r\nTo open a Sound Graph for editing, click on the Sound Graph in the Project Window, and then click Open in the Inspector Window. You can also double click on the asset to open it. The Sound Graph Editor will appear. You will notice that your Sound Graph is already populated with a node, the [Graph Input](../Nodes/Signal-Sources/Graph-Inputs.md) Node.\r\n\r\n![Tutorial-GraphInputNode.png](../IMG/Tutorial-GraphInputNode.png)\r\n\r\nNodes define the logic of the Sound Graph. Sound Graphs are like flow charts. One node of the Sound Graph triggers the next. Sometimes a node may perform an action, like playing audio, or making a computation. Other times, it may decide what branch to take. The Graph Input node is the most important - everything else in the Sound Graph depends on it. The Graph Inputs node defines variables that may be used throughout the Sound Graph. It also defines the events used to trigger logic throughout the Sound Graph, such as starting or changing playback. For more information on the Graph Input node, see the node's [documentation](../Nodes/Signal-Sources/Graph-Inputs.md).\r\n\r\nNow that the Sound Graph is created and open for editing, let's add some audio!\r\n",
      "html": "<h1 id=\"creating-sound-graphs\">Creating Sound Graphs <a class=\"heading-anchor-permalink\" href=\"#creating-sound-graphs\">#</a></h1>\n<p>Let’s make your first Sound Graph! Sound Graphs define the logic for how audio is played in your scenes. Sound graphs are assets that are located in your project, and can be reused as many times as you like, in any scene. You can make as many Sound Graphs as you like - for example, you may have one Sound Graph running your background music, and another for controlling sound effects for a player controller.</p>\n<p>To create a Sound Graph, right click in your project window and click Create-&gt;Sound graph. Name it Tutorial Graph for this tutorial.</p>\n<h2 id=\"editing-a-sound-graph\">Editing a Sound Graph <a class=\"heading-anchor-permalink\" href=\"#editing-a-sound-graph\">#</a></h2>\n<p>To open a Sound Graph for editing, click on the Sound Graph in the Project Window, and then click Open in the Inspector Window. You can also double click on the asset to open it. The Sound Graph Editor will appear. You will notice that your Sound Graph is already populated with a node, the <a href=\"../Nodes/Signal-Sources/Graph-Inputs.html\">Graph Input</a> Node.</p>\n<p><img src=\"../IMG/Tutorial-GraphInputNode.png\" alt=\"Tutorial-GraphInputNode.png\"></p>\n<p>Nodes define the logic of the Sound Graph. Sound Graphs are like flow charts. One node of the Sound Graph triggers the next. Sometimes a node may perform an action, like playing audio, or making a computation. Other times, it may decide what branch to take. The Graph Input node is the most important - everything else in the Sound Graph depends on it. The Graph Inputs node defines variables that may be used throughout the Sound Graph. It also defines the events used to trigger logic throughout the Sound Graph, such as starting or changing playback. For more information on the Graph Input node, see the node’s <a href=\"../Nodes/Signal-Sources/Graph-Inputs.html\">documentation</a>.</p>\n<p>Now that the Sound Graph is created and open for editing, let’s add some audio!</p>\n",
      "id": 3
    },
    {
      "path": "Getting-Started/5-Playing-Audio.md",
      "url": "Getting-Started/5-Playing-Audio.html",
      "content": "\r\n\r\n# Playing Audio\r\n\r\nLets add and play some audio!\r\n\r\n## Adding a Play node\r\nFirst, lets add a [Play node](../Layers-Key-Concepts/4-Play-Nodes.md) to the graph. As the name suggests, Play nodes are responsible for playing back Audio in Layers. They can also playback other types of assets, but that's beyond the scope of this tutorial - check out the [Play node documentation](../Layers-Key-Concepts/4-Play-Nodes.md) for more information.\r\n\r\nTo add a Play node to the Sound Graph, right click anywhere in the Sound Graph, and click Playback -> Play. A play node will appear in your Sound Graph.\r\n\r\n![Tutorial-CreatingAPlayNode](../IMG/Tutorial-CreatingAPlayNode.png)\r\n\r\nLet's add some tracks to this Play node. Click the Open button on the Play node to open up the Play node Timeline.\r\n\r\n![Tutorial-PlayNodeTimelineIntro.png](../IMG/Tutorial-PlayNodeTimelineIntro.png)\r\n\r\nThe timeline works exactly like the timeline in a Digital Audio Workstation. In the center are a series of tracks that we can add Audio Clips to. Each timeline starts with one track, but you can add another simply by dragging a clip in the timeline downwards.\r\n\r\n## Adding audio\r\nLet's add some audio! To add audio, drag it onto the timeline, or right click in the timeline and select Add Audio Clip. From the House Vibes pack we downloaded previously, let's add *06_House_Vibes_Snare in track 1*, *01_House_Vibes_Bassdrum* in track 2, and *09_House_Vibes_Piano* in track 3. Drag each clip their start aligns with the beginning of the timeline.\r\n\r\nFor organization purposes, let's name each of our tracks. On the left hand side of each track is the track name (by default, each track is named Track). Name track 1 Low Intensity, name track 2 Medium Intensity, and name track 3 High Intensity.\r\n\r\nFinally, lets drag the End of Playback marker to the end of the Audio Clips. The End of Playback marker is a vertical gray bar with a little tab on it in the timeline. We won't need this until later in the tutorial, but the marker defines what time in playback to trigger subsequent nodes connected to the Play Finished output of the play node. Drag the marker to the end of playback (use the ctrl key to snap it to the end of your Audio Clips).\r\n\r\nYour timeline should now look like this:\r\n\r\n![Tutorial-AddedAudioClips.png](../IMG/Tutorial-AddedAudioClips.png)\r\n\r\n## Adding events and playing  audio\r\nGo ahead and close the timeline. Our Play node now has audio to play, but nothing is triggering the Play node to play. Let's make an event to do that!\r\n\r\nOn the Graph Inputs node, click the \"+\" in the Events list. A new event will appear in the list. Every event has a name, let's set ours to \"Begin Play\". Then, connect the output port of the event to the Play input port in the Play node. Your graph should look like this:\r\n\r\n![Tutorial-BeginPlayEvent.png](../IMG/Tutorial-BeginPlayEvent.png)\r\n\r\nOn the Begin Play event is a button labeled \"Trigger\". This button is used to manually trigger the event. Currently if we trigger the event, the Play node is activated, but no audio will play. This is because we need to tell the Play node how to play the audio - to do this, we'll use an [Audio Out](Docs/Nodes/Playback/Audio-Out) node.\r\n\r\n## Adding the Audio Out\r\nTo add an Audio out node, right click anywhere in the Sound Graph Editor window and select Playback -> Audio Out. Audio Out nodes define how audio is played, including location, volume, panning, spatialization, etc. For more information, see the [Audio Out documentation page](Docs/Nodes/Playback/Audio-Out).\r\n\r\nFor our purposes, the default settings on the Audio Out node will be fine. We just need to send the audio from the Play node to the Audio Out by connecting the Audio Out output port of the Play Node to the Audio In input port of the Audio Out node. Your Sound Graph should now look like this:\r\n\r\n![Tutorial-ConnectingAudioOut.png](../IMG/Tutorial-ConnectingAudioOut.png)\r\n\r\nNow, press the Trigger button on the event in the Graph Inputs node. A small window should pop up - click the Trigger button in that window. Your Play node should start playing your audio!\r\n\r\nRight now, all of our audio plays once, and then playback ends. Let's fix that!\r\n",
      "html": "<h1 id=\"playing-audio\">Playing Audio <a class=\"heading-anchor-permalink\" href=\"#playing-audio\">#</a></h1>\n<p>Lets add and play some audio!</p>\n<h2 id=\"adding-a-play-node\">Adding a Play node <a class=\"heading-anchor-permalink\" href=\"#adding-a-play-node\">#</a></h2>\n<p>First, lets add a <a href=\"../Layers-Key-Concepts/4-Play-Nodes.html\">Play node</a> to the graph. As the name suggests, Play nodes are responsible for playing back Audio in Layers. They can also playback other types of assets, but that’s beyond the scope of this tutorial - check out the <a href=\"../Layers-Key-Concepts/4-Play-Nodes.html\">Play node documentation</a> for more information.</p>\n<p>To add a Play node to the Sound Graph, right click anywhere in the Sound Graph, and click Playback -&gt; Play. A play node will appear in your Sound Graph.</p>\n<p><img src=\"../IMG/Tutorial-CreatingAPlayNode.png\" alt=\"Tutorial-CreatingAPlayNode\"></p>\n<p>Let’s add some tracks to this Play node. Click the Open button on the Play node to open up the Play node Timeline.</p>\n<p><img src=\"../IMG/Tutorial-PlayNodeTimelineIntro.png\" alt=\"Tutorial-PlayNodeTimelineIntro.png\"></p>\n<p>The timeline works exactly like the timeline in a Digital Audio Workstation. In the center are a series of tracks that we can add Audio Clips to. Each timeline starts with one track, but you can add another simply by dragging a clip in the timeline downwards.</p>\n<h2 id=\"adding-audio\">Adding audio <a class=\"heading-anchor-permalink\" href=\"#adding-audio\">#</a></h2>\n<p>Let’s add some audio! To add audio, drag it onto the timeline, or right click in the timeline and select Add Audio Clip. From the House Vibes pack we downloaded previously, let’s add <em>06_House_Vibes_Snare in track 1</em>, <em>01_House_Vibes_Bassdrum</em> in track 2, and <em>09_House_Vibes_Piano</em> in track 3. Drag each clip their start aligns with the beginning of the timeline.</p>\n<p>For organization purposes, let’s name each of our tracks. On the left hand side of each track is the track name (by default, each track is named Track). Name track 1 Low Intensity, name track 2 Medium Intensity, and name track 3 High Intensity.</p>\n<p>Finally, lets drag the End of Playback marker to the end of the Audio Clips. The End of Playback marker is a vertical gray bar with a little tab on it in the timeline. We won’t need this until later in the tutorial, but the marker defines what time in playback to trigger subsequent nodes connected to the Play Finished output of the play node. Drag the marker to the end of playback (use the ctrl key to snap it to the end of your Audio Clips).</p>\n<p>Your timeline should now look like this:</p>\n<p><img src=\"../IMG/Tutorial-AddedAudioClips.png\" alt=\"Tutorial-AddedAudioClips.png\"></p>\n<h2 id=\"adding-events-and-playing-audio\">Adding events and playing  audio <a class=\"heading-anchor-permalink\" href=\"#adding-events-and-playing-audio\">#</a></h2>\n<p>Go ahead and close the timeline. Our Play node now has audio to play, but nothing is triggering the Play node to play. Let’s make an event to do that!</p>\n<p>On the Graph Inputs node, click the “+” in the Events list. A new event will appear in the list. Every event has a name, let’s set ours to “Begin Play”. Then, connect the output port of the event to the Play input port in the Play node. Your graph should look like this:</p>\n<p><img src=\"../IMG/Tutorial-BeginPlayEvent.png\" alt=\"Tutorial-BeginPlayEvent.png\"></p>\n<p>On the Begin Play event is a button labeled “Trigger”. This button is used to manually trigger the event. Currently if we trigger the event, the Play node is activated, but no audio will play. This is because we need to tell the Play node how to play the audio - to do this, we’ll use an <a href=\"Docs/Nodes/Playback/Audio-Out\">Audio Out</a> node.</p>\n<h2 id=\"adding-the-audio-out\">Adding the Audio Out <a class=\"heading-anchor-permalink\" href=\"#adding-the-audio-out\">#</a></h2>\n<p>To add an Audio out node, right click anywhere in the Sound Graph Editor window and select Playback -&gt; Audio Out. Audio Out nodes define how audio is played, including location, volume, panning, spatialization, etc. For more information, see the <a href=\"Docs/Nodes/Playback/Audio-Out\">Audio Out documentation page</a>.</p>\n<p>For our purposes, the default settings on the Audio Out node will be fine. We just need to send the audio from the Play node to the Audio Out by connecting the Audio Out output port of the Play Node to the Audio In input port of the Audio Out node. Your Sound Graph should now look like this:</p>\n<p><img src=\"../IMG/Tutorial-ConnectingAudioOut.png\" alt=\"Tutorial-ConnectingAudioOut.png\"></p>\n<p>Now, press the Trigger button on the event in the Graph Inputs node. A small window should pop up - click the Trigger button in that window. Your Play node should start playing your audio!</p>\n<p>Right now, all of our audio plays once, and then playback ends. Let’s fix that!</p>\n",
      "id": 4
    },
    {
      "path": "Getting-Started/6-Adding-Logic.md",
      "url": "Getting-Started/6-Adding-Logic.html",
      "content": "\r\n\r\n# Adding Logic\r\n\r\nCurrently, all of our audio plays simultaneously, and they only play once. Let's make things more interesting! First, let's make our audio loop.\r\n\r\n## Looping audio\r\nThere are several ways to loop audio in Layers, but the easiest is to connect the Play Finished output port of the Play node to the Play input of the Play node. Recall that we set the End of Playback marker to the end of our Audio Clips in the timeline. This means that the Play Finished output will be triggered when the Audio Clips finish playing, and since the Play Finished output is connected to the Play input, the Play node will begin playback again.\r\n\r\nSo let's do that! Drag a line from the Play Finished output to the Play input. As you're dragging, you can middle-click to drop pins that reroute the line. When you're done, the Sound Graph should look like this:\r\n\r\n![Tutorial-LoopingThePlayNode](../IMG/Tutorial-LoopingThePlayNode.png)\r\n\r\nNow when you manually Trigger the Begin Play Event, the Play node will keep looping. To stop execution, press the Stop Playback button in the top right of the Sound Graph editor.\r\n\r\n## Layering audio\r\nNow that the audio is looping, let's work on layering audio. To do this, we are going to create an intensity variable, and then use Nodes to control the volume of each track in the Play Node.\r\n\r\nTo keep from cluttering up Sound Graphs, the volume control of a Play node's track is not initially accessible to other nodes. The track must be exposed. Open the Play node's timeline. To the right of each track's name is an icon - an eye with a line crossing it out. Click on the icon for each track. The icons will no longer be crossed, indicating that the track is exposed. \r\n\r\n![The expose track button](../IMG/ExposeTrackButton.png)\r\n\r\nClose the timeline, and take a look at the Play node. Each track exposed track is now listed in the Play node with several new outputs and inputs, including track volume.\r\n\r\n![Tutorial-ExposingTracks.png](../IMG/Tutorial-ExposingTracks.png)\r\n\r\nNow that the Volume inputs for each track are exposed, let's create the variable that will control them.\r\n\r\nClick the \"+\" icon on the Variables List in Graph Inputs to create a new variable. Every variable has a name, and next to that name is the variable's type. Set the name to \"Intensity\", and the type to Number (Float).\r\n\r\n![Tutorial-AddingIntensityVariable.png](../IMG/Tutorial-AddingIntensityVariable.png)\r\n\r\nNow that the Intensity variable is set up, let's do something with it.\r\n\r\n## Controlling the track volume with nodes\r\nOur goal is to always keep the Low Intensity track playing, to layer in the Medium Intensity track when the Intensity variable is equal to 2, and layer in the High Intensity track when the Intensity variable is equal to 3. The easiest way to accomplish this effect is with the Inverse Lerp node.\r\n\r\nThe [Inverse Lerp](../Nodes/Math-Operations/Inverse-Lerp.md) node takes in 3 numeric inputs, a Value, a From, and a To. It takes a Value, a number between From and To, and creates an output from 0 to 1. Let's walk through setting up two Inverse Lerp nodes in the Sound Graph, and then discuss how it works in detail.\r\n\r\nTo add an Inverse Lerp node, right click anywhere in the Sound Graph editor window and select Math Operations -> Inverse Lerp. Go ahead and add two to your Sound Graph.\r\n\r\nFor the first Inverse Lerp node, connect the output from the Intensity Variable in the Graph Inputs node to the Value input. Then type 1 into the From input, and 2 for the To input. Then connect the Result output on the Inverse Lerp Node to the Volume input on the Medium Intensity Track in the Play Node.\r\n\r\nFor the second Inverse Lerp node, connect the output from the Intensity Variable in the Graph Inputs node to the Value input. Then type 2 into the From input, and 3 for the To input. Then connect the Result output on the Inverse Lerp Node to the Volume input on the High Intensity Track in the Play Node. The Sound Graph should now look like this:\r\n\r\n![Tutorial-SettingUpInverseLerp.png](../IMG/Tutorial-SettingUpInverseLerp.png)\r\n\r\nPress the Trigger button on the Event in the Graph Input Node, and then play with the value of the Intensity variable. See how the Medium Intensity and High Intensity tracks fade in, depending on its value? Press the Stop Playback button in the top right of the Sound Graph editor window when you are done.\r\n\r\nSo what's going on here? The Low Intensity track is easy - we're not feeding in a volume from a node, so it's always at its max volume, 1. Examine the Inverse Lerp node for the Medium Intensity track. When the Intensity is equal to the From Value (1), the output volume is 0. When the Intensity is equal to the To value (2), the output volume is 1. The output is clamped to always be between 0 and 1, so an Intensity greater than 2 will still produce a volume of 1, and an intensity less than 1 will still produce a volume of 0. In other words, as we increase the Intensity from 1 to 2, the volume of the Medium Intensity Track approaches 1, and when the Intensity increases beyond 2, the volume remains at 1. The same goes for the Inverse Lerp node for the High Intensity track, just over a different intensity range.\r\n\r\nNow we have a Sound Graph that defines a music system capable of dynamically layering music based on an intensity level. Let's next discuss how to play that Sound Graph in a Scene.\r\n\r\n",
      "html": "<h1 id=\"adding-logic\">Adding Logic <a class=\"heading-anchor-permalink\" href=\"#adding-logic\">#</a></h1>\n<p>Currently, all of our audio plays simultaneously, and they only play once. Let’s make things more interesting! First, let’s make our audio loop.</p>\n<h2 id=\"looping-audio\">Looping audio <a class=\"heading-anchor-permalink\" href=\"#looping-audio\">#</a></h2>\n<p>There are several ways to loop audio in Layers, but the easiest is to connect the Play Finished output port of the Play node to the Play input of the Play node. Recall that we set the End of Playback marker to the end of our Audio Clips in the timeline. This means that the Play Finished output will be triggered when the Audio Clips finish playing, and since the Play Finished output is connected to the Play input, the Play node will begin playback again.</p>\n<p>So let’s do that! Drag a line from the Play Finished output to the Play input. As you’re dragging, you can middle-click to drop pins that reroute the line. When you’re done, the Sound Graph should look like this:</p>\n<p><img src=\"../IMG/Tutorial-LoopingThePlayNode.png\" alt=\"Tutorial-LoopingThePlayNode\"></p>\n<p>Now when you manually Trigger the Begin Play Event, the Play node will keep looping. To stop execution, press the Stop Playback button in the top right of the Sound Graph editor.</p>\n<h2 id=\"layering-audio\">Layering audio <a class=\"heading-anchor-permalink\" href=\"#layering-audio\">#</a></h2>\n<p>Now that the audio is looping, let’s work on layering audio. To do this, we are going to create an intensity variable, and then use Nodes to control the volume of each track in the Play Node.</p>\n<p>To keep from cluttering up Sound Graphs, the volume control of a Play node’s track is not initially accessible to other nodes. The track must be exposed. Open the Play node’s timeline. To the right of each track’s name is an icon - an eye with a line crossing it out. Click on the icon for each track. The icons will no longer be crossed, indicating that the track is exposed.</p>\n<p><img src=\"../IMG/ExposeTrackButton.png\" alt=\"The expose track button\"></p>\n<p>Close the timeline, and take a look at the Play node. Each track exposed track is now listed in the Play node with several new outputs and inputs, including track volume.</p>\n<p><img src=\"../IMG/Tutorial-ExposingTracks.png\" alt=\"Tutorial-ExposingTracks.png\"></p>\n<p>Now that the Volume inputs for each track are exposed, let’s create the variable that will control them.</p>\n<p>Click the “+” icon on the Variables List in Graph Inputs to create a new variable. Every variable has a name, and next to that name is the variable’s type. Set the name to “Intensity”, and the type to Number (Float).</p>\n<p><img src=\"../IMG/Tutorial-AddingIntensityVariable.png\" alt=\"Tutorial-AddingIntensityVariable.png\"></p>\n<p>Now that the Intensity variable is set up, let’s do something with it.</p>\n<h2 id=\"controlling-the-track-volume-with-nodes\">Controlling the track volume with nodes <a class=\"heading-anchor-permalink\" href=\"#controlling-the-track-volume-with-nodes\">#</a></h2>\n<p>Our goal is to always keep the Low Intensity track playing, to layer in the Medium Intensity track when the Intensity variable is equal to 2, and layer in the High Intensity track when the Intensity variable is equal to 3. The easiest way to accomplish this effect is with the Inverse Lerp node.</p>\n<p>The <a href=\"../Nodes/Math-Operations/Inverse-Lerp.html\">Inverse Lerp</a> node takes in 3 numeric inputs, a Value, a From, and a To. It takes a Value, a number between From and To, and creates an output from 0 to 1. Let’s walk through setting up two Inverse Lerp nodes in the Sound Graph, and then discuss how it works in detail.</p>\n<p>To add an Inverse Lerp node, right click anywhere in the Sound Graph editor window and select Math Operations -&gt; Inverse Lerp. Go ahead and add two to your Sound Graph.</p>\n<p>For the first Inverse Lerp node, connect the output from the Intensity Variable in the Graph Inputs node to the Value input. Then type 1 into the From input, and 2 for the To input. Then connect the Result output on the Inverse Lerp Node to the Volume input on the Medium Intensity Track in the Play Node.</p>\n<p>For the second Inverse Lerp node, connect the output from the Intensity Variable in the Graph Inputs node to the Value input. Then type 2 into the From input, and 3 for the To input. Then connect the Result output on the Inverse Lerp Node to the Volume input on the High Intensity Track in the Play Node. The Sound Graph should now look like this:</p>\n<p><img src=\"../IMG/Tutorial-SettingUpInverseLerp.png\" alt=\"Tutorial-SettingUpInverseLerp.png\"></p>\n<p>Press the Trigger button on the Event in the Graph Input Node, and then play with the value of the Intensity variable. See how the Medium Intensity and High Intensity tracks fade in, depending on its value? Press the Stop Playback button in the top right of the Sound Graph editor window when you are done.</p>\n<p>So what’s going on here? The Low Intensity track is easy - we’re not feeding in a volume from a node, so it’s always at its max volume, 1. Examine the Inverse Lerp node for the Medium Intensity track. When the Intensity is equal to the From Value (1), the output volume is 0. When the Intensity is equal to the To value (2), the output volume is 1. The output is clamped to always be between 0 and 1, so an Intensity greater than 2 will still produce a volume of 1, and an intensity less than 1 will still produce a volume of 0. In other words, as we increase the Intensity from 1 to 2, the volume of the Medium Intensity Track approaches 1, and when the Intensity increases beyond 2, the volume remains at 1. The same goes for the Inverse Lerp node for the High Intensity track, just over a different intensity range.</p>\n<p>Now we have a Sound Graph that defines a music system capable of dynamically layering music based on an intensity level. Let’s next discuss how to play that Sound Graph in a Scene.</p>\n",
      "id": 5
    },
    {
      "path": "Getting-Started/7-Playing-in-the-Scene.md",
      "url": "Getting-Started/7-Playing-in-the-Scene.html",
      "content": "\r\n\r\n# Playing in the Scene\r\n\r\nWe've now created a Sound Graph Asset, but we still need to get that Sound Graph in a scene and playing. To play a Sound Graph in a scene, a [Sound Graph Player](../Layers-Key-Concepts/7-Sound-Graph-Playback.md) is used. Layers generates a unique Sound Graph Player for every Sound Graph (which is why we set a code generation directory when we installed Layers.md). This makes the Sound Graph Player easier to control from code. For more information, see the [Code Generation](../Layers-Key-Concepts/8-Code-Generation.md) and [API](../Layers-Key-Concepts/9-API.md) documentation.\r\n\r\nBy now, you've probably spotted the following message in the bottom left corner of the Sound Graph editor window:\r\n\r\n![Tutorial-RegenerateCode.png](../IMG/Tutorial-RegenerateCode.png)\r\n\r\nIt will have appeared when you created your first event on the Graph Input node. It appears whenever a change has been made to a Sound Graph that warrants code regeneration. Go ahead and click Regenerate Code to apply the changes. Note - if you have already pressed the button to get the dialog out of the way in previous steps, that's fine! Just click it if you see it now.\r\n\r\nNow that code is generated, we can add a player in the scene.\r\n\r\n## Adding a Sound Graph Player\r\n\r\nAdd an empty Game Object to your scene, and give it a name (whatever you like; this tutorial will call it Music Player). Select that object, and then click the Add Component menu. Select Layers->Soundgraphs->The name of your graph, or search for the name of your Sound Graph. Add that component to your Game Object.\r\n\r\n![Tutorial-TheSoundGraphComponent.png](../IMG/Tutorial-TheSoundGraphComponent.png)\r\n\r\nThere are several options on the player we are interested in the first is the Play On Awake setting. When true, the Player will trigger the events specified in the Starting Events list when it loads. Currently, that list is empty. Press the \"+\" icon on the list to add an event from the Sound Graph to the list.\r\n\r\nHere, we've run into a problem - the list item says \"No events are currently exposed\", yet we definitely created an event in our Sound Graph. This is because events can either be internal to a Sound Graph, or exposed so external systems can trigger them. This is a handy way of preventing others from triggering the internal workings of your Sound Graph and causing it to malfunction. We need to go back into our Sound Graph and edit the Begin Play event so it is exposed. Click on the edit button in the Sound Graph Player - this will open the Sound Graph that created the player.\r\n\r\nTake another look at the Begin Play event in the Graph Input node. There is checkbox called \"Expose\", go ahead and set it to true.\r\n\r\nWhile we're back in the Sound Graph editor, lets take a look at the Intensity variable we created. We're going to want to access the variable from the player as well, and it turns out we have the same problem here as with events - they need to be exposed to be accessed outside of the Sound Graph. Set the variable from \"Do Not Expose\" to \"As Input\". For more on what that means, see the [Variables](../Layers-Key-Concepts/3-Variables.md) documentation.\r\n\r\nRegenerate your code by clicking the dialog at the bottom left of the Sound Graph editor window. Then, close the editor, and go back to the Game Object you created. In the item you created in the Starting Events List, now exists, and the selected item is the Begin Play event. Notice also, the Intensity variable is now editable in the Player.\r\n\r\n![Tutorial-PlayerWithExposure.png](../IMG/Tutorial-PlayerWithExposure.png)\r\n\r\nWe're done! Enter Play Mode in Unity - your Sound Graph Player Component will begin playing.\r\n\r\n## Next Steps\r\n\r\nTake a look at the [API](../Layers-Key-Concepts/9-API.md) documentation to see how the events and variables you create are accessible from code. Then, take a look at the [Layers Key Concepts](../Layers-Key-Concepts/0-Layers-Key-Concepts.md) page to read some deep-dives on the different systems that comprise Layers. Thanks for reading!\r\n",
      "html": "<h1 id=\"playing-in-the-scene\">Playing in the Scene <a class=\"heading-anchor-permalink\" href=\"#playing-in-the-scene\">#</a></h1>\n<p>We’ve now created a Sound Graph Asset, but we still need to get that Sound Graph in a scene and playing. To play a Sound Graph in a scene, a <a href=\"../Layers-Key-Concepts/7-Sound-Graph-Playback.html\">Sound Graph Player</a> is used. Layers generates a unique Sound Graph Player for every Sound Graph (which is why we set a code generation directory when we installed <a href=\"http://Layers.md\">Layers.md</a>). This makes the Sound Graph Player easier to control from code. For more information, see the <a href=\"../Layers-Key-Concepts/8-Code-Generation.html\">Code Generation</a> and <a href=\"../Layers-Key-Concepts/9-API.html\">API</a> documentation.</p>\n<p>By now, you’ve probably spotted the following message in the bottom left corner of the Sound Graph editor window:</p>\n<p><img src=\"../IMG/Tutorial-RegenerateCode.png\" alt=\"Tutorial-RegenerateCode.png\"></p>\n<p>It will have appeared when you created your first event on the Graph Input node. It appears whenever a change has been made to a Sound Graph that warrants code regeneration. Go ahead and click Regenerate Code to apply the changes. Note - if you have already pressed the button to get the dialog out of the way in previous steps, that’s fine! Just click it if you see it now.</p>\n<p>Now that code is generated, we can add a player in the scene.</p>\n<h2 id=\"adding-a-sound-graph-player\">Adding a Sound Graph Player <a class=\"heading-anchor-permalink\" href=\"#adding-a-sound-graph-player\">#</a></h2>\n<p>Add an empty Game Object to your scene, and give it a name (whatever you like; this tutorial will call it Music Player). Select that object, and then click the Add Component menu. Select Layers-&gt;Soundgraphs-&gt;The name of your graph, or search for the name of your Sound Graph. Add that component to your Game Object.</p>\n<p><img src=\"../IMG/Tutorial-TheSoundGraphComponent.png\" alt=\"Tutorial-TheSoundGraphComponent.png\"></p>\n<p>There are several options on the player we are interested in the first is the Play On Awake setting. When true, the Player will trigger the events specified in the Starting Events list when it loads. Currently, that list is empty. Press the “+” icon on the list to add an event from the Sound Graph to the list.</p>\n<p>Here, we’ve run into a problem - the list item says “No events are currently exposed”, yet we definitely created an event in our Sound Graph. This is because events can either be internal to a Sound Graph, or exposed so external systems can trigger them. This is a handy way of preventing others from triggering the internal workings of your Sound Graph and causing it to malfunction. We need to go back into our Sound Graph and edit the Begin Play event so it is exposed. Click on the edit button in the Sound Graph Player - this will open the Sound Graph that created the player.</p>\n<p>Take another look at the Begin Play event in the Graph Input node. There is checkbox called “Expose”, go ahead and set it to true.</p>\n<p>While we’re back in the Sound Graph editor, lets take a look at the Intensity variable we created. We’re going to want to access the variable from the player as well, and it turns out we have the same problem here as with events - they need to be exposed to be accessed outside of the Sound Graph. Set the variable from “Do Not Expose” to “As Input”. For more on what that means, see the <a href=\"../Layers-Key-Concepts/3-Variables.html\">Variables</a> documentation.</p>\n<p>Regenerate your code by clicking the dialog at the bottom left of the Sound Graph editor window. Then, close the editor, and go back to the Game Object you created. In the item you created in the Starting Events List, now exists, and the selected item is the Begin Play event. Notice also, the Intensity variable is now editable in the Player.</p>\n<p><img src=\"../IMG/Tutorial-PlayerWithExposure.png\" alt=\"Tutorial-PlayerWithExposure.png\"></p>\n<p>We’re done! Enter Play Mode in Unity - your Sound Graph Player Component will begin playing.</p>\n<h2 id=\"next-steps\">Next Steps <a class=\"heading-anchor-permalink\" href=\"#next-steps\">#</a></h2>\n<p>Take a look at the <a href=\"../Layers-Key-Concepts/9-API.html\">API</a> documentation to see how the events and variables you create are accessible from code. Then, take a look at the <a href=\"../Layers-Key-Concepts/0-Layers-Key-Concepts.html\">Layers Key Concepts</a> page to read some deep-dives on the different systems that comprise Layers. Thanks for reading!</p>\n",
      "id": 6
    },
    {
      "path": "Home.md",
      "url": "Home.html",
      "content": "# Layers Adaptive Audio System\r\nThank you for using the Layers Adaptive Audio System for Unity! Layers is an extremely flexible visual tool for sound design and adaptive music in games. We hope you enjoy it! If you're just getting started we recommend checking out this [tutorial](Getting-Started/1-Getting-Started.md) which will get you up and running. The best way to learn Layers is hands-on! Otherwise, please take a look at [Layers in Detail](Layers-Key-Concepts/0-Layers-Key-Concepts.md), which contains deep-dives on several aspects of the Layers system.\r\n\r\n## Getting help\r\nRun into an issue? Have a feature you'd love to see in Layers? [Create a new issue](https://github.com/mwahnish/Layers-Adaptive-Audio/issues) and let us know! Have a question? [Shoot us an email!](mailto:mark@abxygames.com)\r\n\r\n",
      "html": "<h1 id=\"layers-adaptive-audio-system\">Layers Adaptive Audio System <a class=\"heading-anchor-permalink\" href=\"#layers-adaptive-audio-system\">#</a></h1>\n<p>Thank you for using the Layers Adaptive Audio System for Unity! Layers is an extremely flexible visual tool for sound design and adaptive music in games. We hope you enjoy it! If you’re just getting started we recommend checking out this <a href=\"Getting-Started/1-Getting-Started.html\">tutorial</a> which will get you up and running. The best way to learn Layers is hands-on! Otherwise, please take a look at <a href=\"Layers-Key-Concepts/0-Layers-Key-Concepts.html\">Layers in Detail</a>, which contains deep-dives on several aspects of the Layers system.</p>\n<h2 id=\"getting-help\">Getting help <a class=\"heading-anchor-permalink\" href=\"#getting-help\">#</a></h2>\n<p>Run into an issue? Have a feature you’d love to see in Layers? <a href=\"https://github.com/mwahnish/Layers-Adaptive-Audio/issues\">Create a new issue</a> and let us know! Have a question? <a href=\"mailto:mark@abxygames.com\">Shoot us an email!</a></p>\n",
      "id": 7
    },
    {
      "path": "Layers-Key-Concepts/0-Layers-Key-Concepts.md",
      "url": "Layers-Key-Concepts/0-Layers-Key-Concepts.html",
      "content": "\r\n\r\n\r\n\r\n# Layers Key Concepts\r\n\r\nThis section spotlights various key concepts in the Layers system. If you haven't already, Check out the [Getting Started](../Getting-Started/1-Getting-Started.md) tutorial first, and use this section to deep dive into the various systems comprising Layers.\r\n\r\n### Contents\r\n\r\n* [Sound Graphs](../Layers-Key-Concepts/1-Sound-Graphs.md)\r\n* [Events](../Layers-Key-Concepts/2-Events.md)\r\n* [Variables](../Layers-Key-Concepts/3-Variables.md)\r\n* [Play Nodes](../Layers-Key-Concepts/4-Play-Nodes.md)\r\n* [Audio Outs](../Layers-Key-Concepts/5-Audio-Outs.md)\r\n* [Sub Graphs](../Layers-Key-Concepts/6-Sub-Graphs.md)\r\n* [Sound Graph Playback](../Layers-Key-Concepts/7-Sound-Graph-Playback.md)\r\n* [Code Generation](../Layers-Key-Concepts/8-Code-Generation.md)\r\n* [API](../Layers-Key-Concepts/9-API.md)\r\n* [MIDI Editing](../Layers-Key-Concepts/10-MIDI-Editing.md)\r\n* [Mixing](../Layers-Key-Concepts/11-Mixing.md)\r\n* [Globals](../Layers-Key-Concepts/12-Globals.md)\r\n\r\n",
      "html": "<h1 id=\"layers-key-concepts\">Layers Key Concepts <a class=\"heading-anchor-permalink\" href=\"#layers-key-concepts\">#</a></h1>\n<p>This section spotlights various key concepts in the Layers system. If you haven’t already, Check out the <a href=\"../Getting-Started/1-Getting-Started.html\">Getting Started</a> tutorial first, and use this section to deep dive into the various systems comprising Layers.</p>\n<h3 id=\"contents\">Contents <a class=\"heading-anchor-permalink\" href=\"#contents\">#</a></h3>\n<ul>\n<li><a href=\"../Layers-Key-Concepts/1-Sound-Graphs.html\">Sound Graphs</a></li>\n<li><a href=\"../Layers-Key-Concepts/2-Events.html\">Events</a></li>\n<li><a href=\"../Layers-Key-Concepts/3-Variables.html\">Variables</a></li>\n<li><a href=\"../Layers-Key-Concepts/4-Play-Nodes.html\">Play Nodes</a></li>\n<li><a href=\"../Layers-Key-Concepts/5-Audio-Outs.html\">Audio Outs</a></li>\n<li><a href=\"../Layers-Key-Concepts/6-Sub-Graphs.html\">Sub Graphs</a></li>\n<li><a href=\"../Layers-Key-Concepts/7-Sound-Graph-Playback.html\">Sound Graph Playback</a></li>\n<li><a href=\"../Layers-Key-Concepts/8-Code-Generation.html\">Code Generation</a></li>\n<li><a href=\"../Layers-Key-Concepts/9-API.html\">API</a></li>\n<li><a href=\"../Layers-Key-Concepts/10-MIDI-Editing.html\">MIDI Editing</a></li>\n<li><a href=\"../Layers-Key-Concepts/11-Mixing.html\">Mixing</a></li>\n<li><a href=\"../Layers-Key-Concepts/12-Globals.html\">Globals</a></li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "Layers-Key-Concepts/1-Sound-Graphs.md",
      "url": "Layers-Key-Concepts/1-Sound-Graphs.html",
      "content": "\r\n\r\n# Sound Graph\r\n\r\n## About\r\n\r\nSound Graphs are the heart of Layers. Sound Graphs are assets that define the logic that governs how audio is played. Sound Graphs can be thought of like a flow chart. One node of the Sound Graph triggers the next. Sometimes a node may perform an action, like playing audio, or making a computation. Other times, it may decide what branch to take. In this way, Sound Graphs enable you to create incredibly dynamic audio systems from very simple components.\r\n\r\n![SoundGraphExample.png](../IMG/SoundGraphExample.png)\r\n\r\n## Creating Sound Graphs\r\nTo create a sound graph, right click in the Project browser and select Create->Sound Graph. Then, click \"Open\" in the Sound Graph's inspector to open the graph editor window.\r\n\r\n## Working with Sound Graphs\r\nThe first node in the Sound Graph is the Graph Input node. It is the only node that is required in a Sound Graph. All graph-wide [Events](../Layers-Key-Concepts/2-Events.md) and [Variables](../Layers-Key-Concepts/3-Variables.md) are defined on the Graph Input node. The Graph Input node is the starting point for all logic on the graph.\r\n\r\nTo add nodes to the Sound Graph, right click in the Graph editor to view all available nodes. To connect nodes together, just drag from the output of one node to the input of another. Note that the output and input must match type - for example, an event can only connect to an event, and a boolean can only connect to a boolean. Input and outputs are color coded, so compatibility can be seen at a glance.\r\n\r\nTo move nodes, simply drag them by their header. Some nodes that are especially tall have a expand / contract symbol in the right side of their header. When contracted, all unused Inputs and Outputs will be hidden so as not to clutter the graph.\r\n\r\n![MinimizeMaximize.png](../IMG/MinimizeMaximize.png)\r\n\r\n## Previewing Playback\r\nSound Graph playback can be previewed both in the Editor and at runtime by manually triggering events on the Graph Input node. Playback can be stopped by clicking the Stop Playback button at the top right of the Sound Graph editor window.\r\n\r\n## Playing Sound Graphs.\r\nSound graphs are played using Sound Graph Players. See the [Sound Graph Player page](../Layers-Key-Concepts/7-Sound-Graph-Playback.md) for more information.\r\n\r\n## Runtime changes\r\nNote that [Sound Graph Players](../Layers-Key-Concepts/7-Sound-Graph-Playback.md) will make a copy of their target Sound Graph at runtime. If you plan on editing a Sound Graph asset while your game is playing, be mindful you are not editing a runtime copy, otherwise your changes will be lost when playback ends. Likewise, if you are intending to make temporary changes to a sound graph for testing purposes at runtime, make sure you are editing a runtime copy and not the original asset, otherwise your changes will be preserved when playback ends.\r\n\r\nThe Sound Graph editor window provides an indicator in the bottom right of the window at runtime so you can check if you are viewing a runtime copy or an original asset.\r\n\r\n![RuntimeVsAssetGraph.png](../IMG/RuntimeVsAssetGraph.png)\r\n",
      "html": "<h1 id=\"sound-graph\">Sound Graph <a class=\"heading-anchor-permalink\" href=\"#sound-graph\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Sound Graphs are the heart of Layers. Sound Graphs are assets that define the logic that governs how audio is played. Sound Graphs can be thought of like a flow chart. One node of the Sound Graph triggers the next. Sometimes a node may perform an action, like playing audio, or making a computation. Other times, it may decide what branch to take. In this way, Sound Graphs enable you to create incredibly dynamic audio systems from very simple components.</p>\n<p><img src=\"../IMG/SoundGraphExample.png\" alt=\"SoundGraphExample.png\"></p>\n<h2 id=\"creating-sound-graphs\">Creating Sound Graphs <a class=\"heading-anchor-permalink\" href=\"#creating-sound-graphs\">#</a></h2>\n<p>To create a sound graph, right click in the Project browser and select Create-&gt;Sound Graph. Then, click “Open” in the Sound Graph’s inspector to open the graph editor window.</p>\n<h2 id=\"working-with-sound-graphs\">Working with Sound Graphs <a class=\"heading-anchor-permalink\" href=\"#working-with-sound-graphs\">#</a></h2>\n<p>The first node in the Sound Graph is the Graph Input node. It is the only node that is required in a Sound Graph. All graph-wide <a href=\"../Layers-Key-Concepts/2-Events.html\">Events</a> and <a href=\"../Layers-Key-Concepts/3-Variables.html\">Variables</a> are defined on the Graph Input node. The Graph Input node is the starting point for all logic on the graph.</p>\n<p>To add nodes to the Sound Graph, right click in the Graph editor to view all available nodes. To connect nodes together, just drag from the output of one node to the input of another. Note that the output and input must match type - for example, an event can only connect to an event, and a boolean can only connect to a boolean. Input and outputs are color coded, so compatibility can be seen at a glance.</p>\n<p>To move nodes, simply drag them by their header. Some nodes that are especially tall have a expand / contract symbol in the right side of their header. When contracted, all unused Inputs and Outputs will be hidden so as not to clutter the graph.</p>\n<p><img src=\"../IMG/MinimizeMaximize.png\" alt=\"MinimizeMaximize.png\"></p>\n<h2 id=\"previewing-playback\">Previewing Playback <a class=\"heading-anchor-permalink\" href=\"#previewing-playback\">#</a></h2>\n<p>Sound Graph playback can be previewed both in the Editor and at runtime by manually triggering events on the Graph Input node. Playback can be stopped by clicking the Stop Playback button at the top right of the Sound Graph editor window.</p>\n<h2 id=\"playing-sound-graphs.\">Playing Sound Graphs. <a class=\"heading-anchor-permalink\" href=\"#playing-sound-graphs.\">#</a></h2>\n<p>Sound graphs are played using Sound Graph Players. See the <a href=\"../Layers-Key-Concepts/7-Sound-Graph-Playback.html\">Sound Graph Player page</a> for more information.</p>\n<h2 id=\"runtime-changes\">Runtime changes <a class=\"heading-anchor-permalink\" href=\"#runtime-changes\">#</a></h2>\n<p>Note that <a href=\"../Layers-Key-Concepts/7-Sound-Graph-Playback.html\">Sound Graph Players</a> will make a copy of their target Sound Graph at runtime. If you plan on editing a Sound Graph asset while your game is playing, be mindful you are not editing a runtime copy, otherwise your changes will be lost when playback ends. Likewise, if you are intending to make temporary changes to a sound graph for testing purposes at runtime, make sure you are editing a runtime copy and not the original asset, otherwise your changes will be preserved when playback ends.</p>\n<p>The Sound Graph editor window provides an indicator in the bottom right of the window at runtime so you can check if you are viewing a runtime copy or an original asset.</p>\n<p><img src=\"../IMG/RuntimeVsAssetGraph.png\" alt=\"RuntimeVsAssetGraph.png\"></p>\n",
      "id": 9
    },
    {
      "path": "Layers-Key-Concepts/10-MIDI-Editing.md",
      "url": "Layers-Key-Concepts/10-MIDI-Editing.html",
      "content": "\r\n\r\n# MIDI Editing\r\n\r\n## About\r\n\r\nLayers has full MIDI Import and editing support. MIDI files can be directly imported as an asset. New MIDI files can be created by right clicking in the Project browser and selecting Create->MIDI Asset.\r\n\r\n## Editing MIDI Assets\r\nTo begin MIDI editing, select the MIDI asset you wish to edit. If the MIDI asset was created externally, set the Editable property to true in the Inspector, then click Apply. Then, press the Open button to open the MIDI asset in the Layers MIDI Editor.\r\n\r\n\r\n## The MIDI Editor\r\nThe MIDI Editor is where MIDI assets can be edited and saved. Here are the components of the MIDI Editor\r\n\r\n![MIDIEditorExample.png](../IMG/MIDIEditorExample.png)\r\n\r\n### The Piano Roll\r\nIn the middle of the MIDI Editor is the Piano Roll. This functions similarly to a piano roll in a Digital Audio Workstation. Notes can be dragged around the note area and resized by dragging on the note edges. To add a new note, click and drag in an empty area in the Piano Roll\r\n\r\nOn the left hand side of the Piano Roll are series of keys, meant to make identifying notes easier. Natural notes are labeled, and clicking on each key will sound out the note.\r\n\r\n### The End of Playback Marker\r\nIn addition to Notes, the Piano Roll also contains the end of playback marker. This marker is a vertical line representing the end of playback for the file. Any notes past this point will be ignored when played back in nodes, such as the [Play](../Nodes/Playback/Play.md) node.\r\n\r\n### Time Signature and BPM Area\r\nAt the top of the window is the BPM and Time signature bar. Time signatures and BPMs control the rate of playback for the MIDI asset, and can be used in conjunction with snapping to align timeline elements. The left side of the bar contains the starting BPM and the starting time signature for the timeline. BPM and time signature change markesrs can be used to change the BPM or time signature mid-track. To add a new marker right click on the bar (at the top for BPM, at the bottom for time signatures) and add the marker.\r\n\r\n### Velocities\r\nAt the bottom of the Piano Roll is the Velocities area. When a note is selected in the Piano Roll, its velocity shows in the velocity area. Simply drag the velocity to change the value.\r\n\r\n### Snapping\r\nAt the bottom right of the MIDI Editor are the snapping controls. Snapping can be performed using a variety of time divisions, all based on the BPM and Time signatures set in the time signature and BPM area. Timeline elements can also snap to the start and end of other timeline elements. To activate snapping, hold CTRL while dragging.\r\n\r\n### Playback controls\r\nThe bottom left of the timeline window contains the timeline's playback controls. Playback can be previewed both in edit mode and play mode.\r\n\r\nNext to the play back controls are the global settings for Audio Preview in the MIDI Window. Any Sound Graph can be used to preview MIDI in a MIDI Window. The only requirement is that the Sound Graph have one named Sound Graph Event that triggers the playback of a note. When the MIDI Window triggers that event to play a note, that MIDI notes information will be included with that event. See [Graph Inputs](../Nodes/Signal-Sources/Graph-Inputs.md) for more information.\r\n\r\n### Other controls\r\n* Hold shift and click to select multiple items\r\n* Hold ctrl and drag to enable snapping\r\n* The delete key deletes items\r\n* Hold ctrl and scroll to zoom\r\n",
      "html": "<h1 id=\"midi-editing\">MIDI Editing <a class=\"heading-anchor-permalink\" href=\"#midi-editing\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Layers has full MIDI Import and editing support. MIDI files can be directly imported as an asset. New MIDI files can be created by right clicking in the Project browser and selecting Create-&gt;MIDI Asset.</p>\n<h2 id=\"editing-midi-assets\">Editing MIDI Assets <a class=\"heading-anchor-permalink\" href=\"#editing-midi-assets\">#</a></h2>\n<p>To begin MIDI editing, select the MIDI asset you wish to edit. If the MIDI asset was created externally, set the Editable property to true in the Inspector, then click Apply. Then, press the Open button to open the MIDI asset in the Layers MIDI Editor.</p>\n<h2 id=\"the-midi-editor\">The MIDI Editor <a class=\"heading-anchor-permalink\" href=\"#the-midi-editor\">#</a></h2>\n<p>The MIDI Editor is where MIDI assets can be edited and saved. Here are the components of the MIDI Editor</p>\n<p><img src=\"../IMG/MIDIEditorExample.png\" alt=\"MIDIEditorExample.png\"></p>\n<h3 id=\"the-piano-roll\">The Piano Roll <a class=\"heading-anchor-permalink\" href=\"#the-piano-roll\">#</a></h3>\n<p>In the middle of the MIDI Editor is the Piano Roll. This functions similarly to a piano roll in a Digital Audio Workstation. Notes can be dragged around the note area and resized by dragging on the note edges. To add a new note, click and drag in an empty area in the Piano Roll</p>\n<p>On the left hand side of the Piano Roll are series of keys, meant to make identifying notes easier. Natural notes are labeled, and clicking on each key will sound out the note.</p>\n<h3 id=\"the-end-of-playback-marker\">The End of Playback Marker <a class=\"heading-anchor-permalink\" href=\"#the-end-of-playback-marker\">#</a></h3>\n<p>In addition to Notes, the Piano Roll also contains the end of playback marker. This marker is a vertical line representing the end of playback for the file. Any notes past this point will be ignored when played back in nodes, such as the <a href=\"../Nodes/Playback/Play.html\">Play</a> node.</p>\n<h3 id=\"time-signature-and-bpm-area\">Time Signature and BPM Area <a class=\"heading-anchor-permalink\" href=\"#time-signature-and-bpm-area\">#</a></h3>\n<p>At the top of the window is the BPM and Time signature bar. Time signatures and BPMs control the rate of playback for the MIDI asset, and can be used in conjunction with snapping to align timeline elements. The left side of the bar contains the starting BPM and the starting time signature for the timeline. BPM and time signature change markesrs can be used to change the BPM or time signature mid-track. To add a new marker right click on the bar (at the top for BPM, at the bottom for time signatures) and add the marker.</p>\n<h3 id=\"velocities\">Velocities <a class=\"heading-anchor-permalink\" href=\"#velocities\">#</a></h3>\n<p>At the bottom of the Piano Roll is the Velocities area. When a note is selected in the Piano Roll, its velocity shows in the velocity area. Simply drag the velocity to change the value.</p>\n<h3 id=\"snapping\">Snapping <a class=\"heading-anchor-permalink\" href=\"#snapping\">#</a></h3>\n<p>At the bottom right of the MIDI Editor are the snapping controls. Snapping can be performed using a variety of time divisions, all based on the BPM and Time signatures set in the time signature and BPM area. Timeline elements can also snap to the start and end of other timeline elements. To activate snapping, hold CTRL while dragging.</p>\n<h3 id=\"playback-controls\">Playback controls <a class=\"heading-anchor-permalink\" href=\"#playback-controls\">#</a></h3>\n<p>The bottom left of the timeline window contains the timeline’s playback controls. Playback can be previewed both in edit mode and play mode.</p>\n<p>Next to the play back controls are the global settings for Audio Preview in the MIDI Window. Any Sound Graph can be used to preview MIDI in a MIDI Window. The only requirement is that the Sound Graph have one named Sound Graph Event that triggers the playback of a note. When the MIDI Window triggers that event to play a note, that MIDI notes information will be included with that event. See <a href=\"../Nodes/Signal-Sources/Graph-Inputs.html\">Graph Inputs</a> for more information.</p>\n<h3 id=\"other-controls\">Other controls <a class=\"heading-anchor-permalink\" href=\"#other-controls\">#</a></h3>\n<ul>\n<li>Hold shift and click to select multiple items</li>\n<li>Hold ctrl and drag to enable snapping</li>\n<li>The delete key deletes items</li>\n<li>Hold ctrl and scroll to zoom</li>\n</ul>\n",
      "id": 10
    },
    {
      "path": "Layers-Key-Concepts/11-Mixing.md",
      "url": "Layers-Key-Concepts/11-Mixing.html",
      "content": "\r\n\r\n# Mixing\r\n\r\n## About\r\n\r\nLayers relies on and integrates with Unity's built in [audio mixing system](https://docs.unity3d.com/Manual/AudioMixer.html). No need to learn something new! Audio can be sent to the Unity Audio Mixer using [Audio Out](../Layers-Key-Concepts/5-Audio-Outs.md) nodes, and the Audio Mixer can be interacted with using the [Find Snapshot](../Nodes/Automation/Find-Snapshot.md), [Get Mixer Parameter](../Nodes/Automation/Get-Mixer-Parameter.md), [Set Mixer Parameter](../Nodes/Automation/Set-Mixer-Parameter.md), and [Transition to Snapshots](../Nodes/Automation/Transition-To-Snapshots.md) nodes.\r\n",
      "html": "<h1 id=\"mixing\">Mixing <a class=\"heading-anchor-permalink\" href=\"#mixing\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Layers relies on and integrates with Unity’s built in <a href=\"https://docs.unity3d.com/Manual/AudioMixer.html\">audio mixing system</a>. No need to learn something new! Audio can be sent to the Unity Audio Mixer using <a href=\"../Layers-Key-Concepts/5-Audio-Outs.html\">Audio Out</a> nodes, and the Audio Mixer can be interacted with using the <a href=\"../Nodes/Automation/Find-Snapshot.html\">Find Snapshot</a>, <a href=\"../Nodes/Automation/Get-Mixer-Parameter.html\">Get Mixer Parameter</a>, <a href=\"../Nodes/Automation/Set-Mixer-Parameter.html\">Set Mixer Parameter</a>, and <a href=\"../Nodes/Automation/Transition-To-Snapshots.html\">Transition to Snapshots</a> nodes.</p>\n",
      "id": 11
    },
    {
      "path": "Layers-Key-Concepts/12-Globals.md",
      "url": "Layers-Key-Concepts/12-Globals.html",
      "content": "\r\n\r\n# Globals\r\n\r\n![Sound-Graph-Globals](../IMG/Sound-Graph-Globals.png)\r\n\r\n## About\r\n\r\nGlobals objects are project assets containing variables and events that can be shared across Sound Graphs\r\n\r\n## Using Globals Assets\r\n\r\nTo create a Globals asset, right-click in the project window and select Create->Sound Graph Globals. Globals must exist within a Resources folder.\r\n\r\nTo use a Globals Asset in a Sound Graph, open the Sound Graph and drag the Globals asset into the Globals field in the Graph Input node.\r\n\r\n## Code Generation\r\n\r\nLike Sound Graphs, Globals assets use code generation to make their values accessible in scripts. When code regeneration is required, a button will appear in the Globals Asset Inspector. Click it to generate the code.\r\n\r\n![Sound-Graph-Globals-Regenerate](../IMG/Sound-Graph-Globals-Regenerate.png)\r\n\r\nOnce code has been generated, the properties on the Globals object are accessible via a static class with the same name as the Globals Asset.",
      "html": "<h1 id=\"globals\">Globals <a class=\"heading-anchor-permalink\" href=\"#globals\">#</a></h1>\n<p><img src=\"../IMG/Sound-Graph-Globals.png\" alt=\"Sound-Graph-Globals\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Globals objects are project assets containing variables and events that can be shared across Sound Graphs</p>\n<h2 id=\"using-globals-assets\">Using Globals Assets <a class=\"heading-anchor-permalink\" href=\"#using-globals-assets\">#</a></h2>\n<p>To create a Globals asset, right-click in the project window and select Create-&gt;Sound Graph Globals. Globals must exist within a Resources folder.</p>\n<p>To use a Globals Asset in a Sound Graph, open the Sound Graph and drag the Globals asset into the Globals field in the Graph Input node.</p>\n<h2 id=\"code-generation\">Code Generation <a class=\"heading-anchor-permalink\" href=\"#code-generation\">#</a></h2>\n<p>Like Sound Graphs, Globals assets use code generation to make their values accessible in scripts. When code regeneration is required, a button will appear in the Globals Asset Inspector. Click it to generate the code.</p>\n<p><img src=\"../IMG/Sound-Graph-Globals-Regenerate.png\" alt=\"Sound-Graph-Globals-Regenerate\"></p>\n<p>Once code has been generated, the properties on the Globals object are accessible via a static class with the same name as the Globals Asset.</p>\n",
      "id": 12
    },
    {
      "path": "Layers-Key-Concepts/2-Events.md",
      "url": "Layers-Key-Concepts/2-Events.html",
      "content": "\r\n\r\n# Events\r\n\r\n## About\r\n\r\nEvents are how nodes are sequenced in a Sound Graph. Events can carry MIDI data and arbitrary parameters. There are two types of events, named Sound Graph events and anonymous events. Sound Graph events are defined in the [Graph Input](../Nodes/Signal-Sources/Graph-Inputs.md) node, and can be triggered within the sound graph using the [Trigger](../Nodes/Signal-Sources/Trigger-Event.md) node, and externally when the event is exposed. Anonymous events are produced by nodes.\r\n\r\n![Named VS Anonymous Events](../IMG/NamedVSAnonymousEvents.png)\r\n\r\nMost nodes produce anonymous events. See the documentation to learn when and why these events are produced, as well as the data that accompanies them. Events may be split into their component parts using a [Split](../Nodes/Variables/Split.md) node. MIDI data and parameters can be added to an event using the [Combine](../Nodes/Variables/Combine.md) node.\r\n",
      "html": "<h1 id=\"events\">Events <a class=\"heading-anchor-permalink\" href=\"#events\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Events are how nodes are sequenced in a Sound Graph. Events can carry MIDI data and arbitrary parameters. There are two types of events, named Sound Graph events and anonymous events. Sound Graph events are defined in the <a href=\"../Nodes/Signal-Sources/Graph-Inputs.html\">Graph Input</a> node, and can be triggered within the sound graph using the <a href=\"../Nodes/Signal-Sources/Trigger-Event.html\">Trigger</a> node, and externally when the event is exposed. Anonymous events are produced by nodes.</p>\n<p><img src=\"../IMG/NamedVSAnonymousEvents.png\" alt=\"Named VS Anonymous Events\"></p>\n<p>Most nodes produce anonymous events. See the documentation to learn when and why these events are produced, as well as the data that accompanies them. Events may be split into their component parts using a <a href=\"../Nodes/Variables/Split.html\">Split</a> node. MIDI data and parameters can be added to an event using the <a href=\"../Nodes/Variables/Combine.html\">Combine</a> node.</p>\n",
      "id": 13
    },
    {
      "path": "Layers-Key-Concepts/3-Variables.md",
      "url": "Layers-Key-Concepts/3-Variables.html",
      "content": "\r\n\r\n# Variables\r\n\r\n## About\r\n\r\nVariables are how data is passed around a Sound Graph. There are two types of events, named Sound Graph variables, and anonymous variables. Sound Graph variables are defined in the [Graph Input](../Nodes/Signal-Sources/Graph-Inputs.md) node, can be written to using a [Write](../Nodes/Variables/Write.md) node, read using a [Variable](../Nodes/Variables/Variable.md) node, and used externally.\r\n\r\nVariables can be Input , Output, or Unexposed. Input variables can be written to or read externally to the Sound Graph, and can be read within the Sound Graph. Output variables can be read externally to the Sound Graph, and read or written within the Sound Graph. Unexposed variables cannot be read outside of the Sound Graph, but can be read and written inside the Sound Graph\r\n\r\n![Named VS Anonymous Variables](../IMG/NamedVSAnonymousVariables.png)\r\n\r\nMany nodes use and produce anonymous variables as inputs and outputs. Of particular note is the [Variable](../Nodes/Variables/Variable.md) node, which can both read named Sound Graph variables, or output a constant anonymous variable.\r\n",
      "html": "<h1 id=\"variables\">Variables <a class=\"heading-anchor-permalink\" href=\"#variables\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Variables are how data is passed around a Sound Graph. There are two types of events, named Sound Graph variables, and anonymous variables. Sound Graph variables are defined in the <a href=\"../Nodes/Signal-Sources/Graph-Inputs.html\">Graph Input</a> node, can be written to using a <a href=\"../Nodes/Variables/Write.html\">Write</a> node, read using a <a href=\"../Nodes/Variables/Variable.html\">Variable</a> node, and used externally.</p>\n<p>Variables can be Input , Output, or Unexposed. Input variables can be written to or read externally to the Sound Graph, and can be read within the Sound Graph. Output variables can be read externally to the Sound Graph, and read or written within the Sound Graph. Unexposed variables cannot be read outside of the Sound Graph, but can be read and written inside the Sound Graph</p>\n<p><img src=\"../IMG/NamedVSAnonymousVariables.png\" alt=\"Named VS Anonymous Variables\"></p>\n<p>Many nodes use and produce anonymous variables as inputs and outputs. Of particular note is the <a href=\"../Nodes/Variables/Variable.html\">Variable</a> node, which can both read named Sound Graph variables, or output a constant anonymous variable.</p>\n",
      "id": 14
    },
    {
      "path": "Layers-Key-Concepts/4-Play-Nodes.md",
      "url": "Layers-Key-Concepts/4-Play-Nodes.html",
      "content": "\r\n\r\n# Play Nodes\r\n\r\n## About\r\n\r\n![Play Nodes Example](../IMG/PlayNodesExample.png)\r\n\r\nThe Play node is the main system for playing back audio in a Sound Graph. The Play node supports full multi-track audio editing and playback, MIDI and event sequencing, and looping. Audio and MIDI can be predefined at build, or can be dynamically swapped out at runtime using Sound Graph Logic. See the [Play Node](../Nodes/Playback/Play.md) documentation for usage information.\r\n",
      "html": "<h1 id=\"play-nodes\">Play Nodes <a class=\"heading-anchor-permalink\" href=\"#play-nodes\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p><img src=\"../IMG/PlayNodesExample.png\" alt=\"Play Nodes Example\"></p>\n<p>The Play node is the main system for playing back audio in a Sound Graph. The Play node supports full multi-track audio editing and playback, MIDI and event sequencing, and looping. Audio and MIDI can be predefined at build, or can be dynamically swapped out at runtime using Sound Graph Logic. See the <a href=\"../Nodes/Playback/Play.html\">Play Node</a> documentation for usage information.</p>\n",
      "id": 15
    },
    {
      "path": "Layers-Key-Concepts/5-Audio-Outs.md",
      "url": "Layers-Key-Concepts/5-Audio-Outs.html",
      "content": "\r\n\r\n# Audio Outs\r\n\r\n## About\r\n\r\n![Audio Out Node Example](../IMG/AudioOutNodeExample.png)\r\n\r\nThe Audio Out node is an output node through which all graph audio is played. It defines the settings with which the audio is played, as well as where the audio is played. See the [Audio Out](../Nodes/Playback/Audio-Out.md) node page for more information, and see the [Play](../Nodes/Playback/Play.md) and [Sampler Track](../Nodes/Playback/Sampler-Track.md) nodes for examples of nodes that output to Audio Outs.\r\n",
      "html": "<h1 id=\"audio-outs\">Audio Outs <a class=\"heading-anchor-permalink\" href=\"#audio-outs\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p><img src=\"../IMG/AudioOutNodeExample.png\" alt=\"Audio Out Node Example\"></p>\n<p>The Audio Out node is an output node through which all graph audio is played. It defines the settings with which the audio is played, as well as where the audio is played. See the <a href=\"../Nodes/Playback/Audio-Out.html\">Audio Out</a> node page for more information, and see the <a href=\"../Nodes/Playback/Play.html\">Play</a> and <a href=\"../Nodes/Playback/Sampler-Track.html\">Sampler Track</a> nodes for examples of nodes that output to Audio Outs.</p>\n",
      "id": 16
    },
    {
      "path": "Layers-Key-Concepts/6-Sub-Graphs.md",
      "url": "Layers-Key-Concepts/6-Sub-Graphs.html",
      "content": "\r\n\r\n# Sub Graphs\r\n\r\n## About\r\n\r\n![Sub Graph Example](../IMG/SubGraphExample.png)\r\n\r\nSubgraphs are Sound Graphs that are nested within other Sound Graphs. Sound Graphs are useful for reusing functions and processes across Sound Graphs and keeping individual graphs from getting too complex. Any Sound Graph can be used as a subgraph using the SubGraph node. See the [documentation for the SubGraph node](../Nodes/Playback/Sub-Graph.md) for more usage details.\r\n",
      "html": "<h1 id=\"sub-graphs\">Sub Graphs <a class=\"heading-anchor-permalink\" href=\"#sub-graphs\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p><img src=\"../IMG/SubGraphExample.png\" alt=\"Sub Graph Example\"></p>\n<p>Subgraphs are Sound Graphs that are nested within other Sound Graphs. Sound Graphs are useful for reusing functions and processes across Sound Graphs and keeping individual graphs from getting too complex. Any Sound Graph can be used as a subgraph using the SubGraph node. See the <a href=\"../Nodes/Playback/Sub-Graph.html\">documentation for the SubGraph node</a> for more usage details.</p>\n",
      "id": 17
    },
    {
      "path": "Layers-Key-Concepts/7-Sound-Graph-Playback.md",
      "url": "Layers-Key-Concepts/7-Sound-Graph-Playback.html",
      "content": "\r\n\r\n# Sound Graph Playback\r\n\r\n## About\r\n\r\nPlayer components are how Sound Graphs are played in a scene. There are two different kinds of player components, a Sound Graph Player component, and a Pooled Sound Graph Player Component. Both take an input Sound Graph and use it to play back audio in a scene. The Sound Graph defines the logic behind how audio plays, and the Player component provides interfaces in code and the editor for triggering events and accessing variables.\r\n\r\n## Sound Graph Players and Pooled Sound Graph Players\r\n\r\nEach player component is most useful in certain situations, and have different options exposed in the editor.\r\n\r\n### Sound Graph Player Components\r\n#### When to Use Sound Graph Player Components\r\nSound Graph Players each make an individual copy of its source Sound Graph asset. This makes them slightly less complex to use than Pooled Sound Graph Players, but since each player has its own copy of the Sound Graph, making many instances of a Sound Graph Player can be memory-inefficient. Sound Graph Player components are best when only a few instances of that player are needed - for example, playing menu music.\r\n\r\n#### Editor Options\r\n\r\n![SoundGraphPlayerOverview.png](../IMG/SoundGraphPlayerOverview.png)\r\n\r\n1. The Edit Button - Click this button to open up the source Sound Graph Asset for editing\r\n2. Don't Destroy on Load - When checked, this player won't get destroyed when a new scene is loaded\r\n3. Play On Awake - When checked, the events in the Starting Events list will be triggered immediately when the player is enabled\r\n4. Starting Events - These are the events that are called by Play On Awake. Note that this list only appears when Play On Awake is checked. Only events that are exposed in the sound graph may be called here.\r\n5. Variables - All variables that are exposed as Inputs in the sound graph are listed here. The starting values of the variables may be overwritten from the default values set in the Sound Graph.\r\n6. Events - All events that are exposed in the Sound Graph are displayed here. Functions on other scripts can be added here as a Unity Event, and will be called when the given event is called in the Sound Graph. Each function should take in three values - A Double representing the time the event is called, a Dictionary<string,Object> representing the values of the event's parameters (the string is the event name, and the Object is the value), and MidiFlowInfo, which contains any MIDI data contained in the event. Note that in most circumstances, functions called here are called *before* the event's scheduled time. Use the time parameter to precisely schedule any actions based on an event.\r\n\r\n### Pooled Sound Graph Player Components\r\n\r\n#### When to Use Pooled Sound Graph Player Components\r\nPooled Sound Graph Players share a pool of instances of their source Sound Graph asset. When many instances of a sound graph are needed (for example, a sound effect for interacting with objects), it's best to use a pooled Sound Graph Player. Sound Graph instances are only applied to a Pooled Sound Graph Player when it's needed, and are returned when they are no longer needed. Thus, Pooled Sound Graph Players can be used all over a scene without much performance impact, since the number of Sound Graphs actually running logic and audio on those Pooled Sound Graph Players is actually much smaller than the number of players.\r\n\r\n#### Editor Options\r\n![PooledSoundGraphPlayerOverview.png](../IMG/PooledSoundGraphPlayerOverview.png)\r\n\r\n1. The Edit Button - Click this button to open up the source Sound Graph Asset for editing\r\n2. Don't Destroy on Load - When checked, this player won't get destroyed when a new scene is loaded\r\n3. Variables - All variables that are exposed As Inputs in the sound graph are listed here. The starting values of the variables may be overrode from the default values set in the Sound Graph.\r\n4. Events - All events that are exposed in the Sound Graph are displayed here. Functions on other scripts can be added here as a Unity Event, and will be called when the given event is called in the Sound Graph. Each function should take in three values - A Double representing the time the event is called, a Dictionary<string,Object> representing the values of the event's parameters (the string is the event name, and the Object is the value), and MidiFlowInfo, which contains any MIDI data contained in the event. Note that in most circumstances, functions called here are called *before* the event's scheduled time. Use the time parameter to precisely schedule any actions based on an event.\r\n\r\n\r\n## Creating Player Components\r\nCustom player components are generated for every Sound Graph for easier programming. Each generated player is named after their Sound Graph. Note that a Sound Graph can either be used in a pooled player or a regular player, but can't be used in both. To choose which kind of player is generated for a Sound Graph, check or uncheck Pool Sound Graph in that graph's [Graph Input Node](../Nodes/Signal-Sources/Graph-Inputs.md). To learn more about code Generation, see the [code generation page](../Layers-Key-Concepts/8-Code-Generation.md)\r\n",
      "html": "<h1 id=\"sound-graph-playback\">Sound Graph Playback <a class=\"heading-anchor-permalink\" href=\"#sound-graph-playback\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Player components are how Sound Graphs are played in a scene. There are two different kinds of player components, a Sound Graph Player component, and a Pooled Sound Graph Player Component. Both take an input Sound Graph and use it to play back audio in a scene. The Sound Graph defines the logic behind how audio plays, and the Player component provides interfaces in code and the editor for triggering events and accessing variables.</p>\n<h2 id=\"sound-graph-players-and-pooled-sound-graph-players\">Sound Graph Players and Pooled Sound Graph Players <a class=\"heading-anchor-permalink\" href=\"#sound-graph-players-and-pooled-sound-graph-players\">#</a></h2>\n<p>Each player component is most useful in certain situations, and have different options exposed in the editor.</p>\n<h3 id=\"sound-graph-player-components\">Sound Graph Player Components <a class=\"heading-anchor-permalink\" href=\"#sound-graph-player-components\">#</a></h3>\n<h4 id=\"when-to-use-sound-graph-player-components\">When to Use Sound Graph Player Components <a class=\"heading-anchor-permalink\" href=\"#when-to-use-sound-graph-player-components\">#</a></h4>\n<p>Sound Graph Players each make an individual copy of its source Sound Graph asset. This makes them slightly less complex to use than Pooled Sound Graph Players, but since each player has its own copy of the Sound Graph, making many instances of a Sound Graph Player can be memory-inefficient. Sound Graph Player components are best when only a few instances of that player are needed - for example, playing menu music.</p>\n<h4 id=\"editor-options\">Editor Options <a class=\"heading-anchor-permalink\" href=\"#editor-options\">#</a></h4>\n<p><img src=\"../IMG/SoundGraphPlayerOverview.png\" alt=\"SoundGraphPlayerOverview.png\"></p>\n<ol>\n<li>The Edit Button - Click this button to open up the source Sound Graph Asset for editing</li>\n<li>Don’t Destroy on Load - When checked, this player won’t get destroyed when a new scene is loaded</li>\n<li>Play On Awake - When checked, the events in the Starting Events list will be triggered immediately when the player is enabled</li>\n<li>Starting Events - These are the events that are called by Play On Awake. Note that this list only appears when Play On Awake is checked. Only events that are exposed in the sound graph may be called here.</li>\n<li>Variables - All variables that are exposed as Inputs in the sound graph are listed here. The starting values of the variables may be overwritten from the default values set in the Sound Graph.</li>\n<li>Events - All events that are exposed in the Sound Graph are displayed here. Functions on other scripts can be added here as a Unity Event, and will be called when the given event is called in the Sound Graph. Each function should take in three values - A Double representing the time the event is called, a Dictionary&lt;string,Object&gt; representing the values of the event’s parameters (the string is the event name, and the Object is the value), and MidiFlowInfo, which contains any MIDI data contained in the event. Note that in most circumstances, functions called here are called <em>before</em> the event’s scheduled time. Use the time parameter to precisely schedule any actions based on an event.</li>\n</ol>\n<h3 id=\"pooled-sound-graph-player-components\">Pooled Sound Graph Player Components <a class=\"heading-anchor-permalink\" href=\"#pooled-sound-graph-player-components\">#</a></h3>\n<h4 id=\"when-to-use-pooled-sound-graph-player-components\">When to Use Pooled Sound Graph Player Components <a class=\"heading-anchor-permalink\" href=\"#when-to-use-pooled-sound-graph-player-components\">#</a></h4>\n<p>Pooled Sound Graph Players share a pool of instances of their source Sound Graph asset. When many instances of a sound graph are needed (for example, a sound effect for interacting with objects), it’s best to use a pooled Sound Graph Player. Sound Graph instances are only applied to a Pooled Sound Graph Player when it’s needed, and are returned when they are no longer needed. Thus, Pooled Sound Graph Players can be used all over a scene without much performance impact, since the number of Sound Graphs actually running logic and audio on those Pooled Sound Graph Players is actually much smaller than the number of players.</p>\n<h4 id=\"editor-options-2\">Editor Options <a class=\"heading-anchor-permalink\" href=\"#editor-options-2\">#</a></h4>\n<p><img src=\"../IMG/PooledSoundGraphPlayerOverview.png\" alt=\"PooledSoundGraphPlayerOverview.png\"></p>\n<ol>\n<li>The Edit Button - Click this button to open up the source Sound Graph Asset for editing</li>\n<li>Don’t Destroy on Load - When checked, this player won’t get destroyed when a new scene is loaded</li>\n<li>Variables - All variables that are exposed As Inputs in the sound graph are listed here. The starting values of the variables may be overrode from the default values set in the Sound Graph.</li>\n<li>Events - All events that are exposed in the Sound Graph are displayed here. Functions on other scripts can be added here as a Unity Event, and will be called when the given event is called in the Sound Graph. Each function should take in three values - A Double representing the time the event is called, a Dictionary&lt;string,Object&gt; representing the values of the event’s parameters (the string is the event name, and the Object is the value), and MidiFlowInfo, which contains any MIDI data contained in the event. Note that in most circumstances, functions called here are called <em>before</em> the event’s scheduled time. Use the time parameter to precisely schedule any actions based on an event.</li>\n</ol>\n<h2 id=\"creating-player-components\">Creating Player Components <a class=\"heading-anchor-permalink\" href=\"#creating-player-components\">#</a></h2>\n<p>Custom player components are generated for every Sound Graph for easier programming. Each generated player is named after their Sound Graph. Note that a Sound Graph can either be used in a pooled player or a regular player, but can’t be used in both. To choose which kind of player is generated for a Sound Graph, check or uncheck Pool Sound Graph in that graph’s <a href=\"../Nodes/Signal-Sources/Graph-Inputs.html\">Graph Input Node</a>. To learn more about code Generation, see the <a href=\"../Layers-Key-Concepts/8-Code-Generation.html\">code generation page</a></p>\n",
      "id": 18
    },
    {
      "path": "Layers-Key-Concepts/8-Code-Generation.md",
      "url": "Layers-Key-Concepts/8-Code-Generation.html",
      "content": "\r\n\r\n# Code Generation\r\n\r\n## About\r\n\r\nLayers uses code generation to create custom Sound Graph players for every Sound Graph. To learn more about custom players, see [here](../Layers-Key-Concepts/7-Sound-Graph-Playback.md). Generated code is written to the directory specified by the Generated Code Directory setting. This directory is specified when Layers is first installed to a project. To change the directory after installation, open Project Settings, enter the Layers Settings tab, and change the Generate Code Directory setting.\r\n\r\nCertain changes in a Sound Graph require code regeneration. Generally speaking, changes to named events and variables in the Graph Input node most often require code regeneration. Whenever code generation is required for a soundgraph in the project, a prompt will appear in the bottom left of the Sound Graph Editor Window.\r\n\r\n![CodeGenerationExample.png](../IMG/CodeGenerationExample.png)\r\n",
      "html": "<h1 id=\"code-generation\">Code Generation <a class=\"heading-anchor-permalink\" href=\"#code-generation\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Layers uses code generation to create custom Sound Graph players for every Sound Graph. To learn more about custom players, see <a href=\"../Layers-Key-Concepts/7-Sound-Graph-Playback.html\">here</a>. Generated code is written to the directory specified by the Generated Code Directory setting. This directory is specified when Layers is first installed to a project. To change the directory after installation, open Project Settings, enter the Layers Settings tab, and change the Generate Code Directory setting.</p>\n<p>Certain changes in a Sound Graph require code regeneration. Generally speaking, changes to named events and variables in the Graph Input node most often require code regeneration. Whenever code generation is required for a soundgraph in the project, a prompt will appear in the bottom left of the Sound Graph Editor Window.</p>\n<p><img src=\"../IMG/CodeGenerationExample.png\" alt=\"CodeGenerationExample.png\"></p>\n",
      "id": 19
    },
    {
      "path": "Layers-Key-Concepts/9-API.md",
      "url": "Layers-Key-Concepts/9-API.html",
      "content": "\r\n\r\n# API\r\n\r\n## About\r\n\r\nThe primary way of interacting with Layers via code are through the generated Player Component API's. In short, player components are responsible for executing Sound Graphs in a scene. There are two kinds, Sound Graph Player Components and Pooled Sound Graph Player Components. The difference between the two is Pooled Sound Graph Player Components share instances of the Sound Graph to save resources, while each Sound Graph Player Component is backed by it's own copy of its Sound Graph Asset. See [here](Sound-Graph-Playback) for more information on the different kinds of Player Components.\r\n\r\nEach Sound Graph has a custom Player Component generated for it. This means that each Sound Graph's events and variables are accessible directly through code. This also means that code that incorrectly references a Sound Graph (for example, referencing an event that has since been renamed) can be identified at compile time, rather than as a runtime bug. Below are the API references for the two kinds of Player Components.\r\n\r\n\r\n\r\n## Sound Graph Player Component API\r\n\r\n### public VariableType InputVariableName {get; set;}\r\n\r\nAll graph variables that are set to As Input are available as a property with a setter, where VariableType is the type of the variable in the Sound Graph, and InputVariableName is the name.\r\n\r\n\r\n\r\n### public VariableType OutputVariableName {get;}\r\n\r\nAll graph variables that are set to As Output are available as a property with a getter, where VariableType is the type of the variable in the Sound Graph, and OutputVariableName is the name.\r\n\r\n\r\n\r\n### public void EventName( )\r\n\r\nWhen this method is called, the exposed event sharing a name with this method is triggered. The event will be triggered immediately. If the event has parameters, they will be additional parameters to this method.\r\n\r\n\r\n\r\n### public void EventName( Double startTime )\r\n\r\nWhen this method is called, the exposed event sharing a name with this method is triggered. The event will be scheduled to trigger at the given [DSP Time](https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html)\r\n\r\nParameter Name | Type | Description\r\n------------ | -------|------\r\nstartTime | Double | The [DSP Time](https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html) to schedule the event for\r\n\r\nIf the event has parameters, they will be additional parameters to this method.\r\n\r\n\r\n\r\n### public void StopAll( )\r\n\r\nWhen called, this method stops all playback on player immediately\r\n\r\n\r\n\r\n### public void StopAll( Double time )\r\n\r\nWhen called, this method stops all playback on the player at the given [DSP Time](https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html)\r\n\r\n\r\n\r\nParameter Name | Type | Description\r\n------------ | -------|------\r\ntime | Double | The [DSP Time](https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html) to schedule the stopping all playback\r\n\r\n\r\n\r\n## Globals API\r\n\r\nThe following APIs are generated in a static class with the same name as the Globals asset.\r\n\r\n### public VariableType VariableName {get; set;}\r\n\r\nAll graph variables that are set to As Input are available as a property with a setter, where VariableType is the type of the variable in the Sound Graph, and InputVariableName is the name.\r\n\r\n\r\n\r\n### public void EventName( )\r\n\r\nWhen this method is called, the exposed event sharing a name with this method is triggered. The event will be triggered immediately. If the event has parameters, they will be additional parameters to this method.\r\n\r\n\r\n\r\n### public void EventName( Double startTime )\r\n\r\nWhen this method is called, the exposed event sharing a name with this method is triggered. The event will be scheduled to trigger at the given [DSP Time](https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html)\r\n\r\n| Parameter Name | Type   | Description                                                  |\r\n| -------------- | ------ | ------------------------------------------------------------ |\r\n| startTime      | Double | The [DSP Time](https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html) to schedule the event for |\r\n\r\nIf the event has parameters, they will be additional parameters to this method.\r\n",
      "html": "<h1 id=\"api\">API <a class=\"heading-anchor-permalink\" href=\"#api\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The primary way of interacting with Layers via code are through the generated Player Component API’s. In short, player components are responsible for executing Sound Graphs in a scene. There are two kinds, Sound Graph Player Components and Pooled Sound Graph Player Components. The difference between the two is Pooled Sound Graph Player Components share instances of the Sound Graph to save resources, while each Sound Graph Player Component is backed by it’s own copy of its Sound Graph Asset. See <a href=\"Sound-Graph-Playback\">here</a> for more information on the different kinds of Player Components.</p>\n<p>Each Sound Graph has a custom Player Component generated for it. This means that each Sound Graph’s events and variables are accessible directly through code. This also means that code that incorrectly references a Sound Graph (for example, referencing an event that has since been renamed) can be identified at compile time, rather than as a runtime bug. Below are the API references for the two kinds of Player Components.</p>\n<h2 id=\"sound-graph-player-component-api\">Sound Graph Player Component API <a class=\"heading-anchor-permalink\" href=\"#sound-graph-player-component-api\">#</a></h2>\n<h3 id=\"public-variabletype-inputvariablename-%7Bget%3B-set%3B%7D\">public VariableType InputVariableName {get; set;} <a class=\"heading-anchor-permalink\" href=\"#public-variabletype-inputvariablename-%7Bget%3B-set%3B%7D\">#</a></h3>\n<p>All graph variables that are set to As Input are available as a property with a setter, where VariableType is the type of the variable in the Sound Graph, and InputVariableName is the name.</p>\n<h3 id=\"public-variabletype-outputvariablename-%7Bget%3B%7D\">public VariableType OutputVariableName {get;} <a class=\"heading-anchor-permalink\" href=\"#public-variabletype-outputvariablename-%7Bget%3B%7D\">#</a></h3>\n<p>All graph variables that are set to As Output are available as a property with a getter, where VariableType is the type of the variable in the Sound Graph, and OutputVariableName is the name.</p>\n<h3 id=\"public-void-eventname(-)\">public void EventName( ) <a class=\"heading-anchor-permalink\" href=\"#public-void-eventname(-)\">#</a></h3>\n<p>When this method is called, the exposed event sharing a name with this method is triggered. The event will be triggered immediately. If the event has parameters, they will be additional parameters to this method.</p>\n<h3 id=\"public-void-eventname(-double-starttime-)\">public void EventName( Double startTime ) <a class=\"heading-anchor-permalink\" href=\"#public-void-eventname(-double-starttime-)\">#</a></h3>\n<p>When this method is called, the exposed event sharing a name with this method is triggered. The event will be scheduled to trigger at the given <a href=\"https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html\">DSP Time</a></p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>startTime</td>\n<td>Double</td>\n<td>The <a href=\"https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html\">DSP Time</a> to schedule the event for</td>\n</tr>\n</tbody>\n</table>\n<p>If the event has parameters, they will be additional parameters to this method.</p>\n<h3 id=\"public-void-stopall(-)\">public void StopAll( ) <a class=\"heading-anchor-permalink\" href=\"#public-void-stopall(-)\">#</a></h3>\n<p>When called, this method stops all playback on player immediately</p>\n<h3 id=\"public-void-stopall(-double-time-)\">public void StopAll( Double time ) <a class=\"heading-anchor-permalink\" href=\"#public-void-stopall(-double-time-)\">#</a></h3>\n<p>When called, this method stops all playback on the player at the given <a href=\"https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html\">DSP Time</a></p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>Double</td>\n<td>The <a href=\"https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html\">DSP Time</a> to schedule the stopping all playback</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"globals-api\">Globals API <a class=\"heading-anchor-permalink\" href=\"#globals-api\">#</a></h2>\n<p>The following APIs are generated in a static class with the same name as the Globals asset.</p>\n<h3 id=\"public-variabletype-variablename-%7Bget%3B-set%3B%7D\">public VariableType VariableName {get; set;} <a class=\"heading-anchor-permalink\" href=\"#public-variabletype-variablename-%7Bget%3B-set%3B%7D\">#</a></h3>\n<p>All graph variables that are set to As Input are available as a property with a setter, where VariableType is the type of the variable in the Sound Graph, and InputVariableName is the name.</p>\n<h3 id=\"public-void-eventname(-)-2\">public void EventName( ) <a class=\"heading-anchor-permalink\" href=\"#public-void-eventname(-)-2\">#</a></h3>\n<p>When this method is called, the exposed event sharing a name with this method is triggered. The event will be triggered immediately. If the event has parameters, they will be additional parameters to this method.</p>\n<h3 id=\"public-void-eventname(-double-starttime-)-2\">public void EventName( Double startTime ) <a class=\"heading-anchor-permalink\" href=\"#public-void-eventname(-double-starttime-)-2\">#</a></h3>\n<p>When this method is called, the exposed event sharing a name with this method is triggered. The event will be scheduled to trigger at the given <a href=\"https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html\">DSP Time</a></p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>startTime</td>\n<td>Double</td>\n<td>The <a href=\"https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html\">DSP Time</a> to schedule the event for</td>\n</tr>\n</tbody>\n</table>\n<p>If the event has parameters, they will be additional parameters to this method.</p>\n",
      "id": 20
    },
    {
      "path": "Nodes/Automation/Animate.md",
      "url": "Nodes/Automation/Animate.html",
      "content": "\r\n\r\n# Animate Node\r\n\r\n![Animate Node](../../IMG/Animate-Node.png)\r\n\r\n## About\r\n\r\nAnimates an output value over time, according to an animation curve. When the Start event is triggered, the the value on the Output port will change according to the curve. Triggering stop will reset the value.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | -------|------\r\nStart | Event| Begins animating the output value\r\nStop | Event | Stops animating the output value, and resets the time on the curve to zero\r\nAnimation Curve | AnimationCurve | The animation curve representing the output value of the node over time.\r\n\r\n## Outputs\r\nOutput | Type | Description\r\n------------ | ------|-------\r\nValue | Float | The resulting value of the animation curve over time\r\n",
      "html": "<h1 id=\"animate-node\">Animate Node <a class=\"heading-anchor-permalink\" href=\"#animate-node\">#</a></h1>\n<p><img src=\"../../IMG/Animate-Node.png\" alt=\"Animate Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Animates an output value over time, according to an animation curve. When the Start event is triggered, the the value on the Output port will change according to the curve. Triggering stop will reset the value.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start</td>\n<td>Event</td>\n<td>Begins animating the output value</td>\n</tr>\n<tr>\n<td>Stop</td>\n<td>Event</td>\n<td>Stops animating the output value, and resets the time on the curve to zero</td>\n</tr>\n<tr>\n<td>Animation Curve</td>\n<td>AnimationCurve</td>\n<td>The animation curve representing the output value of the node over time.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Float</td>\n<td>The resulting value of the animation curve over time</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 21
    },
    {
      "path": "Nodes/Automation/Find-Snapshot.md",
      "url": "Nodes/Automation/Find-Snapshot.html",
      "content": "\r\n\r\n# Find Snapshot Node\r\n\r\n![Find-Snapshot](../../IMG/Find-Snapshot.png)\r\n\r\n## About\r\n\r\nGets a reference to a Unity Audio Mixer snapshot\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | -------|------\r\nSnapshot name | String | The name of the snapshot to search for\r\nAudio mixer | AudioMixer| The Unity Audio Mixer the snapshot belongs to\r\n\r\n## Outputs\r\nOutput | Type | Description\r\n------------ | -----|--------\r\nSnapshot | AudioMixerSnapshot | A reference to the snapshot, or null if a snapshot with the given name doesn't exist in the audio mixer\r\n\r\n",
      "html": "<h1 id=\"find-snapshot-node\">Find Snapshot Node <a class=\"heading-anchor-permalink\" href=\"#find-snapshot-node\">#</a></h1>\n<p><img src=\"../../IMG/Find-Snapshot.png\" alt=\"Find-Snapshot\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Gets a reference to a Unity Audio Mixer snapshot</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Snapshot name</td>\n<td>String</td>\n<td>The name of the snapshot to search for</td>\n</tr>\n<tr>\n<td>Audio mixer</td>\n<td>AudioMixer</td>\n<td>The Unity Audio Mixer the snapshot belongs to</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Snapshot</td>\n<td>AudioMixerSnapshot</td>\n<td>A reference to the snapshot, or null if a snapshot with the given name doesn’t exist in the audio mixer</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 22
    },
    {
      "path": "Nodes/Automation/Get-Mixer-Parameter.md",
      "url": "Nodes/Automation/Get-Mixer-Parameter.html",
      "content": "\r\n\r\n# Get Mixer Parameter Node\r\n\r\n![Get-Mixer-Parameter](../../IMG/Get-Mixer-Parameter.png)\r\n\r\n## About\r\n\r\nGets the value of the given Unity Mixer parameter\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nMixer | Audio Mixer| The Unity Mixer the parameter belongs to\r\nName | String | The name of the parameter\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nValue | Float | The value of the parameter\r\n\r\n\r\n",
      "html": "<h1 id=\"get-mixer-parameter-node\">Get Mixer Parameter Node <a class=\"heading-anchor-permalink\" href=\"#get-mixer-parameter-node\">#</a></h1>\n<p><img src=\"../../IMG/Get-Mixer-Parameter.png\" alt=\"Get-Mixer-Parameter\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Gets the value of the given Unity Mixer parameter</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mixer</td>\n<td>Audio Mixer</td>\n<td>The Unity Mixer the parameter belongs to</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>String</td>\n<td>The name of the parameter</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Float</td>\n<td>The value of the parameter</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 23
    },
    {
      "path": "Nodes/Automation/Move-Towards.md",
      "url": "Nodes/Automation/Move-Towards.html",
      "content": "\r\n\r\n# Move Towards Node\r\n\r\n![Get-Mixer-Parameter](../../IMG/Get-Mixer-Parameter.png)\r\n\r\n## About\r\n\r\nThe Move Towards node shifts an input value towards a target value over time. The node can either output to a graph variable or to an output port - the output mode is changed using the Output Mode property.  The Move Towards node works with Float, Double, Vector3, and Quaternion input types\r\n\r\n\r\n\r\n## Output Mode: Variable\r\n\r\n![Move-Towards-Variable-Mode](../../IMG/Move-Towards-Variable-Mode.png)\r\n\r\nThe Move Towards Node outputs values to a graph variable in this mode.\r\n\r\n### Inputs\r\n\r\n| Input        | Type                            | Description                                                  |\r\n| ------------ | ------------------------------- | ------------------------------------------------------------ |\r\n| Target Value | Float/Double/Vector3/Quaternion | The target value this node will move the variable towards. This input changes type depending on the type of the variable |\r\n| Max Delta    | Float                           | The amount the value can change per second                   |\r\n\r\n### Options\r\n\r\n| Option      | Type           | Description                                                  |\r\n| ----------- | -------------- | ------------------------------------------------------------ |\r\n| Output Mode | Mode selector  | A dropdown picker to choose whether the node outputs to a Graph variable or an output Port |\r\n| Unnamed     | Graph Variable | A dropdown picker for selecting the graph variable this node outputs to. |\r\n\r\n## Output Mode: Port\r\n\r\n![Move-Towards-Port-Mode](../../IMG/Move-Towards-Port-Mode.png)\r\n\r\nThe Move Towards Node outputs values to a port in this mode. The output value smoothly moves towards the target value\r\n\r\n### Inputs\r\n\r\n| Input        | Type                            | Description                                                  |\r\n| ------------ | ------------------------------- | ------------------------------------------------------------ |\r\n| Target Value | Float/Double/Vector3/Quaternion | The target value. The type of this port changes depending on the Type property |\r\n| Max Delta    | Float                           | The amount the value can change per second                   |\r\n\r\n### Outputs\r\n\r\n| Output | Type                            | Description                                                  |\r\n| ------ | ------------------------------- | ------------------------------------------------------------ |\r\n| Output | Float/Double/Vector3/Quaternion | The output value of the node, targeting the Target Value input and dampened by Max Delta. The type of this port changes depending on the Type property. |\r\n\r\n### Options\r\n\r\n| Option      | Type                   | Description                                                  |\r\n| ----------- | ---------------------- | ------------------------------------------------------------ |\r\n| Output Mode | Mode selector          | A dropdown picker to choose whether the node outputs to a Graph variable or an output Port |\r\n| Type        | Variable Type Selector | Selects the input and output type. Can be set to Float, Double, Vector3, and Quaternion |\r\n\r\n",
      "html": "<h1 id=\"move-towards-node\">Move Towards Node <a class=\"heading-anchor-permalink\" href=\"#move-towards-node\">#</a></h1>\n<p><img src=\"../../IMG/Get-Mixer-Parameter.png\" alt=\"Get-Mixer-Parameter\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Move Towards node shifts an input value towards a target value over time. The node can either output to a graph variable or to an output port - the output mode is changed using the Output Mode property.  The Move Towards node works with Float, Double, Vector3, and Quaternion input types</p>\n<h2 id=\"output-mode%3A-variable\">Output Mode: Variable <a class=\"heading-anchor-permalink\" href=\"#output-mode%3A-variable\">#</a></h2>\n<p><img src=\"../../IMG/Move-Towards-Variable-Mode.png\" alt=\"Move-Towards-Variable-Mode\"></p>\n<p>The Move Towards Node outputs values to a graph variable in this mode.</p>\n<h3 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Target Value</td>\n<td>Float/Double/Vector3/Quaternion</td>\n<td>The target value this node will move the variable towards. This input changes type depending on the type of the variable</td>\n</tr>\n<tr>\n<td>Max Delta</td>\n<td>Float</td>\n<td>The amount the value can change per second</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output Mode</td>\n<td>Mode selector</td>\n<td>A dropdown picker to choose whether the node outputs to a Graph variable or an output Port</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>Graph Variable</td>\n<td>A dropdown picker for selecting the graph variable this node outputs to.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"output-mode%3A-port\">Output Mode: Port <a class=\"heading-anchor-permalink\" href=\"#output-mode%3A-port\">#</a></h2>\n<p><img src=\"../../IMG/Move-Towards-Port-Mode.png\" alt=\"Move-Towards-Port-Mode\"></p>\n<p>The Move Towards Node outputs values to a port in this mode. The output value smoothly moves towards the target value</p>\n<h3 id=\"inputs-2\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Target Value</td>\n<td>Float/Double/Vector3/Quaternion</td>\n<td>The target value. The type of this port changes depending on the Type property</td>\n</tr>\n<tr>\n<td>Max Delta</td>\n<td>Float</td>\n<td>The amount the value can change per second</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Float/Double/Vector3/Quaternion</td>\n<td>The output value of the node, targeting the Target Value input and dampened by Max Delta. The type of this port changes depending on the Type property.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options-2\">Options <a class=\"heading-anchor-permalink\" href=\"#options-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output Mode</td>\n<td>Mode selector</td>\n<td>A dropdown picker to choose whether the node outputs to a Graph variable or an output Port</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Variable Type Selector</td>\n<td>Selects the input and output type. Can be set to Float, Double, Vector3, and Quaternion</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 24
    },
    {
      "path": "Nodes/Automation/Set-Mixer-Parameter.md",
      "url": "Nodes/Automation/Set-Mixer-Parameter.html",
      "content": "\r\n\r\n# Set Mixer Parameter Node\r\n\r\n![Set-Mixer-Parameter-Node](../../IMG/Set-Mixer-Parameter-Node.png)\r\n\r\n## About\r\n\r\nSets the value of the given Unity Mixer parameter\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nWrite | Event | This event triggers the write operation\r\nMixer | Audio Mixer| The Unity Mixer the parameter belongs to\r\nName | String | The name of the parameter\r\nValue | Float | The value to write to the parameter\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nWrite Finished | Event | This event is triggered when the write has completed\r\n\r\n\r\n",
      "html": "<h1 id=\"set-mixer-parameter-node\">Set Mixer Parameter Node <a class=\"heading-anchor-permalink\" href=\"#set-mixer-parameter-node\">#</a></h1>\n<p><img src=\"../../IMG/Set-Mixer-Parameter-Node.png\" alt=\"Set-Mixer-Parameter-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Sets the value of the given Unity Mixer parameter</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Write</td>\n<td>Event</td>\n<td>This event triggers the write operation</td>\n</tr>\n<tr>\n<td>Mixer</td>\n<td>Audio Mixer</td>\n<td>The Unity Mixer the parameter belongs to</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>String</td>\n<td>The name of the parameter</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Float</td>\n<td>The value to write to the parameter</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Write Finished</td>\n<td>Event</td>\n<td>This event is triggered when the write has completed</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 25
    },
    {
      "path": "Nodes/Automation/Transition-To-Snapshots.md",
      "url": "Nodes/Automation/Transition-To-Snapshots.html",
      "content": "\r\n\r\n# Transition To Snapshots Node\r\n\r\n![Transition-To-Snapshots](../../IMG/Transition-To-Snapshots.png)\r\n\r\n## About\r\n\r\nTransitions the Audio Mixer to a weighted mix of snapshots over time\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nStart Transition | Event | This event triggers the node to begin the transition\r\nSnapshots | Snapshot Array| The array of snapshots to transition the Audio Mixer towards\r\nWeights | Float Array | The array of weights for the given snapshots. Each weight corresponds to the snapshot with the same index. Note, the array of weights must have the same number of elements as the array of snapshots. \r\nAudio Mixer | Audio Mixer | The Audio Mixer to perform the transition on. \r\nTime To Reach | Float | The amount of time it takes to transition the Audio Mixer to the given weighted snapshots\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nEnd Transition | Event | This event is triggered when the audio mixer has finished transitioning to the given weighted snapshots\r\n\r\n\r\n",
      "html": "<h1 id=\"transition-to-snapshots-node\">Transition To Snapshots Node <a class=\"heading-anchor-permalink\" href=\"#transition-to-snapshots-node\">#</a></h1>\n<p><img src=\"../../IMG/Transition-To-Snapshots.png\" alt=\"Transition-To-Snapshots\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Transitions the Audio Mixer to a weighted mix of snapshots over time</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start Transition</td>\n<td>Event</td>\n<td>This event triggers the node to begin the transition</td>\n</tr>\n<tr>\n<td>Snapshots</td>\n<td>Snapshot Array</td>\n<td>The array of snapshots to transition the Audio Mixer towards</td>\n</tr>\n<tr>\n<td>Weights</td>\n<td>Float Array</td>\n<td>The array of weights for the given snapshots. Each weight corresponds to the snapshot with the same index. Note, the array of weights must have the same number of elements as the array of snapshots.</td>\n</tr>\n<tr>\n<td>Audio Mixer</td>\n<td>Audio Mixer</td>\n<td>The Audio Mixer to perform the transition on.</td>\n</tr>\n<tr>\n<td>Time To Reach</td>\n<td>Float</td>\n<td>The amount of time it takes to transition the Audio Mixer to the given weighted snapshots</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>End Transition</td>\n<td>Event</td>\n<td>This event is triggered when the audio mixer has finished transitioning to the given weighted snapshots</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 26
    },
    {
      "path": "Nodes/Flow/Do-If.md",
      "url": "Nodes/Flow/Do-If.html",
      "content": "\r\n\r\n# Do If Node\r\n\r\n![Do-If-Node](../../IMG/Do-If-Node.png)\r\n\r\n## About\r\n\r\nEvaluates a condition when triggered, and continues execution if that condition is true\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nEvaluate | Event | Triggers this node to evaluate the condition\r\nCondition | Boolean| The value read when the Evaluate input is triggered\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOn True | Event | This event is triggered when the Evaluate input is triggered and the Condition input is true\r\n\r\n",
      "html": "<h1 id=\"do-if-node\">Do If Node <a class=\"heading-anchor-permalink\" href=\"#do-if-node\">#</a></h1>\n<p><img src=\"../../IMG/Do-If-Node.png\" alt=\"Do-If-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Evaluates a condition when triggered, and continues execution if that condition is true</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Evaluate</td>\n<td>Event</td>\n<td>Triggers this node to evaluate the condition</td>\n</tr>\n<tr>\n<td>Condition</td>\n<td>Boolean</td>\n<td>The value read when the Evaluate input is triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On True</td>\n<td>Event</td>\n<td>This event is triggered when the Evaluate input is triggered and the Condition input is true</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 27
    },
    {
      "path": "Nodes/Flow/Do-While.md",
      "url": "Nodes/Flow/Do-While.html",
      "content": "\r\n\r\n# Do While Node\r\n\r\n![Do-While](../../IMG/Do-While.png)\r\n\r\n## About\r\n\r\nThis node is used to create loops. It evaluates a condition when triggered. If that condition is met, the Condition Reached output is triggered. Otherwise, Continue Loop is triggered. That condition may be an iteration count, or custom logic.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nEnter | Event | Triggers evaluation of the condition. Depending on the condition's value, Continue Loop or Condition Reached may be triggered\r\nMax Iteration Count | Integer | (Displayed when Use Custom Logic is unchecked) The number of times this node can be executed before Condition Reached will be triggered\r\nCondition | Boolean| (Displayed when Use Custom Logic is checked) The value read when the Enter input is triggered. If True, Condition reached is triggered. When False, Continue Loop is triggered\r\nReset Iterations | Event | Resets this node's iteration count\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nContinue Loop | Event | This event is triggered when the Enter input is triggered and the condition is false\r\nContinue Reached | Event | This event is triggered when the Enter input is triggered and the condition is true\r\nIndex | Integer | The current iteration count for this node. Note that this shows even when using custom logic, in case you want to know how many times the node has been called\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUse Custom Logic | Boolean | If true, iteration is controlled using the condition input. If false, iteration is controlled using the Max Iteration Count Input\r\n\r\n",
      "html": "<h1 id=\"do-while-node\">Do While Node <a class=\"heading-anchor-permalink\" href=\"#do-while-node\">#</a></h1>\n<p><img src=\"../../IMG/Do-While.png\" alt=\"Do-While\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node is used to create loops. It evaluates a condition when triggered. If that condition is met, the Condition Reached output is triggered. Otherwise, Continue Loop is triggered. That condition may be an iteration count, or custom logic.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enter</td>\n<td>Event</td>\n<td>Triggers evaluation of the condition. Depending on the condition’s value, Continue Loop or Condition Reached may be triggered</td>\n</tr>\n<tr>\n<td>Max Iteration Count</td>\n<td>Integer</td>\n<td>(Displayed when Use Custom Logic is unchecked) The number of times this node can be executed before Condition Reached will be triggered</td>\n</tr>\n<tr>\n<td>Condition</td>\n<td>Boolean</td>\n<td>(Displayed when Use Custom Logic is checked) The value read when the Enter input is triggered. If True, Condition reached is triggered. When False, Continue Loop is triggered</td>\n</tr>\n<tr>\n<td>Reset Iterations</td>\n<td>Event</td>\n<td>Resets this node’s iteration count</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Continue Loop</td>\n<td>Event</td>\n<td>This event is triggered when the Enter input is triggered and the condition is false</td>\n</tr>\n<tr>\n<td>Continue Reached</td>\n<td>Event</td>\n<td>This event is triggered when the Enter input is triggered and the condition is true</td>\n</tr>\n<tr>\n<td>Index</td>\n<td>Integer</td>\n<td>The current iteration count for this node. Note that this shows even when using custom logic, in case you want to know how many times the node has been called</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Use Custom Logic</td>\n<td>Boolean</td>\n<td>If true, iteration is controlled using the condition input. If false, iteration is controlled using the Max Iteration Count Input</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 28
    },
    {
      "path": "Nodes/Flow/If.md",
      "url": "Nodes/Flow/If.html",
      "content": "\r\n\r\n# If Node\r\n\r\n![If-Node](../../IMG/If-Node.png)\r\n\r\n## About\r\n\r\nWhen triggered, this node chooses one output event or the other depending on an input condition\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nEvaluate | Event | Triggers evaluation of the condition. Depending on the condition's value, On True or On False is triggered\r\nCondition | Boolean| The value read when the Evaluate input is triggered. If True, On True is triggered. If False, On False is triggered\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOn True | Event | This event is triggered when the Evaluate input is triggered and the condition is True\r\nOn False | Event | This event is triggered when the Evaluate input is triggered and the condition is False\r\n\r\n\r\n",
      "html": "<h1 id=\"if-node\">If Node <a class=\"heading-anchor-permalink\" href=\"#if-node\">#</a></h1>\n<p><img src=\"../../IMG/If-Node.png\" alt=\"If-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When triggered, this node chooses one output event or the other depending on an input condition</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Evaluate</td>\n<td>Event</td>\n<td>Triggers evaluation of the condition. Depending on the condition’s value, On True or On False is triggered</td>\n</tr>\n<tr>\n<td>Condition</td>\n<td>Boolean</td>\n<td>The value read when the Evaluate input is triggered. If True, On True is triggered. If False, On False is triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On True</td>\n<td>Event</td>\n<td>This event is triggered when the Evaluate input is triggered and the condition is True</td>\n</tr>\n<tr>\n<td>On False</td>\n<td>Event</td>\n<td>This event is triggered when the Evaluate input is triggered and the condition is False</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 29
    },
    {
      "path": "Nodes/Flow/MIDI-Channel-Filter.md",
      "url": "Nodes/Flow/MIDI-Channel-Filter.html",
      "content": "\r\n\r\n# MIDI Channel Filter Node\r\n\r\n![MIDI-Channel-Filter](../../IMG/MIDI-Channel-Filter.png)\r\n\r\n## About\r\n\r\nThis node filters incoming events by a MIDI Parameter. This node requires the incoming event to contain a MIDI Data event parameter. See [Events](../../Layers-Key-Concepts/2-Events.md) for more information.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInput | Event | The incoming event. This incoming event must contain a MIDI Data parameter \r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOutput | Event | The outgoing event, which triggers only if the conditions in the Conditions list are met\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Dropdown | Dropdown to choose which MIDI Data parameter to read from the event \r\nUnnamed | Dropdown | Defines whether the Condition list is inclusive or exclusive. For example, if Filter Type is set to include and Channels 4 and 5 are in the Conditions list, all incoming events in MIDI channel 4 or 5 is forwarded along, and all others are discarded. If Filter Type is set to Exclude, all incoming events NOT in MIDI channel 4 or 5 is forwarded, and those in Channel 4 or 5 are discarded.\r\nConditions | List | A list of conditions by which incoming events are filtered. Each condition has a selectable channel number.\r\n\r\n\r\n",
      "html": "<h1 id=\"midi-channel-filter-node\">MIDI Channel Filter Node <a class=\"heading-anchor-permalink\" href=\"#midi-channel-filter-node\">#</a></h1>\n<p><img src=\"../../IMG/MIDI-Channel-Filter.png\" alt=\"MIDI-Channel-Filter\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node filters incoming events by a MIDI Parameter. This node requires the incoming event to contain a MIDI Data event parameter. See <a href=\"../../Layers-Key-Concepts/2-Events.html\">Events</a> for more information.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Event</td>\n<td>The incoming event. This incoming event must contain a MIDI Data parameter</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Event</td>\n<td>The outgoing event, which triggers only if the conditions in the Conditions list are met</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown</td>\n<td>Dropdown to choose which MIDI Data parameter to read from the event</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown</td>\n<td>Defines whether the Condition list is inclusive or exclusive. For example, if Filter Type is set to include and Channels 4 and 5 are in the Conditions list, all incoming events in MIDI channel 4 or 5 is forwarded along, and all others are discarded. If Filter Type is set to Exclude, all incoming events NOT in MIDI channel 4 or 5 is forwarded, and those in Channel 4 or 5 are discarded.</td>\n</tr>\n<tr>\n<td>Conditions</td>\n<td>List</td>\n<td>A list of conditions by which incoming events are filtered. Each condition has a selectable channel number.</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 30
    },
    {
      "path": "Nodes/Flow/MIDI-Note-Range-Filter.md",
      "url": "Nodes/Flow/MIDI-Note-Range-Filter.html",
      "content": "\r\n\r\n# MIDI Note Range Filter Node\r\n\r\n![Midi-Note-Range-Filter](../../IMG/Midi-Note-Range-Filter.png)\r\n\r\n## About\r\n\r\nThis node provides a simple way to break out an incoming event by its MIDI note number. The node will read the specified MIDI Data parameter on the incoming event, and trigger the appropriate output. See [Events](/Layers-In-Detail/2_Events.md) for more information.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInput | Event | The incoming event. This event must contain a MIDI Data parameter. \r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nNote name | Event | The outgoing event for the given note. The number of these events vary depending on the Start Note and End Note parameters. When an incoming event arrives on Input, if its MIDI note number matches this output this event will be triggered\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Dropdown | Dropdown to choose which MIDI Data parameter to use \r\nStart Note | Integer | The first note in the range of notes this node will display an event for\r\nEnd Note | Integer | The last note in the range of notes this node will display an event for\r\n\r\n\r\n",
      "html": "<h1 id=\"midi-note-range-filter-node\">MIDI Note Range Filter Node <a class=\"heading-anchor-permalink\" href=\"#midi-note-range-filter-node\">#</a></h1>\n<p><img src=\"../../IMG/Midi-Note-Range-Filter.png\" alt=\"Midi-Note-Range-Filter\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node provides a simple way to break out an incoming event by its MIDI note number. The node will read the specified MIDI Data parameter on the incoming event, and trigger the appropriate output. See <a href=\"/Layers-In-Detail/2_Events.html\">Events</a> for more information.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Event</td>\n<td>The incoming event. This event must contain a MIDI Data parameter.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Note name</td>\n<td>Event</td>\n<td>The outgoing event for the given note. The number of these events vary depending on the Start Note and End Note parameters. When an incoming event arrives on Input, if its MIDI note number matches this output this event will be triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown</td>\n<td>Dropdown to choose which MIDI Data parameter to use</td>\n</tr>\n<tr>\n<td>Start Note</td>\n<td>Integer</td>\n<td>The first note in the range of notes this node will display an event for</td>\n</tr>\n<tr>\n<td>End Note</td>\n<td>Integer</td>\n<td>The last note in the range of notes this node will display an event for</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 31
    },
    {
      "path": "Nodes/Flow/Pick-Branch.md",
      "url": "Nodes/Flow/Pick-Branch.html",
      "content": "\r\n\r\n# Pick Branch\r\n\r\n![Pick-Branch](../../IMG/Pick-Branch.png)\r\n\r\n## About\r\n\r\nThis node picks a branch to trigger when executed. The chosen branch depends on the Selected Branch input\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInput | Event | Executes this node. When triggered, the node picks an output to trigger, depending on the Selected Branch input\r\nSelected Branch | Integer | When Input is triggered, the output branch with this number is triggered. Note that branches are numbered starting at 1. The value for this input can be set on the node, be read from the incoming port, or from an incoming event parameter on Input. Click the dropdown next to the input to choose where the value is sourced from. \r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOutputs | List of Events | When Input is triggered, an event is selected and triggered from this list using the Selected Branch input\r\n\r\n\r\n\r\n",
      "html": "<h1 id=\"pick-branch\">Pick Branch <a class=\"heading-anchor-permalink\" href=\"#pick-branch\">#</a></h1>\n<p><img src=\"../../IMG/Pick-Branch.png\" alt=\"Pick-Branch\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node picks a branch to trigger when executed. The chosen branch depends on the Selected Branch input</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Event</td>\n<td>Executes this node. When triggered, the node picks an output to trigger, depending on the Selected Branch input</td>\n</tr>\n<tr>\n<td>Selected Branch</td>\n<td>Integer</td>\n<td>When Input is triggered, the output branch with this number is triggered. Note that branches are numbered starting at 1. The value for this input can be set on the node, be read from the incoming port, or from an incoming event parameter on Input. Click the dropdown next to the input to choose where the value is sourced from.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Outputs</td>\n<td>List of Events</td>\n<td>When Input is triggered, an event is selected and triggered from this list using the Selected Branch input</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 32
    },
    {
      "path": "Nodes/Flow/Pick-Random-Branch.md",
      "url": "Nodes/Flow/Pick-Random-Branch.html",
      "content": "\r\n\r\n# Pick Random Branch Node\r\n\r\n![Pick-Random-Branch](../../IMG/Pick-Random-Branch.png)\r\n\r\n## About\r\n\r\nThis node picks a random output to trigger when executed\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInput | Event | Executes this node. When triggered, the node randomly picks an output to trigger\r\nDon't Repeat | Boolean | When checked, this node will not immediately repeat the selection of an output\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOut | List of Events | When Input is triggered, an event is selected and triggered from this list using the Selected Branch input\r\n\r\n\r\n\r\n",
      "html": "<h1 id=\"pick-random-branch-node\">Pick Random Branch Node <a class=\"heading-anchor-permalink\" href=\"#pick-random-branch-node\">#</a></h1>\n<p><img src=\"../../IMG/Pick-Random-Branch.png\" alt=\"Pick-Random-Branch\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node picks a random output to trigger when executed</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Event</td>\n<td>Executes this node. When triggered, the node randomly picks an output to trigger</td>\n</tr>\n<tr>\n<td>Don’t Repeat</td>\n<td>Boolean</td>\n<td>When checked, this node will not immediately repeat the selection of an output</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Out</td>\n<td>List of Events</td>\n<td>When Input is triggered, an event is selected and triggered from this list using the Selected Branch input</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 33
    },
    {
      "path": "Nodes/Flow/Pin.md",
      "url": "Nodes/Flow/Pin.html",
      "content": "\r\n\r\n# Pin Node\r\n\r\n![Pin](../../IMG/Pin.png)\r\n\r\n## About\r\n\r\nThis node provides a way for the user to combine multiple Event lines together into a single event line. All incoming events are forwarded along the output\r\n\r\n\r\n",
      "html": "<h1 id=\"pin-node\">Pin Node <a class=\"heading-anchor-permalink\" href=\"#pin-node\">#</a></h1>\n<p><img src=\"../../IMG/Pin.png\" alt=\"Pin\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node provides a way for the user to combine multiple Event lines together into a single event line. All incoming events are forwarded along the output</p>\n",
      "id": 34
    },
    {
      "path": "Nodes/Flow/Wait-For-All.md",
      "url": "Nodes/Flow/Wait-For-All.html",
      "content": "\r\n\r\n# Wait for All Node\r\n\r\n![Wait-For-All](../../IMG/Wait-For-All.png)\r\n\r\n## About\r\n\r\nWhen all input events in the In list are triggered, the Out event is triggered\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nBranches | List of Event Inputs | The list of events to wait for. Once all of these events are triggered, the Out event is triggered\r\nReset | Event | If this node is waiting for events to be triggered, triggering this event will reset that wait. Out will not be triggered\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOut | Event | This event is triggered when all incoming events are triggered\r\n\r\n\r\n",
      "html": "<h1 id=\"wait-for-all-node\">Wait for All Node <a class=\"heading-anchor-permalink\" href=\"#wait-for-all-node\">#</a></h1>\n<p><img src=\"../../IMG/Wait-For-All.png\" alt=\"Wait-For-All\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When all input events in the In list are triggered, the Out event is triggered</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Branches</td>\n<td>List of Event Inputs</td>\n<td>The list of events to wait for. Once all of these events are triggered, the Out event is triggered</td>\n</tr>\n<tr>\n<td>Reset</td>\n<td>Event</td>\n<td>If this node is waiting for events to be triggered, triggering this event will reset that wait. Out will not be triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Out</td>\n<td>Event</td>\n<td>This event is triggered when all incoming events are triggered</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 35
    },
    {
      "path": "Nodes/Flow/Wait-For-Condition.md",
      "url": "Nodes/Flow/Wait-For-Condition.html",
      "content": "\r\n\r\n# Wait for Condition Node\r\n\r\n![Wait-Condition-Node](../../IMG/Wait-Condition-Node.png)\r\n\r\n## About\r\n\r\nWhen the Start input is triggered, this node waits until the Condition input is true. Once the condition is True, the End Event is triggered\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nStart | Event | Once this event is triggered, the node begins waiting\r\nCondition | Boolean | When this node is triggered, it waits for this input to be True before triggering End\r\nReset | Event | If this node is waiting for a condition, triggering this event will reset that wait. End will not be triggered\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nEnd | Event | This event is triggered when the Start input is triggered and the Condition input is True\r\n\r\n\r\n",
      "html": "<h1 id=\"wait-for-condition-node\">Wait for Condition Node <a class=\"heading-anchor-permalink\" href=\"#wait-for-condition-node\">#</a></h1>\n<p><img src=\"../../IMG/Wait-Condition-Node.png\" alt=\"Wait-Condition-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When the Start input is triggered, this node waits until the Condition input is true. Once the condition is True, the End Event is triggered</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start</td>\n<td>Event</td>\n<td>Once this event is triggered, the node begins waiting</td>\n</tr>\n<tr>\n<td>Condition</td>\n<td>Boolean</td>\n<td>When this node is triggered, it waits for this input to be True before triggering End</td>\n</tr>\n<tr>\n<td>Reset</td>\n<td>Event</td>\n<td>If this node is waiting for a condition, triggering this event will reset that wait. End will not be triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>End</td>\n<td>Event</td>\n<td>This event is triggered when the Start input is triggered and the Condition input is True</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 36
    },
    {
      "path": "Nodes/Flow/Wait-For-Event.md",
      "url": "Nodes/Flow/Wait-For-Event.html",
      "content": "\r\n\r\n# Wait for Event Node\r\n\r\n![Wait-For-Event](../../IMG/Wait-For-Event.png)\r\n\r\n## About\r\n\r\nWhen the Start input is triggered, this node waits until the the given graph event has also been triggered. Once this has occurred, the End output is triggered\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nStart | Event | Once this event is triggered, the node begins waiting for the given event to be triggered\r\n Reset | Event | If this node is waiting for an event, triggering this event resets the node to normal \r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nEnd | Event | Once the node is set to wait for an event, and then the given event has been triggered, this output event will trigger and the node will be set to normal \r\n\r\n## Options\r\n\r\n| Output   | Type           | Description                                                  |\r\n| -------- | -------------- | ------------------------------------------------------------ |\r\n| Unlabled | Event Selector | When this node is triggered, it waits for this event to be triggered. Once this occurs, the End output is triggered |\r\n",
      "html": "<h1 id=\"wait-for-event-node\">Wait for Event Node <a class=\"heading-anchor-permalink\" href=\"#wait-for-event-node\">#</a></h1>\n<p><img src=\"../../IMG/Wait-For-Event.png\" alt=\"Wait-For-Event\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When the Start input is triggered, this node waits until the the given graph event has also been triggered. Once this has occurred, the End output is triggered</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start</td>\n<td>Event</td>\n<td>Once this event is triggered, the node begins waiting for the given event to be triggered</td>\n</tr>\n<tr>\n<td>Reset</td>\n<td>Event</td>\n<td>If this node is waiting for an event, triggering this event resets the node to normal</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>End</td>\n<td>Event</td>\n<td>Once the node is set to wait for an event, and then the given event has been triggered, this output event will trigger and the node will be set to normal</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unlabled</td>\n<td>Event Selector</td>\n<td>When this node is triggered, it waits for this event to be triggered. Once this occurs, the End output is triggered</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 37
    },
    {
      "path": "Nodes/Flow/Wait-For-Scene-Load.md",
      "url": "Nodes/Flow/Wait-For-Scene-Load.html",
      "content": "\r\n\r\n# Wait for Scene Load\r\n\r\n![Wait-For-Scene-Load](../../IMG/Wait-For-Scene-Load.png)\r\n\r\n## About\r\n\r\nWhen a scene loads, it often causes a temporary hitch in the framerate. All Unity audio is scheduled on the main thread, so this hitch can cause problems if audio is scheduled to play at the same time. Rather than playing audio as soon is it loads, it is wise to wait until the scene is loaded and then play audio. This node allows the user to wait for a scene to load before continuing execution.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nBegin Wait | Event | Once this event is triggered, the node will wait for a scene with the given name to load. Once the scene is loaded, the End Wait output will be triggered\r\nScene Name | String | The scene name this node will wait for before the End event is triggered. The value for this input can be set on the node, be read from the incoming port, or from an incoming event parameter on Begin Wait\r\nReset | Event | If this node is waiting for a scene to load, triggering this event will reset that wait. End Wait will not be triggered\r\n\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nEnd Wait | Event | This event is triggered once the Start event is triggered, and then the given scene has been loaded\r\n\r\n\r\n",
      "html": "<h1 id=\"wait-for-scene-load\">Wait for Scene Load <a class=\"heading-anchor-permalink\" href=\"#wait-for-scene-load\">#</a></h1>\n<p><img src=\"../../IMG/Wait-For-Scene-Load.png\" alt=\"Wait-For-Scene-Load\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When a scene loads, it often causes a temporary hitch in the framerate. All Unity audio is scheduled on the main thread, so this hitch can cause problems if audio is scheduled to play at the same time. Rather than playing audio as soon is it loads, it is wise to wait until the scene is loaded and then play audio. This node allows the user to wait for a scene to load before continuing execution.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Begin Wait</td>\n<td>Event</td>\n<td>Once this event is triggered, the node will wait for a scene with the given name to load. Once the scene is loaded, the End Wait output will be triggered</td>\n</tr>\n<tr>\n<td>Scene Name</td>\n<td>String</td>\n<td>The scene name this node will wait for before the End event is triggered. The value for this input can be set on the node, be read from the incoming port, or from an incoming event parameter on Begin Wait</td>\n</tr>\n<tr>\n<td>Reset</td>\n<td>Event</td>\n<td>If this node is waiting for a scene to load, triggering this event will reset that wait. End Wait will not be triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>End Wait</td>\n<td>Event</td>\n<td>This event is triggered once the Start event is triggered, and then the given scene has been loaded</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 38
    },
    {
      "path": "Nodes/Flow/Wait.md",
      "url": "Nodes/Flow/Wait.html",
      "content": "\r\n\r\n# Wait Node\r\n\r\n![Wait-Node](../../IMG/Wait-Node.png)\r\n\r\n## About\r\n\r\nWhen the Enter input is triggered, this node waits a set amount of time. After that time, the Exit output is triggered\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nEnter | Event | Triggers this node to begin waiting\r\nWait Time | Float | The amount of time this node waits once the Enter input is triggered\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nExit | Event | This event is triggered once the Enter input has been triggered, and the given time period has elapsed\r\n\r\n\r\n",
      "html": "<h1 id=\"wait-node\">Wait Node <a class=\"heading-anchor-permalink\" href=\"#wait-node\">#</a></h1>\n<p><img src=\"../../IMG/Wait-Node.png\" alt=\"Wait-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When the Enter input is triggered, this node waits a set amount of time. After that time, the Exit output is triggered</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enter</td>\n<td>Event</td>\n<td>Triggers this node to begin waiting</td>\n</tr>\n<tr>\n<td>Wait Time</td>\n<td>Float</td>\n<td>The amount of time this node waits once the Enter input is triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Exit</td>\n<td>Event</td>\n<td>This event is triggered once the Enter input has been triggered, and the given time period has elapsed</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 39
    },
    {
      "path": "Nodes/Logic/And.md",
      "url": "Nodes/Logic/And.html",
      "content": "\r\n\r\n# And Node\r\n\r\n![And-Node](../../IMG/And-Node.png)\r\n\r\n## About\r\n\r\nWhen all inputs into this node are True, the Value output reads True. If any are False, the Value output reads False\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInputs | List of Booleans | The input Booleans for this operation\r\n\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nValue | Boolean | The output Boolean\r\n\r\n",
      "html": "<h1 id=\"and-node\">And Node <a class=\"heading-anchor-permalink\" href=\"#and-node\">#</a></h1>\n<p><img src=\"../../IMG/And-Node.png\" alt=\"And-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When all inputs into this node are True, the Value output reads True. If any are False, the Value output reads False</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Inputs</td>\n<td>List of Booleans</td>\n<td>The input Booleans for this operation</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Boolean</td>\n<td>The output Boolean</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 40
    },
    {
      "path": "Nodes/Logic/Comparison.md",
      "url": "Nodes/Logic/Comparison.html",
      "content": "\r\n\r\n# Comparison Node\r\n\r\n![Comparison-Node](../../IMG/Comparison-Node.png)\r\n\r\n## About\r\n\r\nCompares the Value 1 input to the Value 2 input, according to the given Operator. The Result output is True or False, depending on that comparison.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue 1 | Any Type | The first input value for the comparison operation\r\nValue 2 | Any Type | The second input value for the comparison operation\r\n\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Boolean | The result of the given operation\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nOperator | Operation | The operation to perform on Value 1 and Value 2. The result of that operation can be read on the Result output\r\n\r\n\r\n",
      "html": "<h1 id=\"comparison-node\">Comparison Node <a class=\"heading-anchor-permalink\" href=\"#comparison-node\">#</a></h1>\n<p><img src=\"../../IMG/Comparison-Node.png\" alt=\"Comparison-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Compares the Value 1 input to the Value 2 input, according to the given Operator. The Result output is True or False, depending on that comparison.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value 1</td>\n<td>Any Type</td>\n<td>The first input value for the comparison operation</td>\n</tr>\n<tr>\n<td>Value 2</td>\n<td>Any Type</td>\n<td>The second input value for the comparison operation</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Boolean</td>\n<td>The result of the given operation</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Operator</td>\n<td>Operation</td>\n<td>The operation to perform on Value 1 and Value 2. The result of that operation can be read on the Result output</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 41
    },
    {
      "path": "Nodes/Logic/Not.md",
      "url": "Nodes/Logic/Not.html",
      "content": "\r\n\r\n# Not Node\r\n\r\n![Not-Node](../../IMG/Not-Node.png)\r\n\r\n## About\r\n\r\nReverses the given input Boolean. If the incoming Boolean is True the Output will be False; If the Input is False, the Output will be True \r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInput | Boolean | The input Boolean for this operation\r\n\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOutput | Boolean | The reversed Boolean to the Input\r\n\r\n\r\n",
      "html": "<h1 id=\"not-node\">Not Node <a class=\"heading-anchor-permalink\" href=\"#not-node\">#</a></h1>\n<p><img src=\"../../IMG/Not-Node.png\" alt=\"Not-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Reverses the given input Boolean. If the incoming Boolean is True the Output will be False; If the Input is False, the Output will be True</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Boolean</td>\n<td>The input Boolean for this operation</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Boolean</td>\n<td>The reversed Boolean to the Input</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 42
    },
    {
      "path": "Nodes/Logic/Or.md",
      "url": "Nodes/Logic/Or.html",
      "content": "\r\n\r\n# Or Node\r\n\r\n![Or-Node](../../IMG/Or-Node.png)\r\n\r\n## About\r\n\r\nWhen any input into this node are True, the Value output reads True. Otherwise, the Value output reads False\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nInput | List of Booleans | The input Booleans for this operation\r\n\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nValue | Boolean | The output Boolean\r\n\r\n\r\n",
      "html": "<h1 id=\"or-node\">Or Node <a class=\"heading-anchor-permalink\" href=\"#or-node\">#</a></h1>\n<p><img src=\"../../IMG/Or-Node.png\" alt=\"Or-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When any input into this node are True, the Value output reads True. Otherwise, the Value output reads False</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>List of Booleans</td>\n<td>The input Booleans for this operation</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Boolean</td>\n<td>The output Boolean</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 43
    },
    {
      "path": "Nodes/MIDI-Input/Get-Key.md",
      "url": "Nodes/MIDI-Input/Get-Key.html",
      "content": "\r\n\r\n# Get Key Node\r\n\r\n![Get-Key](../../IMG/Get-Key.png)\r\n\r\n## About\r\n\r\nThis node generates an event when a note on a MIDI deviced attached to this machine is interacted with.\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOn Trigger | Event | This event is triggered when the given note is interacted with\r\nVelocity | Float | The velocity of the note when On Trigger is triggered, ranging from 0 to 1\r\n\r\n## Options\r\nOption | Type | Description\r\n--- | --- | ---\r\nChannel | Channel Selector | The MIDI channel for this node to listen to\r\nTrigger type | Trigger Type Selector | If Note Down is selected, this node will execute On Trigger when the given note is first pressed. If Note Up is selected, it will trigger when the note is released\r\nNote | Integer | When this note is interacted with on the attached MIDI device, this node will execute the On Trigger event. The note can be entered using this field, or the user can press Listen for Key and then press the desired key on the MIDI device. This function will also change the MIDI channel to match the device\r\n\r\n## MIDI in builds\r\n\r\nBy default, nodes that read MIDI devices are disabled in builds. To turn on MIDI support outside of the editor, go to Edit->Project Settings->Layers Settings and check the  Enable MIDI in builds checkbox\r\n",
      "html": "<h1 id=\"get-key-node\">Get Key Node <a class=\"heading-anchor-permalink\" href=\"#get-key-node\">#</a></h1>\n<p><img src=\"../../IMG/Get-Key.png\" alt=\"Get-Key\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node generates an event when a note on a MIDI deviced attached to this machine is interacted with.</p>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On Trigger</td>\n<td>Event</td>\n<td>This event is triggered when the given note is interacted with</td>\n</tr>\n<tr>\n<td>Velocity</td>\n<td>Float</td>\n<td>The velocity of the note when On Trigger is triggered, ranging from 0 to 1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Channel</td>\n<td>Channel Selector</td>\n<td>The MIDI channel for this node to listen to</td>\n</tr>\n<tr>\n<td>Trigger type</td>\n<td>Trigger Type Selector</td>\n<td>If Note Down is selected, this node will execute On Trigger when the given note is first pressed. If Note Up is selected, it will trigger when the note is released</td>\n</tr>\n<tr>\n<td>Note</td>\n<td>Integer</td>\n<td>When this note is interacted with on the attached MIDI device, this node will execute the On Trigger event. The note can be entered using this field, or the user can press Listen for Key and then press the desired key on the MIDI device. This function will also change the MIDI channel to match the device</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"midi-in-builds\">MIDI in builds <a class=\"heading-anchor-permalink\" href=\"#midi-in-builds\">#</a></h2>\n<p>By default, nodes that read MIDI devices are disabled in builds. To turn on MIDI support outside of the editor, go to Edit-&gt;Project Settings-&gt;Layers Settings and check the  Enable MIDI in builds checkbox</p>\n",
      "id": 44
    },
    {
      "path": "Nodes/MIDI-Input/Get-knob.md",
      "url": "Nodes/MIDI-Input/Get-knob.html",
      "content": "\r\n\r\n# Get Knob Node\r\n\r\n![Get-Knob](../../IMG/Get-Knob.png)\r\n\r\n## About\r\n\r\nThis node generates an event when a Knob on a MIDI deviced attached to this machine is interacted with.\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOn Change | Event | This event is triggered when the given knob is interacted with\r\nKnob Value | Float | The value of the given knob\r\n\r\n## Options\r\nOption | Type | Description\r\n--- | --- | ---\r\nChannel | Channel Selector | The MIDI channel for this node to listen to\r\nKnob Number | Integer | When this knob is interacted with on the attached MIDI device, this node will execute the On Change event. The Knob number can be entered using this field, or the user can press Listen for Knob and then change the desired control on the MIDI device. This function will also change the MIDI channel to match the device\r\nStarting value | Float | This is the initial value that will be read on the Knob Value output. The value of this output will remain this number until the node receives the first change event from the MIDI device for this knob.\r\n\r\n## MIDI in builds\r\n\r\nBy default, nodes that read MIDI devices are disabled in builds. To turn on MIDI support outside of the editor, go to Edit->Project Settings->Layers Settings and check the  Enable MIDI in builds checkbox\r\n\r\n",
      "html": "<h1 id=\"get-knob-node\">Get Knob Node <a class=\"heading-anchor-permalink\" href=\"#get-knob-node\">#</a></h1>\n<p><img src=\"../../IMG/Get-Knob.png\" alt=\"Get-Knob\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node generates an event when a Knob on a MIDI deviced attached to this machine is interacted with.</p>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On Change</td>\n<td>Event</td>\n<td>This event is triggered when the given knob is interacted with</td>\n</tr>\n<tr>\n<td>Knob Value</td>\n<td>Float</td>\n<td>The value of the given knob</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Channel</td>\n<td>Channel Selector</td>\n<td>The MIDI channel for this node to listen to</td>\n</tr>\n<tr>\n<td>Knob Number</td>\n<td>Integer</td>\n<td>When this knob is interacted with on the attached MIDI device, this node will execute the On Change event. The Knob number can be entered using this field, or the user can press Listen for Knob and then change the desired control on the MIDI device. This function will also change the MIDI channel to match the device</td>\n</tr>\n<tr>\n<td>Starting value</td>\n<td>Float</td>\n<td>This is the initial value that will be read on the Knob Value output. The value of this output will remain this number until the node receives the first change event from the MIDI device for this knob.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"midi-in-builds\">MIDI in builds <a class=\"heading-anchor-permalink\" href=\"#midi-in-builds\">#</a></h2>\n<p>By default, nodes that read MIDI devices are disabled in builds. To turn on MIDI support outside of the editor, go to Edit-&gt;Project Settings-&gt;Layers Settings and check the  Enable MIDI in builds checkbox</p>\n",
      "id": 45
    },
    {
      "path": "Nodes/MIDI-Input/MIDI-Input.md",
      "url": "Nodes/MIDI-Input/MIDI-Input.html",
      "content": "\r\n\r\n# MIDI Input\r\n\r\n![Midi-Input](../../IMG/Midi-Input.png)\r\n\r\n## About\r\n\r\nThis node generates an event whenever any control on any attached MIDI device is interacted with\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nMIDI Output | Event | This event is triggered when an attached MIDI device is interacted with\r\n\r\n## MIDI in builds\r\n\r\nBy default, nodes that read MIDI devices are disabled in builds. To turn on MIDI support outside of the editor, go to Edit->Project Settings->Layers Settings and check the  Enable MIDI in builds checkbox\r\n\r\n\r\n",
      "html": "<h1 id=\"midi-input\">MIDI Input <a class=\"heading-anchor-permalink\" href=\"#midi-input\">#</a></h1>\n<p><img src=\"../../IMG/Midi-Input.png\" alt=\"Midi-Input\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node generates an event whenever any control on any attached MIDI device is interacted with</p>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MIDI Output</td>\n<td>Event</td>\n<td>This event is triggered when an attached MIDI device is interacted with</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"midi-in-builds\">MIDI in builds <a class=\"heading-anchor-permalink\" href=\"#midi-in-builds\">#</a></h2>\n<p>By default, nodes that read MIDI devices are disabled in builds. To turn on MIDI support outside of the editor, go to Edit-&gt;Project Settings-&gt;Layers Settings and check the  Enable MIDI in builds checkbox</p>\n",
      "id": 46
    },
    {
      "path": "Nodes/Math-Operations/Add.md",
      "url": "Nodes/Math-Operations/Add.html",
      "content": "\r\n\r\n# Add Node\r\n\r\n![Add-Node](../../IMG/Add-Node.png)\r\n\r\n## About\r\n\r\nThis node adds the given inputs together in the variables list. The output of this operation can be read on the Result output\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nVariables | List | The incoming values to perform this operation on\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Varies (Double/Float/Integer/Vector2/Vector3) | The output of this operation. The type of this output is set by the type selector\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Type Selector | This option sets the type of the incoming values of the variables list and the output value of the operation. Possible values are Double, Float, Integer, Vector2, and Vector3 \r\n\r\n",
      "html": "<h1 id=\"add-node\">Add Node <a class=\"heading-anchor-permalink\" href=\"#add-node\">#</a></h1>\n<p><img src=\"../../IMG/Add-Node.png\" alt=\"Add-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node adds the given inputs together in the variables list. The output of this operation can be read on the Result output</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Variables</td>\n<td>List</td>\n<td>The incoming values to perform this operation on</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Varies (Double/Float/Integer/Vector2/Vector3)</td>\n<td>The output of this operation. The type of this output is set by the type selector</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>This option sets the type of the incoming values of the variables list and the output value of the operation. Possible values are Double, Float, Integer, Vector2, and Vector3</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 47
    },
    {
      "path": "Nodes/Math-Operations/Clamp.md",
      "url": "Nodes/Math-Operations/Clamp.html",
      "content": "\r\n\r\n# Clamp Node\r\n\r\n![Clamp-Node](../../IMG/Clamp-Node.png)\r\n\r\n## About\r\n\r\nThis node clamps the value on the Value input between Min and Max \r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue | Float | The value to be clamped\r\nMin | Float | The minimum value of the clamping operation. If the Value input is less than Min, the result will be equal to Min\r\nMax | Float | The maximum value of the clamping operation. If the Value input is greater than Max, the result will be equal to Max\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Float | Value, clamped between Min and Max\r\n\r\n\r\n",
      "html": "<h1 id=\"clamp-node\">Clamp Node <a class=\"heading-anchor-permalink\" href=\"#clamp-node\">#</a></h1>\n<p><img src=\"../../IMG/Clamp-Node.png\" alt=\"Clamp-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node clamps the value on the Value input between Min and Max</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Float</td>\n<td>The value to be clamped</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>Float</td>\n<td>The minimum value of the clamping operation. If the Value input is less than Min, the result will be equal to Min</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>Float</td>\n<td>The maximum value of the clamping operation. If the Value input is greater than Max, the result will be equal to Max</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Float</td>\n<td>Value, clamped between Min and Max</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 48
    },
    {
      "path": "Nodes/Math-Operations/Divide.md",
      "url": "Nodes/Math-Operations/Divide.html",
      "content": "\r\n\r\n# Divide Node\r\n\r\n## About\r\n\r\nThis node performs division on the inputs. The Divide node has multiple modes depending on the selected input type. For example, the Float type can be divide by floats, so the Divide node presents a list of float inputs, where the first gets divided by the second, which gets divided by the third, etc. Vector3s on the other hand can be divided by other Vector3s as well as numeric types. In this case a secondary type selector is shown so the user can select the divisor type.\r\n\r\n## Mode 1\r\n![Divide-Node-Mode-1](../../IMG/Divide-Node-Mode-1.png)\r\n\r\nThis mode is used for Float, Double, and Integer types\r\n\r\n### Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nVariables | List (Type can vary) | The list of inputs to divide. Each input is divided by the subsequent input\r\n\r\n### Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Varies | The result of this operation\r\n\r\n### Options\r\n\r\n| Option  | Type          | Description                                                  |\r\n| ------- | ------------- | ------------------------------------------------------------ |\r\n| Unnamed | Type Selector | The type of the numerators and denominators for this division operation |\r\n\r\n## Mode 2\r\n![Divide-Node-Mode-2](../../IMG/Divide-Node-Mode-2.png)\r\n\r\nThis mode is used for Vector3 types\r\n\r\n### Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue | Varies | The numerator\r\nValue | Varies | The Denominator\r\n\r\n### Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Varies | The result of this operation\r\n\r\n### Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Type Selector | The type of the numerator for this operation.\r\nUnnamed | Type Selector | The type of the denominator for this operation.\r\n\r\n",
      "html": "<h1 id=\"divide-node\">Divide Node <a class=\"heading-anchor-permalink\" href=\"#divide-node\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node performs division on the inputs. The Divide node has multiple modes depending on the selected input type. For example, the Float type can be divide by floats, so the Divide node presents a list of float inputs, where the first gets divided by the second, which gets divided by the third, etc. Vector3s on the other hand can be divided by other Vector3s as well as numeric types. In this case a secondary type selector is shown so the user can select the divisor type.</p>\n<h2 id=\"mode-1\">Mode 1 <a class=\"heading-anchor-permalink\" href=\"#mode-1\">#</a></h2>\n<p><img src=\"../../IMG/Divide-Node-Mode-1.png\" alt=\"Divide-Node-Mode-1\"></p>\n<p>This mode is used for Float, Double, and Integer types</p>\n<h3 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Variables</td>\n<td>List (Type can vary)</td>\n<td>The list of inputs to divide. Each input is divided by the subsequent input</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Varies</td>\n<td>The result of this operation</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>The type of the numerators and denominators for this division operation</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mode-2\">Mode 2 <a class=\"heading-anchor-permalink\" href=\"#mode-2\">#</a></h2>\n<p><img src=\"../../IMG/Divide-Node-Mode-2.png\" alt=\"Divide-Node-Mode-2\"></p>\n<p>This mode is used for Vector3 types</p>\n<h3 id=\"inputs-2\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Varies</td>\n<td>The numerator</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Varies</td>\n<td>The Denominator</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs-2\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Varies</td>\n<td>The result of this operation</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options-2\">Options <a class=\"heading-anchor-permalink\" href=\"#options-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>The type of the numerator for this operation.</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>The type of the denominator for this operation.</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 49
    },
    {
      "path": "Nodes/Math-Operations/Inverse-Lerp.md",
      "url": "Nodes/Math-Operations/Inverse-Lerp.html",
      "content": "\r\n\r\n# Inverse Lerp Node\r\n\r\n![Inverse-Lerp-Node](../../IMG/Inverse-Lerp-Node.png)\r\n\r\n## About\r\n\r\nThis node performs an inverse linear interpolation on the input values. It takes an input number from Value, ranging from 0 to 1, and maps it to a value between the From input and the To input\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue | Float | The incoming value for inverse linear interpolation\r\nFrom | Float | The lower end of the range Value is mapped to\r\nTo | Float| The upper end of the range Value is mapped to\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Float | The result of the inverse linear interpolation operation\r\n\r\n\r\n",
      "html": "<h1 id=\"inverse-lerp-node\">Inverse Lerp Node <a class=\"heading-anchor-permalink\" href=\"#inverse-lerp-node\">#</a></h1>\n<p><img src=\"../../IMG/Inverse-Lerp-Node.png\" alt=\"Inverse-Lerp-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node performs an inverse linear interpolation on the input values. It takes an input number from Value, ranging from 0 to 1, and maps it to a value between the From input and the To input</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Float</td>\n<td>The incoming value for inverse linear interpolation</td>\n</tr>\n<tr>\n<td>From</td>\n<td>Float</td>\n<td>The lower end of the range Value is mapped to</td>\n</tr>\n<tr>\n<td>To</td>\n<td>Float</td>\n<td>The upper end of the range Value is mapped to</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Float</td>\n<td>The result of the inverse linear interpolation operation</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 50
    },
    {
      "path": "Nodes/Math-Operations/Lerp.md",
      "url": "Nodes/Math-Operations/Lerp.html",
      "content": "\r\n\r\n# Lerp Node\r\n\r\n![Lerp-Node](../../IMG/Lerp-Node.png)\r\n\r\n## About\r\n\r\nThis node performs a linear interpolation on the input values. It takes an input number from Value between the From input and the To input, and maps it to a number between 0 and 1.\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue | Float | The incoming value for linear interpolation\r\nFrom | Float | The lower end of the range\r\nTo | Float| The upper end of the range\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Float | The result of the linear interpolation operation\r\n\r\n\r\n",
      "html": "<h1 id=\"lerp-node\">Lerp Node <a class=\"heading-anchor-permalink\" href=\"#lerp-node\">#</a></h1>\n<p><img src=\"../../IMG/Lerp-Node.png\" alt=\"Lerp-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node performs a linear interpolation on the input values. It takes an input number from Value between the From input and the To input, and maps it to a number between 0 and 1.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Float</td>\n<td>The incoming value for linear interpolation</td>\n</tr>\n<tr>\n<td>From</td>\n<td>Float</td>\n<td>The lower end of the range</td>\n</tr>\n<tr>\n<td>To</td>\n<td>Float</td>\n<td>The upper end of the range</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Float</td>\n<td>The result of the linear interpolation operation</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 51
    },
    {
      "path": "Nodes/Math-Operations/Magnitude.md",
      "url": "Nodes/Math-Operations/Magnitude.html",
      "content": "\r\n\r\n# Magnitude\r\n\r\n![Magnitude-Node](../../IMG/Magnitude-Node.png)\r\n\r\n## About\r\n\r\nThis node takes a Vector3 as input, and outputs the length of the vector. The length of a vector is the square root of (x\\*x + y\\*y+z\\*z)\r\n\r\n## Inputs\r\n\r\n| Input | Type    | Description          |\r\n| ----- | ------- | -------------------- |\r\n| Input | Vector3 | The incoming Vector3 |\r\n\r\n## Outputs\r\n\r\n| Output | Type  | Description              |\r\n| ------ | ----- | ------------------------ |\r\n| Output | Float | The length of the vector |\r\n\r\n",
      "html": "<h1 id=\"magnitude\">Magnitude <a class=\"heading-anchor-permalink\" href=\"#magnitude\">#</a></h1>\n<p><img src=\"../../IMG/Magnitude-Node.png\" alt=\"Magnitude-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node takes a Vector3 as input, and outputs the length of the vector. The length of a vector is the square root of (x*x + y*y+z*z)</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Vector3</td>\n<td>The incoming Vector3</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Float</td>\n<td>The length of the vector</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 52
    },
    {
      "path": "Nodes/Math-Operations/Multiply.md",
      "url": "Nodes/Math-Operations/Multiply.html",
      "content": "\r\n\r\n# Multiply Node\r\n\r\n## About\r\n\r\nThis node performs multiplication on the inputs. The Multiply node has multiple modes depending on the selected input type. For example, the Float type can be multiplied by floats, so the Multiply node presents a list of float inputs, where the first gets Multiplied by the second, which gets multiplied by the third, etc. Vector3s on the other hand can be multiplied by other Vector3s as well as numeric types. In this case a secondary type selector is shown so the user can select the operand type.\r\n\r\n## Mode 1\r\n![Multiply-Node-Mode-1](../../IMG/Multiply-Node-Mode-1.png)\r\n\r\nThis mode is used for Float, Double, and Integer types\r\n\r\n### Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nVariables | List (Type can vary) | The list of inputs to multiply. Each input is multiplied by the subsequent input\r\n\r\n### Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Varies | The result of this operation\r\n\r\n### Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Type Selector | The type of the operands for this multiplication operation.\r\n\r\n\r\n## Mode 2\r\n![Multiply-Node-Mode-2](../../IMG/Multiply-Node-Mode-2.png)\r\n\r\nThis mode is used for Vector3 types\r\n\r\n### Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue | Varies | The first item to multiply\r\nValue | Varies | The second item to multiply\r\n\r\n### Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Varies | The result of this operation\r\n\r\n### Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Type Selector | The type of the first number to multiply for this operation.\r\nUnnamed | Type Selector | The type of the second number to multiply for this operation.\r\n\r\n\r\n",
      "html": "<h1 id=\"multiply-node\">Multiply Node <a class=\"heading-anchor-permalink\" href=\"#multiply-node\">#</a></h1>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node performs multiplication on the inputs. The Multiply node has multiple modes depending on the selected input type. For example, the Float type can be multiplied by floats, so the Multiply node presents a list of float inputs, where the first gets Multiplied by the second, which gets multiplied by the third, etc. Vector3s on the other hand can be multiplied by other Vector3s as well as numeric types. In this case a secondary type selector is shown so the user can select the operand type.</p>\n<h2 id=\"mode-1\">Mode 1 <a class=\"heading-anchor-permalink\" href=\"#mode-1\">#</a></h2>\n<p><img src=\"../../IMG/Multiply-Node-Mode-1.png\" alt=\"Multiply-Node-Mode-1\"></p>\n<p>This mode is used for Float, Double, and Integer types</p>\n<h3 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Variables</td>\n<td>List (Type can vary)</td>\n<td>The list of inputs to multiply. Each input is multiplied by the subsequent input</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Varies</td>\n<td>The result of this operation</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>The type of the operands for this multiplication operation.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mode-2\">Mode 2 <a class=\"heading-anchor-permalink\" href=\"#mode-2\">#</a></h2>\n<p><img src=\"../../IMG/Multiply-Node-Mode-2.png\" alt=\"Multiply-Node-Mode-2\"></p>\n<p>This mode is used for Vector3 types</p>\n<h3 id=\"inputs-2\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Varies</td>\n<td>The first item to multiply</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Varies</td>\n<td>The second item to multiply</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs-2\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Varies</td>\n<td>The result of this operation</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options-2\">Options <a class=\"heading-anchor-permalink\" href=\"#options-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>The type of the first number to multiply for this operation.</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>The type of the second number to multiply for this operation.</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 53
    },
    {
      "path": "Nodes/Math-Operations/Random-Number.md",
      "url": "Nodes/Math-Operations/Random-Number.html",
      "content": "\r\n\r\n# Get Random Number Node\r\n\r\n![Random-Number-Node](../../IMG/Random-Number-Node.png)\r\n\r\n## About\r\n\r\nWhen this node is executed, a random number between the From and To inputs is generated. This number can be read on the Random Number output.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nGet Number | Event | When this event is triggered, the node generates a new random number\r\nFrom | Float or Integer | The smallest number the node can randomly generate. The type of this input changes depending on the selected output Type\r\nTo | Float or Integer | The largest number the node can randomly generate. The type of this input changes depending on the selected output Type\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nOn Changed | Event | This event is triggered whenever a new random number is generated\r\nValue | Float or Integer | The random number. The type of this input changes deoending on the selected output Type\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nType | Type Selector | The type of the randomly generated number\r\n\r\n\r\n",
      "html": "<h1 id=\"get-random-number-node\">Get Random Number Node <a class=\"heading-anchor-permalink\" href=\"#get-random-number-node\">#</a></h1>\n<p><img src=\"../../IMG/Random-Number-Node.png\" alt=\"Random-Number-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When this node is executed, a random number between the From and To inputs is generated. This number can be read on the Random Number output.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get Number</td>\n<td>Event</td>\n<td>When this event is triggered, the node generates a new random number</td>\n</tr>\n<tr>\n<td>From</td>\n<td>Float or Integer</td>\n<td>The smallest number the node can randomly generate. The type of this input changes depending on the selected output Type</td>\n</tr>\n<tr>\n<td>To</td>\n<td>Float or Integer</td>\n<td>The largest number the node can randomly generate. The type of this input changes depending on the selected output Type</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On Changed</td>\n<td>Event</td>\n<td>This event is triggered whenever a new random number is generated</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Float or Integer</td>\n<td>The random number. The type of this input changes deoending on the selected output Type</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Type</td>\n<td>Type Selector</td>\n<td>The type of the randomly generated number</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 54
    },
    {
      "path": "Nodes/Math-Operations/Remap-to-Curve.md",
      "url": "Nodes/Math-Operations/Remap-to-Curve.html",
      "content": "\r\n\r\n# Remap To Curve\r\n\r\n![Remap-To-Curve](../../IMG/Remap-To-Curve.png)\r\n\r\n## About\r\n\r\nThis node evaluates the input node against the given code. The node maps the input to the x-axis of the curve graph, and then outputs the y-value of the curve at that point.\r\n\r\n## Inputs\r\n\r\n| Input | Type  | Description     |\r\n| ----- | ----- | --------------- |\r\n| Input | Float | The input value |\r\n\r\n## Outputs\r\n\r\n| Output | Type  | Description      |\r\n| ------ | ----- | ---------------- |\r\n| Output | Float | The output value |\r\n\r\n## Options\r\n\r\n| Option | Type            | Description                           |\r\n| ------ | --------------- | ------------------------------------- |\r\n| Curve  | Animation Curve | The curve used to generate the output |\r\n\r\n",
      "html": "<h1 id=\"remap-to-curve\">Remap To Curve <a class=\"heading-anchor-permalink\" href=\"#remap-to-curve\">#</a></h1>\n<p><img src=\"../../IMG/Remap-To-Curve.png\" alt=\"Remap-To-Curve\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node evaluates the input node against the given code. The node maps the input to the x-axis of the curve graph, and then outputs the y-value of the curve at that point.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Float</td>\n<td>The input value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Float</td>\n<td>The output value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Curve</td>\n<td>Animation Curve</td>\n<td>The curve used to generate the output</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 55
    },
    {
      "path": "Nodes/Math-Operations/Remap.md",
      "url": "Nodes/Math-Operations/Remap.html",
      "content": "\r\n\r\n# Remap\r\n\r\n![Remap-Node](../../IMG/Remap-Node.png)\r\n\r\n## About\r\n\r\nThis node takes an input value between a minimum and maximum and transforms it to be between a different minimum and maximum. For example, given an input minimum/maximum of [0,10] and an output minimum/maximum of [0/100], an input value of 10 will yield an output value of 100.\r\n\r\n## Inputs\r\n\r\n| Input       | Type  | Description                     |\r\n| ----------- | ----- | ------------------------------- |\r\n| Input Value | Float | The input value to be remapped  |\r\n| Input Min   | Float | The minimum of the input range  |\r\n| Input Max   | Float | The maximum of the input range  |\r\n| Output Min  | Float | The minimum of the output range |\r\n| Output Max  | Float | The maximum of the output range |\r\n\r\n## Outputs\r\n\r\n| Output       | Type  | Description      |\r\n| ------------ | ----- | ---------------- |\r\n| Output Value | Float | The output value |\r\n\r\n",
      "html": "<h1 id=\"remap\">Remap <a class=\"heading-anchor-permalink\" href=\"#remap\">#</a></h1>\n<p><img src=\"../../IMG/Remap-Node.png\" alt=\"Remap-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node takes an input value between a minimum and maximum and transforms it to be between a different minimum and maximum. For example, given an input minimum/maximum of [0,10] and an output minimum/maximum of [0/100], an input value of 10 will yield an output value of 100.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input Value</td>\n<td>Float</td>\n<td>The input value to be remapped</td>\n</tr>\n<tr>\n<td>Input Min</td>\n<td>Float</td>\n<td>The minimum of the input range</td>\n</tr>\n<tr>\n<td>Input Max</td>\n<td>Float</td>\n<td>The maximum of the input range</td>\n</tr>\n<tr>\n<td>Output Min</td>\n<td>Float</td>\n<td>The minimum of the output range</td>\n</tr>\n<tr>\n<td>Output Max</td>\n<td>Float</td>\n<td>The maximum of the output range</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output Value</td>\n<td>Float</td>\n<td>The output value</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 56
    },
    {
      "path": "Nodes/Math-Operations/Repeat.md",
      "url": "Nodes/Math-Operations/Repeat.html",
      "content": "\r\n\r\n# Repeat Node\r\n\r\n![Repeat-Node](../../IMG/Repeat-Node.png)\r\n\r\n## About\r\n\r\nThis node repeats the input Value between 0 and the Length input\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nValue | Float or Integer | The incoming value. The type of this input changes according to the Type option\r\nLength | Float or Integer | The repeat length. If the Value input is greater than Length, it loops back around to zero. The type of this input changes according to the Type option\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Float or Integer | The repeated value. The type of this input changes according to the Type option\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nType | Type Selector | The type of the input and output numbers\r\n\r\n\r\n",
      "html": "<h1 id=\"repeat-node\">Repeat Node <a class=\"heading-anchor-permalink\" href=\"#repeat-node\">#</a></h1>\n<p><img src=\"../../IMG/Repeat-Node.png\" alt=\"Repeat-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node repeats the input Value between 0 and the Length input</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Float or Integer</td>\n<td>The incoming value. The type of this input changes according to the Type option</td>\n</tr>\n<tr>\n<td>Length</td>\n<td>Float or Integer</td>\n<td>The repeat length. If the Value input is greater than Length, it loops back around to zero. The type of this input changes according to the Type option</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Float or Integer</td>\n<td>The repeated value. The type of this input changes according to the Type option</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Type</td>\n<td>Type Selector</td>\n<td>The type of the input and output numbers</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 57
    },
    {
      "path": "Nodes/Math-Operations/Subtract.md",
      "url": "Nodes/Math-Operations/Subtract.html",
      "content": "\r\n\r\n# Subtract Node\r\n\r\n![Subtract-Node](../../IMG/Subtract-Node.png)\r\n\r\n## About\r\n\r\nThis node subtracts the given inputs together in the variables list. The output of this operation can be read on the Result output\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nVariables | List | The incoming values to perform this operation on\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nResult | Varies | The output of this operation. The type of this output is set by the type selector\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Type Selector | This option sets the type of the incoming values of the variables list and the output value of the operation.\r\n\r\n\r\n",
      "html": "<h1 id=\"subtract-node\">Subtract Node <a class=\"heading-anchor-permalink\" href=\"#subtract-node\">#</a></h1>\n<p><img src=\"../../IMG/Subtract-Node.png\" alt=\"Subtract-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node subtracts the given inputs together in the variables list. The output of this operation can be read on the Result output</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Variables</td>\n<td>List</td>\n<td>The incoming values to perform this operation on</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Varies</td>\n<td>The output of this operation. The type of this output is set by the type selector</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Type Selector</td>\n<td>This option sets the type of the incoming values of the variables list and the output value of the operation.</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 58
    },
    {
      "path": "Nodes/Playback/Audio-Out.md",
      "url": "Nodes/Playback/Audio-Out.html",
      "content": "\r\n\r\n# Audio Out Node\r\n\r\n![Audio-Out](../../IMG/Audio-Out.png)\r\n\r\n## About\r\n\r\nNodes that generate audio, like the Play or Sampler nodes, send audio to Audio Out nodes for playback. The Audio Out node has all of the controls determining how audio is played back, like the final playback volume, pan, position, the output mixer, spatialization, etc.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nAudio In | Audio | The audio that is played back through this Audio Out. Note that nodes that are using this Audio Out for playback don't necessarily need to be connected to this input. Audio outputs can \"send\" audio without a visible connection to prevent the graph from getting cluttered. Audio outputs that are sending this way are counted to the right of this input's label. This input is hidden when the Settings Source option is set to Input.\r\nVolume | Float | This is the playback volume, ranging from 0 to 1. Note that nodes that output audio may have their own volume controls that factor into their final volume. This input is hidden when the Settings Source option is set to Input.\r\nPitch | Float | This control enables the user to pitch-shift incoming volume. It ranges from 0 to 3. This input is hidden when the Settings Source option is set to Input.\r\nStereo Pan | Float | This control influences how much of the sound plays through the left or right speakers. Note that nodes that output audio may have their own pan controls that influence their final panning. This input is hidden when the Settings Source option is set to Input.\r\nAudio Mixer Group | Audio Mixer Group | The audio mixer group that incoming audio will play through. This input is hidden when the Settings Source option is set to Input.\r\nBypass Effects | Boolean | Incoming audio will bypass effects when true. The effects may be from filter components or global listener filters. This input is hidden when the Settings Source option is set to Input.\r\nBypass Listener Effects | Boolean | Bypasses global effects on the audio listener when true. This input is hidden when the Settings Source option is set to Input.\r\nBypass Reverb Zones | Boolean | When True, reverb zones are not applied to audio played through this Audio Out. This input is hidden when the Settings Source option is set to Input.\r\nPriority | Integer | Unity virtualizes audio sources when more audio sources are in use then available hardware channels. This control influences which audio sources are virtualized first. It ranges from 0 to 255. This input is hidden when the Settings Source option is set to Input.\r\nWorld Position | Vector3 | The world position that incoming audio will play at. Note that this option is only available when the Play at Transform input has no value. This input is hidden when the Settings Source option is set to Input.\r\nPlay at Transform | Transform | If set, audio will playback at the position of this transform. Note that this option is only available when the World Position input has no value. This input is hidden when the Settings Source option is set to Input.\r\nReverb Zone Mix | Float or Curve | The amount that the incoming audio will be mixed a reverb zone. This can be specified as a float, or as a curve representing the reverb mix versus the distance from the listener to the audio source. This input is hidden when the Settings Source option is set to Input.\r\nSpatial Blend | Float or Curve | How much the incoming audio is subject to spatialization. A value of 0 results in fully 2D audio, and a value of 1 results in fully spatialized audio. This can be specified as a float, or as a curve representing the spatial blend versus the distance from the listener to the audio source. This input is hidden when the Settings Source option is set to Input.\r\nSpread | Float or Curve | The spread angle of the audio in degrees. This can be specified as a float, or as a curve representing the spread angle versus the distance from the listener to the audio source. This input is hidden when the Settings Source option is set to Input.\r\nVolume Rolloff settings | Float or Curve | The rate at which incoming audio attenuates. This can be specified as a logarithmic curve, a linear falloff, or as a custom curve. This input is hidden when the Settings Source option is set to Input.\r\n\r\nNote that each of these options can be set, either as incoming values on inputs, on the node itself, or as parameters in the events triggering audio playback on the nodes sending audio to the Audio Out.\r\n\r\n## Options\r\nOption | Type| Description\r\n------------ | -------|------\r\nSettings Source | Setting Source Selector | The settings for this Audio Out may either be set on the node itself, or be passed in using the Audio Settings input. This is useful for sharing settings across Audio Out nodes.\r\nShare Settings | Share Settings Selector | There are two modes for how playback settings are handled, Share Settings and Instance Settings. In share settings mode, the inputs are read continuously and are immediately applied to all audio playing through the Audio Out. For example, if the input to the World Position input is continuously changing, all audio currently playing through the Audio Out will play back at that position and follow it as it changes. In Instance Settings mode, Inputs are read each time new audio plays through the Audio Out, and the new values are only applied to that new audio. For example, if World Position is set, and one piece of audio is sent to the Audio Out, then the World position is changed and another piece of audio is sent, the two pieces of audio will play back in different positions.\r\n3D Audio | Curves | This dropdown curve editor allows the user to manually edit the Reverb Zone Mix, Spatial Blend, Spread, and Volume Rolloff curves.\r\n\r\n\r\n\r\n",
      "html": "<h1 id=\"audio-out-node\">Audio Out Node <a class=\"heading-anchor-permalink\" href=\"#audio-out-node\">#</a></h1>\n<p><img src=\"../../IMG/Audio-Out.png\" alt=\"Audio-Out\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Nodes that generate audio, like the Play or Sampler nodes, send audio to Audio Out nodes for playback. The Audio Out node has all of the controls determining how audio is played back, like the final playback volume, pan, position, the output mixer, spatialization, etc.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Audio In</td>\n<td>Audio</td>\n<td>The audio that is played back through this Audio Out. Note that nodes that are using this Audio Out for playback don’t necessarily need to be connected to this input. Audio outputs can “send” audio without a visible connection to prevent the graph from getting cluttered. Audio outputs that are sending this way are counted to the right of this input’s label. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Volume</td>\n<td>Float</td>\n<td>This is the playback volume, ranging from 0 to 1. Note that nodes that output audio may have their own volume controls that factor into their final volume. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Pitch</td>\n<td>Float</td>\n<td>This control enables the user to pitch-shift incoming volume. It ranges from 0 to 3. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Stereo Pan</td>\n<td>Float</td>\n<td>This control influences how much of the sound plays through the left or right speakers. Note that nodes that output audio may have their own pan controls that influence their final panning. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Audio Mixer Group</td>\n<td>Audio Mixer Group</td>\n<td>The audio mixer group that incoming audio will play through. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Bypass Effects</td>\n<td>Boolean</td>\n<td>Incoming audio will bypass effects when true. The effects may be from filter components or global listener filters. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Bypass Listener Effects</td>\n<td>Boolean</td>\n<td>Bypasses global effects on the audio listener when true. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Bypass Reverb Zones</td>\n<td>Boolean</td>\n<td>When True, reverb zones are not applied to audio played through this Audio Out. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Priority</td>\n<td>Integer</td>\n<td>Unity virtualizes audio sources when more audio sources are in use then available hardware channels. This control influences which audio sources are virtualized first. It ranges from 0 to 255. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>World Position</td>\n<td>Vector3</td>\n<td>The world position that incoming audio will play at. Note that this option is only available when the Play at Transform input has no value. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Play at Transform</td>\n<td>Transform</td>\n<td>If set, audio will playback at the position of this transform. Note that this option is only available when the World Position input has no value. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Reverb Zone Mix</td>\n<td>Float or Curve</td>\n<td>The amount that the incoming audio will be mixed a reverb zone. This can be specified as a float, or as a curve representing the reverb mix versus the distance from the listener to the audio source. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Spatial Blend</td>\n<td>Float or Curve</td>\n<td>How much the incoming audio is subject to spatialization. A value of 0 results in fully 2D audio, and a value of 1 results in fully spatialized audio. This can be specified as a float, or as a curve representing the spatial blend versus the distance from the listener to the audio source. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Spread</td>\n<td>Float or Curve</td>\n<td>The spread angle of the audio in degrees. This can be specified as a float, or as a curve representing the spread angle versus the distance from the listener to the audio source. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n<tr>\n<td>Volume Rolloff settings</td>\n<td>Float or Curve</td>\n<td>The rate at which incoming audio attenuates. This can be specified as a logarithmic curve, a linear falloff, or as a custom curve. This input is hidden when the Settings Source option is set to Input.</td>\n</tr>\n</tbody>\n</table>\n<p>Note that each of these options can be set, either as incoming values on inputs, on the node itself, or as parameters in the events triggering audio playback on the nodes sending audio to the Audio Out.</p>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Settings Source</td>\n<td>Setting Source Selector</td>\n<td>The settings for this Audio Out may either be set on the node itself, or be passed in using the Audio Settings input. This is useful for sharing settings across Audio Out nodes.</td>\n</tr>\n<tr>\n<td>Share Settings</td>\n<td>Share Settings Selector</td>\n<td>There are two modes for how playback settings are handled, Share Settings and Instance Settings. In share settings mode, the inputs are read continuously and are immediately applied to all audio playing through the Audio Out. For example, if the input to the World Position input is continuously changing, all audio currently playing through the Audio Out will play back at that position and follow it as it changes. In Instance Settings mode, Inputs are read each time new audio plays through the Audio Out, and the new values are only applied to that new audio. For example, if World Position is set, and one piece of audio is sent to the Audio Out, then the World position is changed and another piece of audio is sent, the two pieces of audio will play back in different positions.</td>\n</tr>\n<tr>\n<td>3D Audio</td>\n<td>Curves</td>\n<td>This dropdown curve editor allows the user to manually edit the Reverb Zone Mix, Spatial Blend, Spread, and Volume Rolloff curves.</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 59
    },
    {
      "path": "Nodes/Playback/Play.md",
      "url": "Nodes/Playback/Play.html",
      "content": "\r\n\r\n# Play Node\r\n\r\n\r\n\r\n![Play Node](../../IMG/Play-Node.png)\r\n\r\n## About\r\n\r\nThe Play node is the primary method of sequencing and playing audio and MIDI. It is also capable of sequencing events.\r\n\r\n## The Play Node Timeline\r\n![Play-Node-Timeline](../../IMG/Play-Node-Timeline.png)\r\n\r\n\r\n\r\nThe Play node timeline is where sequencing for the Play Node takes place. Press the Open button on the Play node to open the timeline.\r\n\r\n### The Track Area\r\nIn the middle of the Play Node Timeline window is the track area for the Play Node. These tracks behave similarly to tracks in a Digital Audio Workstation. Timeline elements can be dragged around the timeline, resized, and looped.\r\n\r\nOn the left hand side of each track are the track controls. The volume and pan can be adjusted per track. Tracks can also be named for organization purposes. Clicking on the Eye icon, users can set the track to visible, which displays the track and its audio and event outputs on the Play Node.\r\n\r\n### Timeline elements\r\nThe timeline window support several different element types.\r\n\r\n#### Audio Clip\r\nAudio clips can be dragged into the timeline from the Unity Project browser, or by right clicking on the timeline and selecting Add Audio Clip. Audio Clips play through the Audio Out output in the Play node's Combined Audio Bus, as well as the track's Audio Out if the track is exposed in the Play node. Advanced options for the audio clip can be accessed by right clicking and selecting edit. The following options are available:\r\n* Audio Clip -The audio clip attached to this timeline element. This field lets you swap out the audio clip for this timeline element.\r\n* Expose in node - Enables dynamic data swapping by exposing this audio clip in the play node. See Dynamic Data Swapping, below.\r\n* Start time - The time the audio clip starts playing\r\n* Length - The amount of time the audio clip will play for. If Length is longer then the source audio clip's length, the audio will loop. If it is shorter, the clip will end playback early.\r\nTime Offset - Shifts the playback time of the audio clip within the timeline element. For example, if Time Offset is set to 1 second, the \"beginning\" of the timeline element will be 1 second into the audio clip's playback.\r\n\r\n#### MIDI File\r\nMIDI Files can be dragged into the timeline from the Unity Project browser, or by right clicking on the timeline and selecting Add MIDI File. Each MIDI note plays as an event through the Event Out output in the Play node's Combined Audio Bus, as well as the track's Event Out if the track is exposed in the Play node. Each event will have the note number, channel, and velocity of the note that created it.\r\n\r\nAdvanced options for the MIDI File can be accessed by right clicking and selecting edit. The following options are available:\r\n* MIDI File -The MIDI File attached to this timeline element. This field lets you swap out the MIDI File for this timeline element.\r\n* Expose in node - Enables dynamic data swapping by exposing this MIDI file in the play node. See Dynamic Data Swapping, below.\r\n* Start time - The time the MIDI file starts playing\r\n* Length - The amount of time the MIDI file will play for. If Length is longer then the source file's length, it will loop. If it is shorter, the file will end playback early.\r\nTime Offset - Shifts the playback time of the MIDI file within the timeline element. For example, if Time Offset is set to 1 second, the \"beginning\" of the timeline element will be 1 second into the MIDI file's playback.\r\n\r\n#### Event\r\nEvent timeline elements provide a simple way of triggering events from the timeline. To add an event, right click on the timeline and select Add Event. Timeline events are played back on the Event Out in Play node's Combined Audio Bus, as well as the Track Event out if the track is exposed. To access the Event element's options, right click on the event and select Edit. The following options are available:\r\n* Label - The label used to identify this event on the timeline\r\n* Time - The time this event occurs.\r\n* Event Parameters - The event parameters to pass on with this event when triggered. Note that parameter names must be unique for each event.\r\n\r\n#### Loop\r\nLoop timeline elements enable looping within the timeline. To add a loop, right click on the timeline and select Add Loop. Loops add a boolean input to the Play node called Can Exit Loop. When the Can Exit Loop input is false, playback loops within the range of the Loop element. When Can Exit Loop is true, playback will proceed.\r\n\r\nAdvanced options for the loop can be accessed by right clicking on the loop range and selecting Edit. The following options are available:\r\n* Label - The name used to identify the loop in the timeline and the Play node\r\n* Time - The start time for the loop\r\n* Length - The length of the loop's time range.\r\n\r\n### The End of Playback Marker\r\nIn addition to timeline elements, the Track Area also contains the end of playback marker. This marker is a vertical line representing the time of playback where the Play Finished Output of the Play node is called.\r\n\r\nNote that timeline elements that extend past the end of playback marker will continue to play, even if the end of playback marker has been reached. This is useful in situations where, for example, reverb is baked into the audio file being played and needs to be accounted for. The next node in the sequence needs to be triggered, but the audio clip needs to keep playing to avoid cutting off the reverb.\r\n\r\n### Time Signature and BPM Area\r\nAt the top of the window is the BPM and Time signature bar. Time signatures and BPMs can be used in conjunction with snapping to align timeline elements. The left side of the bar contains the starting BPM and the starting time signature for the timeline. BPM and time signature change markesrs can be used to change the BPM or time signature mid-track. To add a new marker right click on the bar (at the top for BPM, at the bottom for time signatures) and add the marker.\r\n\r\n### Snapping\r\nAt the bottom right of the Play Node Timeline are the snapping controls. Snapping can be performed using a variety of time divisions, all based on the BPM and Time signatures set in the time signature and BPM area. Timeline elements can also snap to the start and end of other timeline elements. To activate snapping, hold CTRL while dragging.\r\n\r\n### Playback controls\r\nThe bottom left of the timeline window contains the timeline's playback controls. Playback can be previewed both in edit mode and play mode.\r\n\r\nNext to the play back controls are settings for Audio Preview and Event Preview. These options perform the following functions:\r\n* Audio Preview - If Play Audio Using Node Settings is selected, audio will play through the Audio Outs connected to the play node when previewing. If the user wants to preview audio without playing it through Audio Outs, they can set the window to Play All Audio.\r\n* Event Preview - By default, Events are disabled when previewing playback in the timeline window. This is to prevent unintended activation of subsequent nodes in the sound graph. If the user wishes preview playback including subsequent nodes, set this dropdown to Play On Node.\r\n\r\n### Dynamic Data Swapping\r\nDynamic data swapping enables the user to swap out Audio Clips and MIDI files at runtime. To enable this feature, add a Audio Clip or MIDI file to the timeline, right click on it, select edit, and check the Expose In Node option. The Play node will now have an input for swapping out the Audio Clip or MIDI file. When Expose In Node is checked, a Label option is also displayed in the timeline element options. This label identifies this item in the Play node and the Timeline.\r\n\r\n### Other controls\r\n* Hold shift and click to select multiple items\r\n* Hold ctrl and drag to enable snapping\r\n* The delete key deletes items\r\n* Hold ctrl and scroll to zoom\r\n\r\n## Combined Audio Bus\r\n![Combined-Audio-Bus](../../IMG/Combined-Audio-Bus.png)\r\n\r\n\r\n\r\nThe Combined Audio Bus controls playback for the entire node, and outputs all audio and events for the node. Here are the inputs and outputs for the Combine Audio Bus\r\n\r\n### Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nPlay | Event | When triggered, this event begins playback of the node. Note that if the Play node is already playing, calling this event will not stop that previous playback. Instead, they will play in parallel.\r\nPause | Event | When triggered, this event pauses the node\r\nResume | Event | If this node is paused, triggering this event resumes playback\r\nStop | Event | When triggered, this event stops all playback on this node.\r\n\r\n### Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nPlay Finished | Event | This event is called when the timeline reaches the End of Playback Marker.\r\nAudio Out | Audio | All audio output from this node (across all tracks) flows through this output. Note that this output can be connected directly to an Audio Out, or audio can be \"sent\" by clicking the dropdown next to this output and selecting a target Audio Out. This function helps unclutter the Sound Graph.\r\nEvent Out | Event | All Events (including MIDI events) triggered in this node (across all tracks) are sent through this output\r\n\r\n### Options\r\nOption | Type | Description\r\n--- | --- | ---\r\nVolume | Float | The main volume across all tracks, ranging from 0 to 1\r\nPan | Float | The main pan across all tracks ranging from -1 (left) to 1 (right)\r\nPlay finished | Dropdown | Chooses when the Play Finished output event is triggered. When \"At Specified Time is selected\", the node will trigger the event once the End of Playback Marker is reached in the timeline. When \"When All Clips Are Finished is selected\", the event is triggered when all playback items in the timeline have finished playing \r\n\r\n## Play Node Track Controls\r\n![Play-Node-Track-Controls](../../IMG/Play-Node-Track-Controls.png)\r\n\r\nWhen tracks in the Timeline are marked as exposed, they display some options and outputs in the play node\r\n\r\n### Inputs\r\n\r\n| Input  | Type  | Description                                      |\r\n| ------ | ----- | ------------------------------------------------ |\r\n| Volume | Float | The volume of the audio of this individual track |\r\n| Pan    | Float | The panning of this individual track             |\r\n\r\n### Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nAudio Out | Audio | All audio output from this track flows through this output. Note that this output can be connected directly to an Audio Out, or audio can be \"sent\" by clicking the dropdown next to this output and selecting a target Audio Out. This function helps unclutter the Sound Graph.\r\nEvent Out | Event | All Events (including MIDI events) triggered in this track are sent through this output\r\n\r\n### Options\r\nOption | Type | Description\r\n--- | --- | ---\r\nVolume | Float | The volume for this track, ranging from 0 to 1\r\nPan | Float | The pan for this track ranging from -1 (left) to 1 (right)\r\n\r\n## Play Node Loop Controls\r\n\r\n![Play-Node-Loop-Controls](../../IMG/Play-Node-Loop-Controls.png)\r\n\r\nWhen a loop is added to the timeline, the loop is exposed in the Play node. Set the input Boolean to True to exit the loop\r\n\r\n## Play Node Exposed Track Items\r\n\r\n![Play-Node-Exposed-Track-Items](../../IMG/Play-Node-Exposed-Track-Items.png)\r\n\r\nWhen an exposed MIDI or Audio clip is added to the timeline, an input appears on the Play node. Set the value of the input to control what is played back in the timeline.",
      "html": "<h1 id=\"play-node\">Play Node <a class=\"heading-anchor-permalink\" href=\"#play-node\">#</a></h1>\n<p><img src=\"../../IMG/Play-Node.png\" alt=\"Play Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Play node is the primary method of sequencing and playing audio and MIDI. It is also capable of sequencing events.</p>\n<h2 id=\"the-play-node-timeline\">The Play Node Timeline <a class=\"heading-anchor-permalink\" href=\"#the-play-node-timeline\">#</a></h2>\n<p><img src=\"../../IMG/Play-Node-Timeline.png\" alt=\"Play-Node-Timeline\"></p>\n<p>The Play node timeline is where sequencing for the Play Node takes place. Press the Open button on the Play node to open the timeline.</p>\n<h3 id=\"the-track-area\">The Track Area <a class=\"heading-anchor-permalink\" href=\"#the-track-area\">#</a></h3>\n<p>In the middle of the Play Node Timeline window is the track area for the Play Node. These tracks behave similarly to tracks in a Digital Audio Workstation. Timeline elements can be dragged around the timeline, resized, and looped.</p>\n<p>On the left hand side of each track are the track controls. The volume and pan can be adjusted per track. Tracks can also be named for organization purposes. Clicking on the Eye icon, users can set the track to visible, which displays the track and its audio and event outputs on the Play Node.</p>\n<h3 id=\"timeline-elements\">Timeline elements <a class=\"heading-anchor-permalink\" href=\"#timeline-elements\">#</a></h3>\n<p>The timeline window support several different element types.</p>\n<h4 id=\"audio-clip\">Audio Clip <a class=\"heading-anchor-permalink\" href=\"#audio-clip\">#</a></h4>\n<p>Audio clips can be dragged into the timeline from the Unity Project browser, or by right clicking on the timeline and selecting Add Audio Clip. Audio Clips play through the Audio Out output in the Play node’s Combined Audio Bus, as well as the track’s Audio Out if the track is exposed in the Play node. Advanced options for the audio clip can be accessed by right clicking and selecting edit. The following options are available:</p>\n<ul>\n<li>Audio Clip -The audio clip attached to this timeline element. This field lets you swap out the audio clip for this timeline element.</li>\n<li>Expose in node - Enables dynamic data swapping by exposing this audio clip in the play node. See Dynamic Data Swapping, below.</li>\n<li>Start time - The time the audio clip starts playing</li>\n<li>Length - The amount of time the audio clip will play for. If Length is longer then the source audio clip’s length, the audio will loop. If it is shorter, the clip will end playback early.\nTime Offset - Shifts the playback time of the audio clip within the timeline element. For example, if Time Offset is set to 1 second, the “beginning” of the timeline element will be 1 second into the audio clip’s playback.</li>\n</ul>\n<h4 id=\"midi-file\">MIDI File <a class=\"heading-anchor-permalink\" href=\"#midi-file\">#</a></h4>\n<p>MIDI Files can be dragged into the timeline from the Unity Project browser, or by right clicking on the timeline and selecting Add MIDI File. Each MIDI note plays as an event through the Event Out output in the Play node’s Combined Audio Bus, as well as the track’s Event Out if the track is exposed in the Play node. Each event will have the note number, channel, and velocity of the note that created it.</p>\n<p>Advanced options for the MIDI File can be accessed by right clicking and selecting edit. The following options are available:</p>\n<ul>\n<li>MIDI File -The MIDI File attached to this timeline element. This field lets you swap out the MIDI File for this timeline element.</li>\n<li>Expose in node - Enables dynamic data swapping by exposing this MIDI file in the play node. See Dynamic Data Swapping, below.</li>\n<li>Start time - The time the MIDI file starts playing</li>\n<li>Length - The amount of time the MIDI file will play for. If Length is longer then the source file’s length, it will loop. If it is shorter, the file will end playback early.\nTime Offset - Shifts the playback time of the MIDI file within the timeline element. For example, if Time Offset is set to 1 second, the “beginning” of the timeline element will be 1 second into the MIDI file’s playback.</li>\n</ul>\n<h4 id=\"event\">Event <a class=\"heading-anchor-permalink\" href=\"#event\">#</a></h4>\n<p>Event timeline elements provide a simple way of triggering events from the timeline. To add an event, right click on the timeline and select Add Event. Timeline events are played back on the Event Out in Play node’s Combined Audio Bus, as well as the Track Event out if the track is exposed. To access the Event element’s options, right click on the event and select Edit. The following options are available:</p>\n<ul>\n<li>Label - The label used to identify this event on the timeline</li>\n<li>Time - The time this event occurs.</li>\n<li>Event Parameters - The event parameters to pass on with this event when triggered. Note that parameter names must be unique for each event.</li>\n</ul>\n<h4 id=\"loop\">Loop <a class=\"heading-anchor-permalink\" href=\"#loop\">#</a></h4>\n<p>Loop timeline elements enable looping within the timeline. To add a loop, right click on the timeline and select Add Loop. Loops add a boolean input to the Play node called Can Exit Loop. When the Can Exit Loop input is false, playback loops within the range of the Loop element. When Can Exit Loop is true, playback will proceed.</p>\n<p>Advanced options for the loop can be accessed by right clicking on the loop range and selecting Edit. The following options are available:</p>\n<ul>\n<li>Label - The name used to identify the loop in the timeline and the Play node</li>\n<li>Time - The start time for the loop</li>\n<li>Length - The length of the loop’s time range.</li>\n</ul>\n<h3 id=\"the-end-of-playback-marker\">The End of Playback Marker <a class=\"heading-anchor-permalink\" href=\"#the-end-of-playback-marker\">#</a></h3>\n<p>In addition to timeline elements, the Track Area also contains the end of playback marker. This marker is a vertical line representing the time of playback where the Play Finished Output of the Play node is called.</p>\n<p>Note that timeline elements that extend past the end of playback marker will continue to play, even if the end of playback marker has been reached. This is useful in situations where, for example, reverb is baked into the audio file being played and needs to be accounted for. The next node in the sequence needs to be triggered, but the audio clip needs to keep playing to avoid cutting off the reverb.</p>\n<h3 id=\"time-signature-and-bpm-area\">Time Signature and BPM Area <a class=\"heading-anchor-permalink\" href=\"#time-signature-and-bpm-area\">#</a></h3>\n<p>At the top of the window is the BPM and Time signature bar. Time signatures and BPMs can be used in conjunction with snapping to align timeline elements. The left side of the bar contains the starting BPM and the starting time signature for the timeline. BPM and time signature change markesrs can be used to change the BPM or time signature mid-track. To add a new marker right click on the bar (at the top for BPM, at the bottom for time signatures) and add the marker.</p>\n<h3 id=\"snapping\">Snapping <a class=\"heading-anchor-permalink\" href=\"#snapping\">#</a></h3>\n<p>At the bottom right of the Play Node Timeline are the snapping controls. Snapping can be performed using a variety of time divisions, all based on the BPM and Time signatures set in the time signature and BPM area. Timeline elements can also snap to the start and end of other timeline elements. To activate snapping, hold CTRL while dragging.</p>\n<h3 id=\"playback-controls\">Playback controls <a class=\"heading-anchor-permalink\" href=\"#playback-controls\">#</a></h3>\n<p>The bottom left of the timeline window contains the timeline’s playback controls. Playback can be previewed both in edit mode and play mode.</p>\n<p>Next to the play back controls are settings for Audio Preview and Event Preview. These options perform the following functions:</p>\n<ul>\n<li>Audio Preview - If Play Audio Using Node Settings is selected, audio will play through the Audio Outs connected to the play node when previewing. If the user wants to preview audio without playing it through Audio Outs, they can set the window to Play All Audio.</li>\n<li>Event Preview - By default, Events are disabled when previewing playback in the timeline window. This is to prevent unintended activation of subsequent nodes in the sound graph. If the user wishes preview playback including subsequent nodes, set this dropdown to Play On Node.</li>\n</ul>\n<h3 id=\"dynamic-data-swapping\">Dynamic Data Swapping <a class=\"heading-anchor-permalink\" href=\"#dynamic-data-swapping\">#</a></h3>\n<p>Dynamic data swapping enables the user to swap out Audio Clips and MIDI files at runtime. To enable this feature, add a Audio Clip or MIDI file to the timeline, right click on it, select edit, and check the Expose In Node option. The Play node will now have an input for swapping out the Audio Clip or MIDI file. When Expose In Node is checked, a Label option is also displayed in the timeline element options. This label identifies this item in the Play node and the Timeline.</p>\n<h3 id=\"other-controls\">Other controls <a class=\"heading-anchor-permalink\" href=\"#other-controls\">#</a></h3>\n<ul>\n<li>Hold shift and click to select multiple items</li>\n<li>Hold ctrl and drag to enable snapping</li>\n<li>The delete key deletes items</li>\n<li>Hold ctrl and scroll to zoom</li>\n</ul>\n<h2 id=\"combined-audio-bus\">Combined Audio Bus <a class=\"heading-anchor-permalink\" href=\"#combined-audio-bus\">#</a></h2>\n<p><img src=\"../../IMG/Combined-Audio-Bus.png\" alt=\"Combined-Audio-Bus\"></p>\n<p>The Combined Audio Bus controls playback for the entire node, and outputs all audio and events for the node. Here are the inputs and outputs for the Combine Audio Bus</p>\n<h3 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Play</td>\n<td>Event</td>\n<td>When triggered, this event begins playback of the node. Note that if the Play node is already playing, calling this event will not stop that previous playback. Instead, they will play in parallel.</td>\n</tr>\n<tr>\n<td>Pause</td>\n<td>Event</td>\n<td>When triggered, this event pauses the node</td>\n</tr>\n<tr>\n<td>Resume</td>\n<td>Event</td>\n<td>If this node is paused, triggering this event resumes playback</td>\n</tr>\n<tr>\n<td>Stop</td>\n<td>Event</td>\n<td>When triggered, this event stops all playback on this node.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Play Finished</td>\n<td>Event</td>\n<td>This event is called when the timeline reaches the End of Playback Marker.</td>\n</tr>\n<tr>\n<td>Audio Out</td>\n<td>Audio</td>\n<td>All audio output from this node (across all tracks) flows through this output. Note that this output can be connected directly to an Audio Out, or audio can be “sent” by clicking the dropdown next to this output and selecting a target Audio Out. This function helps unclutter the Sound Graph.</td>\n</tr>\n<tr>\n<td>Event Out</td>\n<td>Event</td>\n<td>All Events (including MIDI events) triggered in this node (across all tracks) are sent through this output</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Volume</td>\n<td>Float</td>\n<td>The main volume across all tracks, ranging from 0 to 1</td>\n</tr>\n<tr>\n<td>Pan</td>\n<td>Float</td>\n<td>The main pan across all tracks ranging from -1 (left) to 1 (right)</td>\n</tr>\n<tr>\n<td>Play finished</td>\n<td>Dropdown</td>\n<td>Chooses when the Play Finished output event is triggered. When “At Specified Time is selected”, the node will trigger the event once the End of Playback Marker is reached in the timeline. When “When All Clips Are Finished is selected”, the event is triggered when all playback items in the timeline have finished playing</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"play-node-track-controls\">Play Node Track Controls <a class=\"heading-anchor-permalink\" href=\"#play-node-track-controls\">#</a></h2>\n<p><img src=\"../../IMG/Play-Node-Track-Controls.png\" alt=\"Play-Node-Track-Controls\"></p>\n<p>When tracks in the Timeline are marked as exposed, they display some options and outputs in the play node</p>\n<h3 id=\"inputs-2\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Volume</td>\n<td>Float</td>\n<td>The volume of the audio of this individual track</td>\n</tr>\n<tr>\n<td>Pan</td>\n<td>Float</td>\n<td>The panning of this individual track</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputs-2\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Audio Out</td>\n<td>Audio</td>\n<td>All audio output from this track flows through this output. Note that this output can be connected directly to an Audio Out, or audio can be “sent” by clicking the dropdown next to this output and selecting a target Audio Out. This function helps unclutter the Sound Graph.</td>\n</tr>\n<tr>\n<td>Event Out</td>\n<td>Event</td>\n<td>All Events (including MIDI events) triggered in this track are sent through this output</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"options-2\">Options <a class=\"heading-anchor-permalink\" href=\"#options-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Volume</td>\n<td>Float</td>\n<td>The volume for this track, ranging from 0 to 1</td>\n</tr>\n<tr>\n<td>Pan</td>\n<td>Float</td>\n<td>The pan for this track ranging from -1 (left) to 1 (right)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"play-node-loop-controls\">Play Node Loop Controls <a class=\"heading-anchor-permalink\" href=\"#play-node-loop-controls\">#</a></h2>\n<p><img src=\"../../IMG/Play-Node-Loop-Controls.png\" alt=\"Play-Node-Loop-Controls\"></p>\n<p>When a loop is added to the timeline, the loop is exposed in the Play node. Set the input Boolean to True to exit the loop</p>\n<h2 id=\"play-node-exposed-track-items\">Play Node Exposed Track Items <a class=\"heading-anchor-permalink\" href=\"#play-node-exposed-track-items\">#</a></h2>\n<p><img src=\"../../IMG/Play-Node-Exposed-Track-Items.png\" alt=\"Play-Node-Exposed-Track-Items\"></p>\n<p>When an exposed MIDI or Audio clip is added to the timeline, an input appears on the Play node. Set the value of the input to control what is played back in the timeline.</p>\n",
      "id": 60
    },
    {
      "path": "Nodes/Playback/Sampler-Track.md",
      "url": "Nodes/Playback/Sampler-Track.html",
      "content": "\r\n\r\n# Sampler Track Node\r\n\r\n![Sampler-Track-Node](../../IMG/Sampler-Track-Node.png)\r\n\r\n## About\r\n\r\nThis node takes in events with MIDI parameters, and plays a sample based on that parameter's note number\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nMIDI In | Event | The event triggering sample playback. The sample will be chosen based on the selected MIDI Parameter on the event. \r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nAudio Out | Audio | All audio output from this node flows through this output. Note that this output can be connected directly to an Audio Out, or audio can be \"sent\" by clicking the dropdown next to this output and selecting a target Audio Out. This function helps unclutter the Sound Graph.\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nUnnamed | Dropdown (Parameter selector) | Dropdown to choose which MIDI Data parameter to read from the event \r\nSamples | List of Samples | The samples for this sample node. Each sample has a MIDI note number and an associated Audio Clip. When an event with the given MIDI note number triggers the MIDI In input, the associated Audio Clip will play. Each item in the samples list has a Listen for Key function to make setup of samples more convenient. When Listen for Key is active, the sample will set it's note number to the next key that is pressed on an attached MIDI device.\r\n\r\n## Load Folder Function\r\nThis node can load in an entire folder of samples at once for convenience. Click the Load Folder button, pick a folder, and all audio in that folder will be loaded into the sampler. If the names of the clips have note numbers in it, the sampler will try to parse them and automatically configure the note number in the list. For example, a file name containing the number 30 will be matched to F#1 in the sampler. \r\n\r\n\r\n",
      "html": "<h1 id=\"sampler-track-node\">Sampler Track Node <a class=\"heading-anchor-permalink\" href=\"#sampler-track-node\">#</a></h1>\n<p><img src=\"../../IMG/Sampler-Track-Node.png\" alt=\"Sampler-Track-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node takes in events with MIDI parameters, and plays a sample based on that parameter’s note number</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MIDI In</td>\n<td>Event</td>\n<td>The event triggering sample playback. The sample will be chosen based on the selected MIDI Parameter on the event.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Audio Out</td>\n<td>Audio</td>\n<td>All audio output from this node flows through this output. Note that this output can be connected directly to an Audio Out, or audio can be “sent” by clicking the dropdown next to this output and selecting a target Audio Out. This function helps unclutter the Sound Graph.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown (Parameter selector)</td>\n<td>Dropdown to choose which MIDI Data parameter to read from the event</td>\n</tr>\n<tr>\n<td>Samples</td>\n<td>List of Samples</td>\n<td>The samples for this sample node. Each sample has a MIDI note number and an associated Audio Clip. When an event with the given MIDI note number triggers the MIDI In input, the associated Audio Clip will play. Each item in the samples list has a Listen for Key function to make setup of samples more convenient. When Listen for Key is active, the sample will set it’s note number to the next key that is pressed on an attached MIDI device.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"load-folder-function\">Load Folder Function <a class=\"heading-anchor-permalink\" href=\"#load-folder-function\">#</a></h2>\n<p>This node can load in an entire folder of samples at once for convenience. Click the Load Folder button, pick a folder, and all audio in that folder will be loaded into the sampler. If the names of the clips have note numbers in it, the sampler will try to parse them and automatically configure the note number in the list. For example, a file name containing the number 30 will be matched to F#1 in the sampler.</p>\n",
      "id": 61
    },
    {
      "path": "Nodes/Playback/State-Machine.md",
      "url": "Nodes/Playback/State-Machine.html",
      "content": "\r\n\r\n# State Machine\r\n\r\n![State-Machine-Node-Header](../../IMG/State-Machine-Node-Header.png)\r\n\r\n## About\r\n\r\nThe State Machine node simplifies the process of creating stateful music and audio systems. The state machine node, for examples, can be used to create a dynamic music system with various levels of intensity that transitions between intensity levels in response to game play.\r\n\r\nThe State Machine node works by defining a series of states and the possible transitions between states. Each state links to a different Sound Graph that plays when the state is active. Only one state can be active at a time, and the transitions define the rules by which the states can change. \r\n\r\nThe State Machine node has two different transition modes - Fade and Sequential. In Fade mode, when a transition is triggered the currently active state fades out in volume and the new state simultaneously fades in. In Sequential mode, the node waits for the currently active state to finish playing and then immediately triggers the next state.\r\n\r\n## Fade mode\r\n![State Machine Fade Node](../../IMG/State-Machine-Fade-Node.png)\r\n\r\nIn Fade mode, the State Machine node has the following outputs and options:\r\n\r\n### Node Outputs\r\n\r\n| Output          | Type        | Description                                                  |\r\n| --------------- | ----------- | ------------------------------------------------------------ |\r\n| On State Change | Event       | This event is triggered whenever a state change is initiated |\r\n| Current State   | Enumeration | This output contains the current state running on the node. This enumeration is created when code is generated for the Sound Graph, so this output will not be available when the node is created. It will appear once code is regenerated for the Sound Graph |\r\n\r\n### Node Options\r\n\r\n| Option              | Type     | Description                                                  |\r\n| ------------------- | -------- | ------------------------------------------------------------ |\r\n| State Machine Name  | String   | The name of this state machine, used to name the state machine for code generation |\r\n| State Machine Style | Dropdown | Defines how transitions are executed on this node. In Fade mode, when a transition is triggered the currently active state fades out in volume and the new state simultaneously fades in. In Sequential mode, the node waits for the currently active state to finish playing and then immediately triggers the next state. |\r\n\r\n### States\r\n\r\n![State-Machine-State-Fade](../../IMG/State-Machine-State-Fade.png)\r\n\r\nIn addition to the above properties, the State Machine node contains a list of states. Here are the properties for each state in Fade mode:\r\n\r\n#### State Inputs\r\n\r\n| Input   | Type  | Description                                                  |\r\n| ------- | ----- | ------------------------------------------------------------ |\r\n| Unnamed | Event | Each state has an event input next to the state name. Sending an event to that input triggers the transition to that state |\r\n\r\n#### State Options\r\n\r\n| Option          | Type        | Description                                                  |\r\n| --------------- | ----------- | ------------------------------------------------------------ |\r\n| State Name      | String      | The name of the state. Used for defining transitions, as well as code generation |\r\n| State Graph     | Sound Graph | The Sound Graph that plays when this state is active         |\r\n| Start Event     | Dropdown    | Selects an event from the specified State Graph. When this state becomes active, the selected event will be triggered to initiate playback |\r\n| Volume Variable | Dropdown    | Selects a variable with the type Float from the specified State Graph. During transitions, the State Machine will write a number between 0 and 1 to the variable representing the current volume of the state. In your State Graph, you'll need to read that variable value and use it to change the volume of the audio you are playing back |\r\n\r\nIf the State Graph contains exposed variables and events, they will appear as inputs and outputs on the state in addition to the above inputs and options, excluding events that are consumed by the Start Event or variables that are consumed by the Volume Variable options.\r\n\r\n#### Transitions\r\n\r\nEach state also contains a list of transitions. One state can only transition to another if it has a transition defined for that state. Here are the properties for each transition in Fade mode:\r\n\r\n##### Transition Options\r\n\r\n| Option         | Type     | Description                                                  |\r\n| -------------- | -------- | ------------------------------------------------------------ |\r\n| Unnamed        | Dropdown | Selects the State that gets activated when this transition occurs |\r\n| Fade Time (s)  | Float    | The amount of time in seconds it takes for fade to complete  |\r\n| Wait for Event | Dropdown | Selects an event from the active state's State Graph. When this transition is triggered, it will wait for this event to trigger in the active State Graph before beginning the fade to the new state. |\r\n\r\n## Sequential mode\r\n\r\n![State-Machine-Node-Sequential](../../IMG/State-Machine-Node-Sequential.png)\r\n\r\nIn Sequential mode, the State Machine node has the following outputs and options:\r\n\r\n### Node Outputs\r\n\r\n| Output          | Type        | Description                                                  |\r\n| --------------- | ----------- | ------------------------------------------------------------ |\r\n| On State Change | Event       | This event is triggered whenever a state change is initiated |\r\n| Current State   | Enumeration | This output contains the current state running on the node. This enumeration is created when code is generated for the Sound Graph, so this output will not be available when the node is created. It will appear once code is regenerated for the Sound Graph |\r\n\r\n### Node Options\r\n\r\n| Option              | Type     | Description                                                  |\r\n| ------------------- | -------- | ------------------------------------------------------------ |\r\n| State Machine Name  | String   | The name of this state machine, used to name the state machine for code generation |\r\n| State Machine Style | Dropdown | Defines how transitions are executed on this node. In Fade mode, when a transition is triggered the currently active state fades out in volume and the new state simultaneously fades in. In Sequential mode, the node waits for the currently active state to finish playing and then immediately triggers the next state. |\r\n\r\n### States\r\n\r\n![State-Machine-State-Sequential](../../IMG/State-Machine-State-Sequential.png)\r\n\r\nIn addition to the above properties, the State Machine node contains a list of states. Here are the properties for each state in Sequential mode:\r\n\r\n#### State Inputs\r\n\r\n| Input   | Type  | Description                                                  |\r\n| ------- | ----- | ------------------------------------------------------------ |\r\n| Unnamed | Event | Each state has an event input next to the state name. Sending an event to that input triggers the transition to that state |\r\n\r\n#### State Options\r\n\r\n| Option      | Type        | Description                                                  |\r\n| ----------- | ----------- | ------------------------------------------------------------ |\r\n| State Name  | String      | The name of the state. Used for defining transitions, as well as code generation |\r\n| State Graph | Sound Graph | The Sound Graph that plays when this state is active         |\r\n| Start Event | Dropdown    | Selects an event from the specified State Graph. When this state becomes active, the selected event will be triggered to initiate playback |\r\n\r\nIf the State Graph contains exposed variables and events, they will appear as inputs and outputs on the state in addition to the above inputs and options, excluding events that are consumed by the Start Event option.\r\n\r\n#### Transitions\r\n\r\nEach state also contains a list of transitions. One state can only transition to another if it has a transition defined for that state. Here are the properties for each transition in Sequential mode:\r\n\r\n##### Transition Options\r\n\r\n| Option           | Type        | Description                                                  |\r\n| ---------------- | ----------- | ------------------------------------------------------------ |\r\n| Unnamed          | Dropdown    | Selects the State that gets activated when this transition occurs |\r\n| Transition Graph | Sound Graph | Optional. When this transition begins, this Transition Graph gets played after the current state completes playback, and before the next state begins playback. |\r\n| Start Event      | Dropdown    | If a Transition Graph has been specified, this option appears. This option selects an event from the Transition Graph. It is used to begin playback on the transition graph. |\r\n| End Event        | Dropdown    | If a Transition Graph has been specified, this option appears. This option selects an event from the Transition Graph. Once playback in the transition graph has begun via Start Event, the transition waits for this event to be called from within the transition graph. Once this event has been called, the State Machine will begin playback on the next state. |\r\n| Wait for Event   | Dropdown    | Selects an event from the active state's State Graph. When this transition is triggered, it will wait for this event to trigger in the active State Graph before beginning the fade to the new state. |\r\n\r\nIf the Transition Graph has exposed events and variables that are not consumed by the Start Event or End Event options, they will appear as inputs and outputs on the transition.",
      "html": "<h1 id=\"state-machine\">State Machine <a class=\"heading-anchor-permalink\" href=\"#state-machine\">#</a></h1>\n<p><img src=\"../../IMG/State-Machine-Node-Header.png\" alt=\"State-Machine-Node-Header\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The State Machine node simplifies the process of creating stateful music and audio systems. The state machine node, for examples, can be used to create a dynamic music system with various levels of intensity that transitions between intensity levels in response to game play.</p>\n<p>The State Machine node works by defining a series of states and the possible transitions between states. Each state links to a different Sound Graph that plays when the state is active. Only one state can be active at a time, and the transitions define the rules by which the states can change.</p>\n<p>The State Machine node has two different transition modes - Fade and Sequential. In Fade mode, when a transition is triggered the currently active state fades out in volume and the new state simultaneously fades in. In Sequential mode, the node waits for the currently active state to finish playing and then immediately triggers the next state.</p>\n<h2 id=\"fade-mode\">Fade mode <a class=\"heading-anchor-permalink\" href=\"#fade-mode\">#</a></h2>\n<p><img src=\"../../IMG/State-Machine-Fade-Node.png\" alt=\"State Machine Fade Node\"></p>\n<p>In Fade mode, the State Machine node has the following outputs and options:</p>\n<h3 id=\"node-outputs\">Node Outputs <a class=\"heading-anchor-permalink\" href=\"#node-outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On State Change</td>\n<td>Event</td>\n<td>This event is triggered whenever a state change is initiated</td>\n</tr>\n<tr>\n<td>Current State</td>\n<td>Enumeration</td>\n<td>This output contains the current state running on the node. This enumeration is created when code is generated for the Sound Graph, so this output will not be available when the node is created. It will appear once code is regenerated for the Sound Graph</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"node-options\">Node Options <a class=\"heading-anchor-permalink\" href=\"#node-options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>State Machine Name</td>\n<td>String</td>\n<td>The name of this state machine, used to name the state machine for code generation</td>\n</tr>\n<tr>\n<td>State Machine Style</td>\n<td>Dropdown</td>\n<td>Defines how transitions are executed on this node. In Fade mode, when a transition is triggered the currently active state fades out in volume and the new state simultaneously fades in. In Sequential mode, the node waits for the currently active state to finish playing and then immediately triggers the next state.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"states\">States <a class=\"heading-anchor-permalink\" href=\"#states\">#</a></h3>\n<p><img src=\"../../IMG/State-Machine-State-Fade.png\" alt=\"State-Machine-State-Fade\"></p>\n<p>In addition to the above properties, the State Machine node contains a list of states. Here are the properties for each state in Fade mode:</p>\n<h4 id=\"state-inputs\">State Inputs <a class=\"heading-anchor-permalink\" href=\"#state-inputs\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Event</td>\n<td>Each state has an event input next to the state name. Sending an event to that input triggers the transition to that state</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"state-options\">State Options <a class=\"heading-anchor-permalink\" href=\"#state-options\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>State Name</td>\n<td>String</td>\n<td>The name of the state. Used for defining transitions, as well as code generation</td>\n</tr>\n<tr>\n<td>State Graph</td>\n<td>Sound Graph</td>\n<td>The Sound Graph that plays when this state is active</td>\n</tr>\n<tr>\n<td>Start Event</td>\n<td>Dropdown</td>\n<td>Selects an event from the specified State Graph. When this state becomes active, the selected event will be triggered to initiate playback</td>\n</tr>\n<tr>\n<td>Volume Variable</td>\n<td>Dropdown</td>\n<td>Selects a variable with the type Float from the specified State Graph. During transitions, the State Machine will write a number between 0 and 1 to the variable representing the current volume of the state. In your State Graph, you’ll need to read that variable value and use it to change the volume of the audio you are playing back</td>\n</tr>\n</tbody>\n</table>\n<p>If the State Graph contains exposed variables and events, they will appear as inputs and outputs on the state in addition to the above inputs and options, excluding events that are consumed by the Start Event or variables that are consumed by the Volume Variable options.</p>\n<h4 id=\"transitions\">Transitions <a class=\"heading-anchor-permalink\" href=\"#transitions\">#</a></h4>\n<p>Each state also contains a list of transitions. One state can only transition to another if it has a transition defined for that state. Here are the properties for each transition in Fade mode:</p>\n<h5 id=\"transition-options\">Transition Options <a class=\"heading-anchor-permalink\" href=\"#transition-options\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown</td>\n<td>Selects the State that gets activated when this transition occurs</td>\n</tr>\n<tr>\n<td>Fade Time (s)</td>\n<td>Float</td>\n<td>The amount of time in seconds it takes for fade to complete</td>\n</tr>\n<tr>\n<td>Wait for Event</td>\n<td>Dropdown</td>\n<td>Selects an event from the active state’s State Graph. When this transition is triggered, it will wait for this event to trigger in the active State Graph before beginning the fade to the new state.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sequential-mode\">Sequential mode <a class=\"heading-anchor-permalink\" href=\"#sequential-mode\">#</a></h2>\n<p><img src=\"../../IMG/State-Machine-Node-Sequential.png\" alt=\"State-Machine-Node-Sequential\"></p>\n<p>In Sequential mode, the State Machine node has the following outputs and options:</p>\n<h3 id=\"node-outputs-2\">Node Outputs <a class=\"heading-anchor-permalink\" href=\"#node-outputs-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On State Change</td>\n<td>Event</td>\n<td>This event is triggered whenever a state change is initiated</td>\n</tr>\n<tr>\n<td>Current State</td>\n<td>Enumeration</td>\n<td>This output contains the current state running on the node. This enumeration is created when code is generated for the Sound Graph, so this output will not be available when the node is created. It will appear once code is regenerated for the Sound Graph</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"node-options-2\">Node Options <a class=\"heading-anchor-permalink\" href=\"#node-options-2\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>State Machine Name</td>\n<td>String</td>\n<td>The name of this state machine, used to name the state machine for code generation</td>\n</tr>\n<tr>\n<td>State Machine Style</td>\n<td>Dropdown</td>\n<td>Defines how transitions are executed on this node. In Fade mode, when a transition is triggered the currently active state fades out in volume and the new state simultaneously fades in. In Sequential mode, the node waits for the currently active state to finish playing and then immediately triggers the next state.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"states-2\">States <a class=\"heading-anchor-permalink\" href=\"#states-2\">#</a></h3>\n<p><img src=\"../../IMG/State-Machine-State-Sequential.png\" alt=\"State-Machine-State-Sequential\"></p>\n<p>In addition to the above properties, the State Machine node contains a list of states. Here are the properties for each state in Sequential mode:</p>\n<h4 id=\"state-inputs-2\">State Inputs <a class=\"heading-anchor-permalink\" href=\"#state-inputs-2\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Event</td>\n<td>Each state has an event input next to the state name. Sending an event to that input triggers the transition to that state</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"state-options-2\">State Options <a class=\"heading-anchor-permalink\" href=\"#state-options-2\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>State Name</td>\n<td>String</td>\n<td>The name of the state. Used for defining transitions, as well as code generation</td>\n</tr>\n<tr>\n<td>State Graph</td>\n<td>Sound Graph</td>\n<td>The Sound Graph that plays when this state is active</td>\n</tr>\n<tr>\n<td>Start Event</td>\n<td>Dropdown</td>\n<td>Selects an event from the specified State Graph. When this state becomes active, the selected event will be triggered to initiate playback</td>\n</tr>\n</tbody>\n</table>\n<p>If the State Graph contains exposed variables and events, they will appear as inputs and outputs on the state in addition to the above inputs and options, excluding events that are consumed by the Start Event option.</p>\n<h4 id=\"transitions-2\">Transitions <a class=\"heading-anchor-permalink\" href=\"#transitions-2\">#</a></h4>\n<p>Each state also contains a list of transitions. One state can only transition to another if it has a transition defined for that state. Here are the properties for each transition in Sequential mode:</p>\n<h5 id=\"transition-options-2\">Transition Options <a class=\"heading-anchor-permalink\" href=\"#transition-options-2\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown</td>\n<td>Selects the State that gets activated when this transition occurs</td>\n</tr>\n<tr>\n<td>Transition Graph</td>\n<td>Sound Graph</td>\n<td>Optional. When this transition begins, this Transition Graph gets played after the current state completes playback, and before the next state begins playback.</td>\n</tr>\n<tr>\n<td>Start Event</td>\n<td>Dropdown</td>\n<td>If a Transition Graph has been specified, this option appears. This option selects an event from the Transition Graph. It is used to begin playback on the transition graph.</td>\n</tr>\n<tr>\n<td>End Event</td>\n<td>Dropdown</td>\n<td>If a Transition Graph has been specified, this option appears. This option selects an event from the Transition Graph. Once playback in the transition graph has begun via Start Event, the transition waits for this event to be called from within the transition graph. Once this event has been called, the State Machine will begin playback on the next state.</td>\n</tr>\n<tr>\n<td>Wait for Event</td>\n<td>Dropdown</td>\n<td>Selects an event from the active state’s State Graph. When this transition is triggered, it will wait for this event to trigger in the active State Graph before beginning the fade to the new state.</td>\n</tr>\n</tbody>\n</table>\n<p>If the Transition Graph has exposed events and variables that are not consumed by the Start Event or End Event options, they will appear as inputs and outputs on the transition.</p>\n",
      "id": 62
    },
    {
      "path": "Nodes/Playback/Sub-Graph.md",
      "url": "Nodes/Playback/Sub-Graph.html",
      "content": "\r\n\r\n# Sub Graph Node\r\n\r\n![SubGraph](../../IMG/SubGraph.png)\r\n\r\n## About\r\n\r\nThe Sub Graph node enables the user to embed Sound Graphs within Sound Graphs. This is useful for reusing functions and processes across Sound Graphs and keeping individial graphs from getting too complex. To get started with a Sub Graph, select a Sound Graph using the Sub Graph field on the Sub Graph node, or click the New SubGraph button to create a new one.\r\n\r\n## Exposed Subgraph Variables.\r\nIf any variables in the subgraph are set to be exposed As Input or As Output, they will appear in the subgraph node. Variables set As Output are readable on the node, and variables set As Input will be writeable. Variables set to Do Not Expose will not appear in the Subgraph node. When a variable set As Input has a connected input in the subgraph node, it overrides the default value set on that variable.\r\n\r\n## Exposed Subgraph Events\r\nIF any events in the subgraph are set to exposed, they will appear in the subgraph node. Each exposed subgraph event will show an input event and output event in the Subgraph node. Trigger the input to call the event in the subgraph, or connect to the output to listen for when the event is triggered.\r\n\r\n## End All\r\nThe End All input is a special utility event. Triggering the event stops all playback in the subgraph\r\n\r\n\r\n",
      "html": "<h1 id=\"sub-graph-node\">Sub Graph Node <a class=\"heading-anchor-permalink\" href=\"#sub-graph-node\">#</a></h1>\n<p><img src=\"../../IMG/SubGraph.png\" alt=\"SubGraph\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Sub Graph node enables the user to embed Sound Graphs within Sound Graphs. This is useful for reusing functions and processes across Sound Graphs and keeping individial graphs from getting too complex. To get started with a Sub Graph, select a Sound Graph using the Sub Graph field on the Sub Graph node, or click the New SubGraph button to create a new one.</p>\n<h2 id=\"exposed-subgraph-variables.\">Exposed Subgraph Variables. <a class=\"heading-anchor-permalink\" href=\"#exposed-subgraph-variables.\">#</a></h2>\n<p>If any variables in the subgraph are set to be exposed As Input or As Output, they will appear in the subgraph node. Variables set As Output are readable on the node, and variables set As Input will be writeable. Variables set to Do Not Expose will not appear in the Subgraph node. When a variable set As Input has a connected input in the subgraph node, it overrides the default value set on that variable.</p>\n<h2 id=\"exposed-subgraph-events\">Exposed Subgraph Events <a class=\"heading-anchor-permalink\" href=\"#exposed-subgraph-events\">#</a></h2>\n<p>IF any events in the subgraph are set to exposed, they will appear in the subgraph node. Each exposed subgraph event will show an input event and output event in the Subgraph node. Trigger the input to call the event in the subgraph, or connect to the output to listen for when the event is triggered.</p>\n<h2 id=\"end-all\">End All <a class=\"heading-anchor-permalink\" href=\"#end-all\">#</a></h2>\n<p>The End All input is a special utility event. Triggering the event stops all playback in the subgraph</p>\n",
      "id": 63
    },
    {
      "path": "Nodes/Signal-Sources/Click-Track.md",
      "url": "Nodes/Signal-Sources/Click-Track.html",
      "content": "\r\n\r\n# Click Track Node\r\n\r\n![Click-Track](../../IMG/Click-Track.png)\r\n\r\n## About\r\n\r\nThis node outputs a click track signal based on the inputs.\r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nEnter | Event | Begins playback of the click track\r\nBPM | Float | The beats per minute of the signal this node generates\r\nNumber of Bars | Integer | The number of bars this node will play\r\nBeats Per Bar | Integer | The number of beats per bar this node will play\r\nClicks Per Beat | Integer | The number of clicks per beat this bar will play\r\n\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nTrack Finished | Event | Once playback of this click track has finished, this event is triggered\r\nOn Bar | Event | This event is triggered whenever a bar in the click track is completed\r\nOn Beat | Event | This event is triggered whenever a beat in the click track is completed\r\nOn Click | Event | This event is triggered whenever a click in the click track is played\r\n\r\n## Options\r\nOption | Type | Description\r\n--- | --- | ---\r\nPlay Click | Boolean | When checked, this node will audibly play the click track\r\n\r\n\r\n\r\n",
      "html": "<h1 id=\"click-track-node\">Click Track Node <a class=\"heading-anchor-permalink\" href=\"#click-track-node\">#</a></h1>\n<p><img src=\"../../IMG/Click-Track.png\" alt=\"Click-Track\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node outputs a click track signal based on the inputs.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enter</td>\n<td>Event</td>\n<td>Begins playback of the click track</td>\n</tr>\n<tr>\n<td>BPM</td>\n<td>Float</td>\n<td>The beats per minute of the signal this node generates</td>\n</tr>\n<tr>\n<td>Number of Bars</td>\n<td>Integer</td>\n<td>The number of bars this node will play</td>\n</tr>\n<tr>\n<td>Beats Per Bar</td>\n<td>Integer</td>\n<td>The number of beats per bar this node will play</td>\n</tr>\n<tr>\n<td>Clicks Per Beat</td>\n<td>Integer</td>\n<td>The number of clicks per beat this bar will play</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Track Finished</td>\n<td>Event</td>\n<td>Once playback of this click track has finished, this event is triggered</td>\n</tr>\n<tr>\n<td>On Bar</td>\n<td>Event</td>\n<td>This event is triggered whenever a bar in the click track is completed</td>\n</tr>\n<tr>\n<td>On Beat</td>\n<td>Event</td>\n<td>This event is triggered whenever a beat in the click track is completed</td>\n</tr>\n<tr>\n<td>On Click</td>\n<td>Event</td>\n<td>This event is triggered whenever a click in the click track is played</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Play Click</td>\n<td>Boolean</td>\n<td>When checked, this node will audibly play the click track</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 64
    },
    {
      "path": "Nodes/Signal-Sources/End-All-Playback.md",
      "url": "Nodes/Signal-Sources/End-All-Playback.html",
      "content": "\r\n\r\n# End All Playback Node\r\n\r\n![End-All-Playback](../../IMG/End-All-Playback.png)\r\n\r\n## About\r\n\r\nWhen triggered, the End All Playback Node stops all playing nodes in the current Sound Graph.\r\n\r\n## Inputs\r\n\r\n| Input        | Type  | Description                                                  |\r\n| ------------ | ----- | ------------------------------------------------------------ |\r\n| End Playback | Event | When triggered, this input stops all playing nodes in the current Sound Graph |\r\n\r\n",
      "html": "<h1 id=\"end-all-playback-node\">End All Playback Node <a class=\"heading-anchor-permalink\" href=\"#end-all-playback-node\">#</a></h1>\n<p><img src=\"../../IMG/End-All-Playback.png\" alt=\"End-All-Playback\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>When triggered, the End All Playback Node stops all playing nodes in the current Sound Graph.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>End Playback</td>\n<td>Event</td>\n<td>When triggered, this input stops all playing nodes in the current Sound Graph</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 65
    },
    {
      "path": "Nodes/Signal-Sources/Event.md",
      "url": "Nodes/Signal-Sources/Event.html",
      "content": "\r\n\r\n# Event Node\r\n\r\n![Event-Node](../../IMG/Event-Node.png)\r\n\r\n## About\r\n\r\nThis node triggers the output when the given named graph event is triggered. It provides a way to hook into a named graph event without having to connect to the event on the Graph Input node and cluttering up the graph\r\n",
      "html": "<h1 id=\"event-node\">Event Node <a class=\"heading-anchor-permalink\" href=\"#event-node\">#</a></h1>\n<p><img src=\"../../IMG/Event-Node.png\" alt=\"Event-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node triggers the output when the given named graph event is triggered. It provides a way to hook into a named graph event without having to connect to the event on the Graph Input node and cluttering up the graph</p>\n",
      "id": 66
    },
    {
      "path": "Nodes/Signal-Sources/Graph-Inputs.md",
      "url": "Nodes/Signal-Sources/Graph-Inputs.html",
      "content": "\r\n\r\n# Graph Inputs Node\r\n\r\n![Graph-Inputs-Node](../../IMG/Graph-Inputs-Node.png)\r\n\r\n## About\r\n\r\nThe Graph Inputs node is the entry point for data and events into the Sound Graph. All named variables and events for the Sound Graph are defined on this node. For more information, see the [Events](../../Layers-Key-Concepts/2-Events.md) and [Variables](../../Layers-Key-Concepts/3-Variables.md) reference pages. Only one Graph Input node can be created per graph, and Graph Input nodes cannot be deleted.\r\n\r\n## Node Outputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nUpdate | Event | This output is triggered every frame, both at runtime and in-editor \r\n\r\n## Node Options\r\nOutput | Type| Description\r\n------------ | -------|------\r\n Globals          | Globals Asset | Globals Assets contain variables and events that are shared across Sound Graphs. See [Globals](../../Layers-Key-Concepts/12-Globals.md) for details \r\nPool Sound Graph | Toggle | Controls whether players generated for this sound Graph are pooled. See [Sound Graph Playback](../../Layers-Key-Concepts/7-Sound-Graph-Playback.md) for details \r\n\r\n## Variables\r\n\r\n![Graph-Inputs-Variables](../../IMG/Graph-Inputs-Variables.png)\r\n\r\nThe Graph Input node defines all of the variables available throughout the Sound Graph, and are displayed in the Variables list. Variables have a default value, which is the initial value of the variable at start, and a current value. Here are the properties available for each variable:\r\n\r\n\r\n### Variable Outputs\r\n\r\n| Output  | Type   | Description                                                  |\r\n| ------- | ------ | ------------------------------------------------------------ |\r\n| Unnamed | Varies | Outputs the current value of the variable. The type is the type of the variable |\r\n\r\n### Variable Options\r\n\r\n| Option        | Type            | Description                                                  |\r\n| ------------- | --------------- | ------------------------------------------------------------ |\r\n| Unnamed       | String          | The name of the variable                                     |\r\n| Unnamed       | Dropdown (type) | The type of the variable                                     |\r\n| Expose        | Dropdown        | Choose whether this variable is an input, and output, or not exposed. Input variables can be written to or read externally to the Sound Graph, and can be read within the Sound Graph. Output variables can be read externally to the Sound Graph, and read or written within the Sound Graph. Unexposed variables cannot be read outside of the Sound Graph, but can be read and written inside the Sound Graph |\r\n| Default Value | Varies          | The initial value of the variable at start                   |\r\n| Current Value | Varies          | The current value of the variable. This value can be reset to its default by clicking the 3-dot menu to the right of the value |\r\n\r\n## Events\r\n\r\n![Graph-Inputs-Events](../../IMG/Graph-Inputs-Events.png)\r\n\r\nThe Graph Input node defines all of the events available throughout the Sound Graph, and are displayed in the Events list. Events can be private to the Sound Graph, or exposed and accessible externally. Here are the properties available for events:\r\n\r\n### Event Outputs\r\n\r\n| Output  | Type   | Description                                                  |\r\n| ------- | ------ | ------------------------------------------------------------ |\r\n| Unnamed | Varies | Outputs the current value of the variable. The type is the type of the variable |\r\n\r\n### Event Options\r\n\r\n| Option  | Type   | Description                                                  |\r\n| ------- | ------ | ------------------------------------------------------------ |\r\n| Trigger | Button | Click this button to manually trigger the event. If any parameters are required for this event, a dialog will show to enable you to set those values |\r\n| Unnamed | String | The name of the Event                                        |\r\n| Expose  | Toggle | Whether or not this event is externally accessible           |\r\n\r\n### Event Parameters\r\n\r\nEvents can have optional parameters that can be used to pass data that may be read by other nodes in the graph. Parameters are set in the Parameters list. Here are the options available for each parameter:\r\n\r\n#### Event Parameter Options\r\n\r\n| Option         | Type            | Description                                                  |\r\n| -------------- | --------------- | ------------------------------------------------------------ |\r\n| name           | String          | The name of the parameter. This name can be used to retrieve the value of this parameter from this event |\r\n| Parameter Type | Dropdown (type) | The type of this parameter                                   |",
      "html": "<h1 id=\"graph-inputs-node\">Graph Inputs Node <a class=\"heading-anchor-permalink\" href=\"#graph-inputs-node\">#</a></h1>\n<p><img src=\"../../IMG/Graph-Inputs-Node.png\" alt=\"Graph-Inputs-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Graph Inputs node is the entry point for data and events into the Sound Graph. All named variables and events for the Sound Graph are defined on this node. For more information, see the <a href=\"../../Layers-Key-Concepts/2-Events.html\">Events</a> and <a href=\"../../Layers-Key-Concepts/3-Variables.html\">Variables</a> reference pages. Only one Graph Input node can be created per graph, and Graph Input nodes cannot be deleted.</p>\n<h2 id=\"node-outputs\">Node Outputs <a class=\"heading-anchor-permalink\" href=\"#node-outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Update</td>\n<td>Event</td>\n<td>This output is triggered every frame, both at runtime and in-editor</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"node-options\">Node Options <a class=\"heading-anchor-permalink\" href=\"#node-options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Globals</td>\n<td>Globals Asset</td>\n<td>Globals Assets contain variables and events that are shared across Sound Graphs. See <a href=\"../../Layers-Key-Concepts/12-Globals.html\">Globals</a> for details</td>\n</tr>\n<tr>\n<td>Pool Sound Graph</td>\n<td>Toggle</td>\n<td>Controls whether players generated for this sound Graph are pooled. See <a href=\"../../Layers-Key-Concepts/7-Sound-Graph-Playback.html\">Sound Graph Playback</a> for details</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"variables\">Variables <a class=\"heading-anchor-permalink\" href=\"#variables\">#</a></h2>\n<p><img src=\"../../IMG/Graph-Inputs-Variables.png\" alt=\"Graph-Inputs-Variables\"></p>\n<p>The Graph Input node defines all of the variables available throughout the Sound Graph, and are displayed in the Variables list. Variables have a default value, which is the initial value of the variable at start, and a current value. Here are the properties available for each variable:</p>\n<h3 id=\"variable-outputs\">Variable Outputs <a class=\"heading-anchor-permalink\" href=\"#variable-outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Varies</td>\n<td>Outputs the current value of the variable. The type is the type of the variable</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"variable-options\">Variable Options <a class=\"heading-anchor-permalink\" href=\"#variable-options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>String</td>\n<td>The name of the variable</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown (type)</td>\n<td>The type of the variable</td>\n</tr>\n<tr>\n<td>Expose</td>\n<td>Dropdown</td>\n<td>Choose whether this variable is an input, and output, or not exposed. Input variables can be written to or read externally to the Sound Graph, and can be read within the Sound Graph. Output variables can be read externally to the Sound Graph, and read or written within the Sound Graph. Unexposed variables cannot be read outside of the Sound Graph, but can be read and written inside the Sound Graph</td>\n</tr>\n<tr>\n<td>Default Value</td>\n<td>Varies</td>\n<td>The initial value of the variable at start</td>\n</tr>\n<tr>\n<td>Current Value</td>\n<td>Varies</td>\n<td>The current value of the variable. This value can be reset to its default by clicking the 3-dot menu to the right of the value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"events\">Events <a class=\"heading-anchor-permalink\" href=\"#events\">#</a></h2>\n<p><img src=\"../../IMG/Graph-Inputs-Events.png\" alt=\"Graph-Inputs-Events\"></p>\n<p>The Graph Input node defines all of the events available throughout the Sound Graph, and are displayed in the Events list. Events can be private to the Sound Graph, or exposed and accessible externally. Here are the properties available for events:</p>\n<h3 id=\"event-outputs\">Event Outputs <a class=\"heading-anchor-permalink\" href=\"#event-outputs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Varies</td>\n<td>Outputs the current value of the variable. The type is the type of the variable</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"event-options\">Event Options <a class=\"heading-anchor-permalink\" href=\"#event-options\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Trigger</td>\n<td>Button</td>\n<td>Click this button to manually trigger the event. If any parameters are required for this event, a dialog will show to enable you to set those values</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>String</td>\n<td>The name of the Event</td>\n</tr>\n<tr>\n<td>Expose</td>\n<td>Toggle</td>\n<td>Whether or not this event is externally accessible</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"event-parameters\">Event Parameters <a class=\"heading-anchor-permalink\" href=\"#event-parameters\">#</a></h3>\n<p>Events can have optional parameters that can be used to pass data that may be read by other nodes in the graph. Parameters are set in the Parameters list. Here are the options available for each parameter:</p>\n<h4 id=\"event-parameter-options\">Event Parameter Options <a class=\"heading-anchor-permalink\" href=\"#event-parameter-options\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>The name of the parameter. This name can be used to retrieve the value of this parameter from this event</td>\n</tr>\n<tr>\n<td>Parameter Type</td>\n<td>Dropdown (type)</td>\n<td>The type of this parameter</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 67
    },
    {
      "path": "Nodes/Signal-Sources/Raise-Event-On-Condition.md",
      "url": "Nodes/Signal-Sources/Raise-Event-On-Condition.html",
      "content": "\r\n\r\n# Raise Event On Condition\r\n\r\n![Raise-Event-On-Condition](../../IMG/Raise-Event-On-Condition.png)\r\n\r\n## About\r\n\r\nThe Raise Event On Condition node creates an event when the given condition changes from False to True\r\n\r\n## Inputs\r\n\r\n| Input     | Type    | Description   |\r\n| --------- | ------- | ------------- |\r\n| Condition | Boolean | The condition |\r\n\r\n\r\n## Outputs\r\n\r\n| Output  | Type  | Description                                  |\r\n| ------- | ----- | -------------------------------------------- |\r\n| On True | Event | Outputs the event when the Condition is True |",
      "html": "<h1 id=\"raise-event-on-condition\">Raise Event On Condition <a class=\"heading-anchor-permalink\" href=\"#raise-event-on-condition\">#</a></h1>\n<p><img src=\"../../IMG/Raise-Event-On-Condition.png\" alt=\"Raise-Event-On-Condition\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Raise Event On Condition node creates an event when the given condition changes from False to True</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Condition</td>\n<td>Boolean</td>\n<td>The condition</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On True</td>\n<td>Event</td>\n<td>Outputs the event when the Condition is True</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 68
    },
    {
      "path": "Nodes/Signal-Sources/Trigger-Event.md",
      "url": "Nodes/Signal-Sources/Trigger-Event.html",
      "content": "\r\n\r\n# Trigger Event Node\r\n\r\n![Trigger-Event](../../IMG/Trigger-Event.png)\r\n\r\n## About\r\n\r\nThis node triggers the given named event whenever the input is triggered. Once the named event is triggered, the output event is triggered\r\n\r\n\r\n",
      "html": "<h1 id=\"trigger-event-node\">Trigger Event Node <a class=\"heading-anchor-permalink\" href=\"#trigger-event-node\">#</a></h1>\n<p><img src=\"../../IMG/Trigger-Event.png\" alt=\"Trigger-Event\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node triggers the given named event whenever the input is triggered. Once the named event is triggered, the output event is triggered</p>\n",
      "id": 69
    },
    {
      "path": "Nodes/Signal-Sources/Update.md",
      "url": "Nodes/Signal-Sources/Update.html",
      "content": "\r\n\r\n# Update Node\r\n\r\n![Update-Node](../../IMG/Update-Node.png)\r\n\r\n## About\r\n\r\nThis node triggers an event every frame, both in-editor and at runtime\r\n\r\n",
      "html": "<h1 id=\"update-node\">Update Node <a class=\"heading-anchor-permalink\" href=\"#update-node\">#</a></h1>\n<p><img src=\"../../IMG/Update-Node.png\" alt=\"Update-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node triggers an event every frame, both in-editor and at runtime</p>\n",
      "id": 70
    },
    {
      "path": "Nodes/Utilities/Debug-Log.md",
      "url": "Nodes/Utilities/Debug-Log.html",
      "content": "\r\n\r\n# Debug Log Node\r\n\r\n![Debug-Log-Node](../../IMG/Debug-Log-Node.png)\r\n\r\n## About\r\n\r\nThis node writes the given text to the Debug Console\r\n\r\n## Inputs\r\n\r\n| Input   | Type   | Description                           |\r\n| ------- | ------ | ------------------------------------- |\r\n| Print   | Event  | Triggers a write to the Debug Console |\r\n| Message | String | The message to write                  |\r\n",
      "html": "<h1 id=\"debug-log-node\">Debug Log Node <a class=\"heading-anchor-permalink\" href=\"#debug-log-node\">#</a></h1>\n<p><img src=\"../../IMG/Debug-Log-Node.png\" alt=\"Debug-Log-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node writes the given text to the Debug Console</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Print</td>\n<td>Event</td>\n<td>Triggers a write to the Debug Console</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>String</td>\n<td>The message to write</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 71
    },
    {
      "path": "Nodes/Utilities/To-String.md",
      "url": "Nodes/Utilities/To-String.html",
      "content": "\r\n\r\n# To String Node\r\n\r\n![Click-Track](../../IMG/Click-Track.png)\r\n\r\n## About\r\n\r\nConverts the input object to a string\r\n\r\n## Inputs\r\n\r\n| Input | Type   | Description         |\r\n| ----- | ------ | ------------------- |\r\n| Input | Object | The incoming Object |\r\n\r\n\r\n## Outputs\r\n\r\n| Output | Type   | Description       |\r\n| ------ | ------ | ----------------- |\r\n| Output | String | The output String |\r\n",
      "html": "<h1 id=\"to-string-node\">To String Node <a class=\"heading-anchor-permalink\" href=\"#to-string-node\">#</a></h1>\n<p><img src=\"../../IMG/Click-Track.png\" alt=\"Click-Track\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Converts the input object to a string</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input</td>\n<td>Object</td>\n<td>The incoming Object</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>String</td>\n<td>The output String</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 72
    },
    {
      "path": "Nodes/Variables/Boolean-Value-Selector.md",
      "url": "Nodes/Variables/Boolean-Value-Selector.html",
      "content": "\r\n\r\n# Boolean Value Selector\r\n\r\n![Boolean-Value-Selector](../../IMG/Boolean-Value-Selector.png)\r\n\r\n## About\r\n\r\nGiven an input Boolean, this node chooses between two values\r\n\r\n## Inputs\r\n\r\n| Input       | Type    | Description                                         |\r\n| ----------- | ------- | --------------------------------------------------- |\r\n| Condition   | Boolean | The condition used to choose between the two values |\r\n| True Value  | Varies  | The value chosen when the Condition is true         |\r\n| False Value | Varies  | The value chosen when the Condition is false        |\r\n\r\n\r\n## Outputs\r\n\r\n| Output | Type   | Description      |\r\n| ------ | ------ | ---------------- |\r\n| Output | Varies | The chosen value |\r\n\r\n## Options\r\n\r\n| Option  | Type            | Description                             |\r\n| ------- | --------------- | --------------------------------------- |\r\n| Unnamed | Dropdown (type) | The type of the input and output values |\r\n\r\n\r\n\r\n",
      "html": "<h1 id=\"boolean-value-selector\">Boolean Value Selector <a class=\"heading-anchor-permalink\" href=\"#boolean-value-selector\">#</a></h1>\n<p><img src=\"../../IMG/Boolean-Value-Selector.png\" alt=\"Boolean-Value-Selector\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Given an input Boolean, this node chooses between two values</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Condition</td>\n<td>Boolean</td>\n<td>The condition used to choose between the two values</td>\n</tr>\n<tr>\n<td>True Value</td>\n<td>Varies</td>\n<td>The value chosen when the Condition is true</td>\n</tr>\n<tr>\n<td>False Value</td>\n<td>Varies</td>\n<td>The value chosen when the Condition is false</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Varies</td>\n<td>The chosen value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Dropdown (type)</td>\n<td>The type of the input and output values</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 73
    },
    {
      "path": "Nodes/Variables/Combine.md",
      "url": "Nodes/Variables/Combine.html",
      "content": "\r\n\r\n# Combine Node\r\n\r\n![Combine-Node](../../IMG/Combine-Node.png)\r\n\r\n## About\r\n\r\nSome types are comprised of several sub types. For example, a Vector3 can be created from 3 floats. This node allows certain types to be created from their sub types. Currently this node supports the following types:\r\n\r\n* Event\r\n* Midi Data\r\n* Vector2\r\n* Vector3\r\n\r\n\r\n",
      "html": "<h1 id=\"combine-node\">Combine Node <a class=\"heading-anchor-permalink\" href=\"#combine-node\">#</a></h1>\n<p><img src=\"../../IMG/Combine-Node.png\" alt=\"Combine-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Some types are comprised of several sub types. For example, a Vector3 can be created from 3 floats. This node allows certain types to be created from their sub types. Currently this node supports the following types:</p>\n<ul>\n<li>Event</li>\n<li>Midi Data</li>\n<li>Vector2</li>\n<li>Vector3</li>\n</ul>\n",
      "id": 74
    },
    {
      "path": "Nodes/Variables/Digital-Signal-Processor-Time.md",
      "url": "Nodes/Variables/Digital-Signal-Processor-Time.html",
      "content": "\r\n\r\n# Digital Signal Processor Time Node\r\n\r\n![DSP-Time](../../IMG/DSP-Time.png)\r\n\r\n## About\r\n\r\nThis node gets the current time on the Digital Signal processor\r\n\r\n\r\n\r\n",
      "html": "<h1 id=\"digital-signal-processor-time-node\">Digital Signal Processor Time Node <a class=\"heading-anchor-permalink\" href=\"#digital-signal-processor-time-node\">#</a></h1>\n<p><img src=\"../../IMG/DSP-Time.png\" alt=\"DSP-Time\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>This node gets the current time on the Digital Signal processor</p>\n",
      "id": 75
    },
    {
      "path": "Nodes/Variables/Split.md",
      "url": "Nodes/Variables/Split.html",
      "content": "\r\n\r\n# Split Node\r\n\r\n![Split-Node](../../IMG/Split-Node.png)\r\n\r\n## About\r\n\r\nSome types can be split into several components. For example, a Vector 3 is made up of 3 Floats. This node splits an incoming type and enables the user to access its components. The following types are supported:\r\n\r\n* Array\r\n* Audio Clip\r\n* Audio Mixer\r\n* Audio Mixer Group\r\n* Bounds\r\n* Collider\r\n* Collision\r\n* Contact Point\r\n* Event\r\n* MIDI Data\r\n* MIDI File\r\n* Physics Material\r\n* Quaternion\r\n* Rigidbody\r\n* Transform\r\n* Vector2\r\n* Vector3\r\n\r\n\r\n",
      "html": "<h1 id=\"split-node\">Split Node <a class=\"heading-anchor-permalink\" href=\"#split-node\">#</a></h1>\n<p><img src=\"../../IMG/Split-Node.png\" alt=\"Split-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Some types can be split into several components. For example, a Vector 3 is made up of 3 Floats. This node splits an incoming type and enables the user to access its components. The following types are supported:</p>\n<ul>\n<li>Array</li>\n<li>Audio Clip</li>\n<li>Audio Mixer</li>\n<li>Audio Mixer Group</li>\n<li>Bounds</li>\n<li>Collider</li>\n<li>Collision</li>\n<li>Contact Point</li>\n<li>Event</li>\n<li>MIDI Data</li>\n<li>MIDI File</li>\n<li>Physics Material</li>\n<li>Quaternion</li>\n<li>Rigidbody</li>\n<li>Transform</li>\n<li>Vector2</li>\n<li>Vector3</li>\n</ul>\n",
      "id": 76
    },
    {
      "path": "Nodes/Variables/Switch-Value-Selector.md",
      "url": "Nodes/Variables/Switch-Value-Selector.html",
      "content": "\r\n\r\n# Switch Value Selector\r\n\r\n\r\n\r\n![Switch Value Selector](../../IMG/Switch-Value-Selector.png)\r\n\r\n## About\r\n\r\nGiven an input Selector, this node chooses a value from a list\r\n\r\n## Inputs\r\n\r\n| Input    | Type   | Description                                            |\r\n| -------- | ------ | ------------------------------------------------------ |\r\n| Selector | Varies | Values are chosen depending on the value of this input |\r\n\r\n\r\n## Outputs\r\n\r\n| Output | Type   | Description        |\r\n| ------ | ------ | ------------------ |\r\n| Output | Varies | The selected value |\r\n\r\n## Options\r\n\r\n| Option        | Type            | Description                                  |\r\n| ------------- | --------------- | -------------------------------------------- |\r\n| Selector Type | Dropdown (type) | The type of the Selector input               |\r\n| Value Type    | Dropdown (type) | The type of the values the node chooses from |\r\n\r\n## The Switch Values List\r\n\r\nEach potential value the node chooses from has the following properties:\r\n\r\n## Switch Values List Inputs\r\n\r\n| Input    | Type   | Description                                                  |\r\n| -------- | ------ | ------------------------------------------------------------ |\r\n| Selector | Varies | The value compared to the Selector input on the node. If the two values are equal, this value gets selected |\r\n| Value    | Varies | The value                                                    |\r\n",
      "html": "<h1 id=\"switch-value-selector\">Switch Value Selector <a class=\"heading-anchor-permalink\" href=\"#switch-value-selector\">#</a></h1>\n<p><img src=\"../../IMG/Switch-Value-Selector.png\" alt=\"Switch Value Selector\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Given an input Selector, this node chooses a value from a list</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Selector</td>\n<td>Varies</td>\n<td>Values are chosen depending on the value of this input</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Varies</td>\n<td>The selected value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Selector Type</td>\n<td>Dropdown (type)</td>\n<td>The type of the Selector input</td>\n</tr>\n<tr>\n<td>Value Type</td>\n<td>Dropdown (type)</td>\n<td>The type of the values the node chooses from</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-switch-values-list\">The Switch Values List <a class=\"heading-anchor-permalink\" href=\"#the-switch-values-list\">#</a></h2>\n<p>Each potential value the node chooses from has the following properties:</p>\n<h2 id=\"switch-values-list-inputs\">Switch Values List Inputs <a class=\"heading-anchor-permalink\" href=\"#switch-values-list-inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Selector</td>\n<td>Varies</td>\n<td>The value compared to the Selector input on the node. If the two values are equal, this value gets selected</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Varies</td>\n<td>The value</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 77
    },
    {
      "path": "Nodes/Variables/Value-Selector.md",
      "url": "Nodes/Variables/Value-Selector.html",
      "content": "\r\n\r\n# Value Selector\r\n\r\n![Value-Selector](../../IMG/Value-Selector.png)\r\n\r\n## About\r\n\r\nGiven an input Selector, this node chooses a value from a list\r\n\r\n## Inputs\r\n\r\n| Input    | Type    | Description                                     |\r\n| -------- | ------- | ----------------------------------------------- |\r\n| Selector | Integer | The index of the value to output, starting at 1 |\r\n\r\n\r\n## Outputs\r\n\r\n| Output | Type   | Description        |\r\n| ------ | ------ | ------------------ |\r\n| Output | Varies | The selected value |\r\n\r\n## Options\r\n\r\n| Option | Type            | Description                                  |\r\n| ------ | --------------- | -------------------------------------------- |\r\n| Type   | Dropdown (type) | The type of the values the node chooses from |\r\n\r\n## The Values List\r\n\r\nEach potential value the node chooses from has the following properties:\r\n\r\n## Values List Inputs\r\n\r\n| Input   | Type   | Description |\r\n| ------- | ------ | ----------- |\r\n| Unnamed | Varies | The value   |",
      "html": "<h1 id=\"value-selector\">Value Selector <a class=\"heading-anchor-permalink\" href=\"#value-selector\">#</a></h1>\n<p><img src=\"../../IMG/Value-Selector.png\" alt=\"Value-Selector\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>Given an input Selector, this node chooses a value from a list</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Selector</td>\n<td>Integer</td>\n<td>The index of the value to output, starting at 1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Output</td>\n<td>Varies</td>\n<td>The selected value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Type</td>\n<td>Dropdown (type)</td>\n<td>The type of the values the node chooses from</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-values-list\">The Values List <a class=\"heading-anchor-permalink\" href=\"#the-values-list\">#</a></h2>\n<p>Each potential value the node chooses from has the following properties:</p>\n<h2 id=\"values-list-inputs\">Values List Inputs <a class=\"heading-anchor-permalink\" href=\"#values-list-inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unnamed</td>\n<td>Varies</td>\n<td>The value</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 78
    },
    {
      "path": "Nodes/Variables/Variable.md",
      "url": "Nodes/Variables/Variable.html",
      "content": "\r\n\r\n# Variable Node\r\n\r\n![Variable-Node](../../IMG/Variable-Node.png)\r\n\r\n## About\r\n\r\nThe Variable node allows data to be used in the graph, either from named variables from the Graph Input node, or as a constant defined on the Variable node.\r\n\r\n## Constant mode\r\nConstant mode is active when the Is Graph Input option is unchecked. In constant mode, the value output by the variable node is defined directly on the node. In constant mode, the following options are available:\r\n\r\nOption | Type | Description\r\n--- | --- | ---\r\nType | Type Selector | The type of the constant output by this node\r\nValue | Varies | The value of the constant\r\n\r\n## Graph Variable Mode\r\nGraph Variable Mode is active when the Is Graph Variable checkbox is set to True. In Graph Variable Mode, this node outputs the value of the selected named variable from the Graph Input node. \r\n\r\n\r\n",
      "html": "<h1 id=\"variable-node\">Variable Node <a class=\"heading-anchor-permalink\" href=\"#variable-node\">#</a></h1>\n<p><img src=\"../../IMG/Variable-Node.png\" alt=\"Variable-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Variable node allows data to be used in the graph, either from named variables from the Graph Input node, or as a constant defined on the Variable node.</p>\n<h2 id=\"constant-mode\">Constant mode <a class=\"heading-anchor-permalink\" href=\"#constant-mode\">#</a></h2>\n<p>Constant mode is active when the Is Graph Input option is unchecked. In constant mode, the value output by the variable node is defined directly on the node. In constant mode, the following options are available:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Type</td>\n<td>Type Selector</td>\n<td>The type of the constant output by this node</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Varies</td>\n<td>The value of the constant</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"graph-variable-mode\">Graph Variable Mode <a class=\"heading-anchor-permalink\" href=\"#graph-variable-mode\">#</a></h2>\n<p>Graph Variable Mode is active when the Is Graph Variable checkbox is set to True. In Graph Variable Mode, this node outputs the value of the selected named variable from the Graph Input node.</p>\n",
      "id": 79
    },
    {
      "path": "Nodes/Variables/Write.md",
      "url": "Nodes/Variables/Write.html",
      "content": "\r\n\r\n# Write Node\r\n\r\n![Write-Node](../../IMG/Write-Node.png)\r\n\r\n## About\r\n\r\nThe Write node writes an incoming value to the given named variable in the Graph Input node. \r\n\r\n## Inputs\r\nInput | Type | Description\r\n------------ | ------|-------\r\nStart Write | Event | When this input is triggered, the incoming value is read and written to the specified graph variable.\r\nUnnamed | Varies | The value to be written to the variable\r\n\r\n## Outputs\r\nOutput | Type| Description\r\n------------ | -------|------\r\nWrite Ended | Event | Once the value has been written, this output is triggered\r\n\r\n## Options\r\nOption | Type | Description\r\n------------ | -------|------\r\nVariable Name | Variable Name Selector | The variable on the Graph Input to write to\r\n\r\n\r\n",
      "html": "<h1 id=\"write-node\">Write Node <a class=\"heading-anchor-permalink\" href=\"#write-node\">#</a></h1>\n<p><img src=\"../../IMG/Write-Node.png\" alt=\"Write-Node\"></p>\n<h2 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h2>\n<p>The Write node writes an incoming value to the given named variable in the Graph Input node.</p>\n<h2 id=\"inputs\">Inputs <a class=\"heading-anchor-permalink\" href=\"#inputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start Write</td>\n<td>Event</td>\n<td>When this input is triggered, the incoming value is read and written to the specified graph variable.</td>\n</tr>\n<tr>\n<td>Unnamed</td>\n<td>Varies</td>\n<td>The value to be written to the variable</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"outputs\">Outputs <a class=\"heading-anchor-permalink\" href=\"#outputs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Write Ended</td>\n<td>Event</td>\n<td>Once the value has been written, this output is triggered</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Variable Name</td>\n<td>Variable Name Selector</td>\n<td>The variable on the Graph Input to write to</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 80
    }
  ]
}